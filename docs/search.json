[
  {
    "objectID": "Lectures/quarto_anatomy.html",
    "href": "Lectures/quarto_anatomy.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/quarto_anatomy.html#air-quality",
    "href": "Lectures/quarto_anatomy.html#air-quality",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Lecture schedule",
    "section": "",
    "text": "Please note that this schedule is subject to change.\n\n\n\n\n\n\n\n\nLecture\nDate\nTopic\n\n\n\n\n1\n01 Apr 2025\nIntroduction to R, R Studio, and Quarto\n\n\n2\n08 Apr 2025\nData Visualization and Debugging\n\n\n3\n15 Apr 2025\nData Manipulation\n\n\n4\n22 Apr 2025\nSummary Statistics\n\n\n5\n29 Apr 2025\nImporting and Exporting Data\n\n\n6\n06 May 2025\nCleaning and Joining Data\n\n\n7\n13 May 2025\nData Structures and Types; Regression in R\n\n\n8\n20 May 2025\nWorking with Text Data/Objects in R\n\n\n9\n27 May 2025\nIteration and Writing Functions\n\n\n10\n03 Jun 2025\nNext Steps",
    "crumbs": [
      "Lectures",
      "Lecture schedule"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Example.html",
    "href": "Homework/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I’m interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n6..145\n\n\n\n\n\n\n\n146\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nThe mean petal length is 3.76 but its median petal length is 4.35. It’s range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species…?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let’s look at some basic descriptives of the dataset.\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nMin. :4.300\nMin. :2.000\nMin. :1.000\nMin. :0.100\nsetosa :50\n\n\n1st Qu.:5.100\n1st Qu.:2.800\n1st Qu.:1.600\n1st Qu.:0.300\nversicolor:50\n\n\nMedian :5.800\nMedian :3.000\nMedian :4.350\nMedian :1.300\nvirginica :50\n\n\nMean :5.843\nMean :3.057\nMean :3.758\nMean :1.199\nNA\n\n\n3rd Qu.:6.400\n3rd Qu.:3.300\n3rd Qu.:5.100\n3rd Qu.:1.800\nNA\n\n\nMax. :7.900\nMax. :4.400\nMax. :6.900\nMax. :2.500\nNA\n\n\n\n\n\n\n\nIt’s interesting to note with the summary function that for numerical data it’ll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let’s see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there’s much more overlap. Overall, there’s tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments and peer reviews. For specific instructions and templates for individual assignments, click on that assignment listed on the left.\nAll assignments should be created using Quarto and uploaded to Canvas. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.\nThis is a one-credit pass/fail course intended to help you learn R. The focus is on learning and practice, not on points. Assignments and peer reviews will be graded for completion, but the points are not the point: they are key opportunities to practice R/RStudio/Quarto and to learn from each other. Feel free to work together, discussion questions on Ed Discussion, trade ideas and tips.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#peer-review",
    "href": "Homework/homework.html#peer-review",
    "title": "Overview",
    "section": "Peer Review",
    "text": "Peer Review\nYou are required to examine and provide feedback on a peer’s homework submission each week. Reading and evaluating others’ code gives you the chance to see how other people approached the problems and share how you do things differently. Please give constructive, polite, and insightful comments that encourage your classmate and help them learn from you. Try to mention each of the following: one or more things they did well, one or more tips you have to improve their work, and one or more things you learned from reading their work.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#assignment-due-dates",
    "href": "Homework/homework.html#assignment-due-dates",
    "title": "Overview",
    "section": "Assignment Due Dates",
    "text": "Assignment Due Dates\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n08 April\n13 April\n\n\n2\n15 April\n20 April\n\n\n3\n22 April\n27 April\n\n\n4\n29 April\n03 May\n\n\n5\n06 May\n11 May\n\n\n6\n13 May\n18 May\n\n\n7\n20 May\n25 May\n\n\n8\n27 May\n01 June\n\n\n9\n03 June\n08 June",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework1.html",
    "href": "Homework/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least one plot and one table using the gt package. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Make sure to update headers, text, etc. to reflect this Homework 1 assignment. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file",
    "crumbs": [
      "Homework",
      "Homework 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nWednesdays 4-6pm\nSavery Hall, Room 117 (CSSCR Lab)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nWednesdays 4-6pm\nSavery Hall, Room 117 (CSSCR Lab)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "Homework/homework1_fall.html",
    "href": "Homework/homework1_fall.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix inline R calculations, R output, and plots with text describing the relationships you see. Include at least two plots and at least one instance of inline R code (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()). You are encouraged to include more! You may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file"
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html",
    "href": "Homework/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")\n\n\n\n\n\n\n\n\nUnless you include the chunk option #| echo: false, your code chunk will be displayed in your final document."
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome! I look forward to working with you this quarter.\nThis syllabus is subject to change. All changes will be announced in class and via email announcements from Ed Discussion.\n\nOverview\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career.\nThis course has no prerequisites; we do not assume you have any prior programming experience with R or any other language. We will also cover almost no statistics, but this course should help prepare you for CSSS, STAT, or other departments’ methods courses so that you can focus on the methods they cover more than the coding itself. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nLearning objectives\nBy the end of the course, students will be able to…\n\nDevelop more confidence in their programming skills and their understanding of computation more broadly\nBe familiar with the RStudio application and the syntax of the R language\nOrganize and document coding projects for reproducibility and efficient workflow\nRead in data from a file and explore the data\nManipulate and reformat data for quality control, summary statistics, and other purposes\nCombine multiple data sets from different sources and of different types\nCreate beautiful, clear, and informative data visualizations\nCombine text, code, and output into reports using Quarto\nGain confidence troubleshooting, debugging, and learning how to do new things in R\n\n\n\nStructure\nThis course consists of a two-hour hands-on lecture and an optional two-hour hands-on office hour.\nIn person or remote? This course is intended to be primarily in person, but I recognize that life happens, so I will plan to hold lectures in a hybrid fashion in case you need to join remotely sometimes. This way we can also post lecture recordings in case you want to review something from class.\n\nLectures\nFor a schedule of lecture topics, please see the Lectures page. Note that the course will not meet during final exam week.\nPlease bring a laptop to class each week so that you can follow along with examples, practice problems, and live coding in class. If you do not have a laptop you can bring to class and are not sure how to borrow one, please let me know in advance.\n\n\nOffice hours\nOffice hours are optional and are a great space for asking questions, getting more practice, working on homework, and continuing discussions from class.\n\n\n\nResources\nThis course has no required text. I will guide you through content during lecture, and the lecture notes will all be here on this website. There are also many helpful resources available for free online if you would like further references along the way or after this class ends. In particular, if you’d like an extra reference, you can check out R for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund.\n\n\nClass communication\n\nCourse content (lecture notes) and homework instructions will be posted here on the course website.\nSubmit your assignments and peer reviews through Canvas.\nI will send out homework clarifications, schedule changes, and other important information through Ed Discussion announcements which will send you an email.\nPlease use Ed Discussion to post your questions to peers and answer others’ questions! I will also keep an eye on the discussions and reply as needed.\nFor administrative emails, please send them through Ed Discussion as a private thread, which will send only to me.\nPlease make good use of my office hours to address your questions, work through homework, and get extra practice with the material.\nWhen asking questions, please provide the code you ran and the error you gave, be specific and concrete, and try to provide a minimal reproducible example. This helps me and your fellow students give you the most helpful feedback!\n\n\n\nAnonymous feedback\nThroughout the course, I welcome your feedback through this short anonymous feedback survey on what’s working for you about the class environment or format, what’s not, and any suggestions or ideas you have.\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments, assigned weekly for the first 9 weeks of instruction. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be submitted as both .html and .qmd documents; we will go over how to create these. I will grade these assignments for completion (3 points if submitted, 0 otherwise) and peers will provide feedback on your work through peer review assignments. These homework assignments are designed first and foremost to develop skills rather than “prove” you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work.\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to provide constructive feedback on another student’s submission. Reading others’ code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be graded for completion.\nSchedule: Homework assignments will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. You can see a list of due dates on the Homework page.\nLate assignments: No late assignments will be accepted. The reason for this is to ensure you are getting feedback at regular intervals and staying on track. The grading is lenient, so submit whatever you have by each deadline, and your grade will be fine if you miss submitting an assignment or two due to illness or emergencies.\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. Learning is a collaborative and creative process, and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before or after class, attending office hours, and/or reaching out on Ed Discussion. As much as possible, I encourage you to use my office hours.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#title-slide",
    "href": "Lectures/CSSS508_Lecture1.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/CSSS508_Lecture1.html#welcome",
    "title": "CSSS 508",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#some-reasons-i-love-r-rstudio-and-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#some-reasons-i-love-r-rstudio-and-quarto",
    "title": "CSSS 508",
    "section": "Some reasons I love R, RStudio, and Quarto",
    "text": "Some reasons I love R, RStudio, and Quarto\nMy research:\n\nMaking pretty maps, doing analysesTeaching materials (these slides and the website are made with Quarto!)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/CSSS508_Lecture1.html#introductions",
    "title": "CSSS 508",
    "section": "Introductions",
    "text": "Introductions\nLet’s start by getting to know each other a bit better. Share the following with your neighbor:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or more generally)\nOne word that best describes your feelings about taking this class\nIf you could have any superpower, what would you choose?\n\n\nPair up with someone nearby and introduce yourself to one another (~ 5 min).",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#syllabus-and-course-goals",
    "href": "Lectures/CSSS508_Lecture1.html#syllabus-and-course-goals",
    "title": "CSSS 508",
    "section": "Syllabus and course goals",
    "text": "Syllabus and course goals\nThe syllabus (as well as lots of other information) can be found on our course website\nFeel free to follow along online as I run through the syllabus!\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\n\nDeveloping intermediate data management and visualization skills\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\n\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#logistics-general",
    "href": "Lectures/CSSS508_Lecture1.html#logistics-general",
    "title": "CSSS 508",
    "section": "Logistics: General",
    "text": "Logistics: General\nLecture: Tuesdays 4:30-6:20pm, Thomson Hall Room 125\nOffice Hours: Wednesdays 4-6pm, Savery Hall Room 117 (CSSCR Lab)\n\n\n\nHow to Contact Me\n\n\nPlease post your questions on Ed Discussion (accessible through Canvas) rather than emailing me. This helps ensure I won’t miss them!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "href": "Lectures/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "title": "CSSS 508",
    "section": "Logistics: Three Tools for Class",
    "text": "Logistics: Three Tools for Class\n\n\n\n\nCommunication\n\n\nLearning is collaborative! In addition to being the place to communicate with me, please use Ed Discussion to ask each other questions, share resources, etc.\n\n\n\n\n\n\n\nHomework & Peer-Reviews\n\n\nWe will be using Canvas only for homework & peer review submissions and to house lecture recordings and Zoom links.\n\n\n\n\n\n\n\n\nCourse Content\n\n\nAll course content (lecture slides and homework instructions) will be accessible on our course website.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#prerequisites",
    "href": "Lectures/CSSS508_Lecture1.html#prerequisites",
    "title": "CSSS 508",
    "section": "Prerequisites",
    "text": "Prerequisites\n\n\nNone 😎",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#computers",
    "href": "Lectures/CSSS508_Lecture1.html#computers",
    "title": "CSSS 508",
    "section": "Computers",
    "text": "Computers\nI recommend bringing a laptop to class so you can follow along and practice during class.\n\n\n\nKeep In Mind\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will not necessarily be the same/up to date if you do your work on different computers. My advice is to consistently use the same device for homework assignments or to make sure to download the latest versions of R, RStudio, and Quarto when using a new machine.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#readings",
    "href": "Lectures/CSSS508_Lecture1.html#readings",
    "title": "CSSS 508",
    "section": "Readings",
    "text": "Readings\n\n\n\nTextbooks: This course has no textbook. However, I will be suggesting selections from R for Data Science to pair with each week’s topic. While not required, I strongly suggest reading those selections before doing the homework for that week.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#course-assessment",
    "href": "Lectures/CSSS508_Lecture1.html#course-assessment",
    "title": "CSSS 508",
    "section": "Course Assessment",
    "text": "Course Assessment\nFinal grade\nCredit/No Credit (C/NC); You need at least 60% to get Credit\n\n\nHomework (75%; assessed by peers)\n9 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lecture sessions and due a week later.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nNot submitted.\n0\n\n\nTurned in but low effort, ignoring many directions.\n1\n\n\nDecent effort, followed directions with some minor issues.\n2\n\n\nSubmitted\n3\n\n\n\n\n\n\n\nPeer Grading (25%; assessed by me)\nOne per homework, assessed on a binary satisfactory/unsatisfactory scale. Due 5 days after homework due date.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nDidn’t follow all peer-review instructions.\n0\n\n\nPeer review is at least several sentences long,  mentions any and all key issues from the assignment,  and points out at least one positive thing in your  peer’s work (and hopefully more!).\n1",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "href": "Lectures/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "title": "CSSS 508",
    "section": "Due Dates and Late Policy",
    "text": "Due Dates and Late Policy\nHomework/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas by 4:30pm the day it is due.\nNo late assignments will be accepted to ensure you receive feedback at regular intervals and stay on track. The grading is lenient, so submit whatever you have by each deadline, and your grade will be fine if you miss submitting an assignment or two due to illness or emergencies.\nPeer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework, you will not be given a peer’s homework to review and vice versa.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "CSSS 508",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternative approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least several sentences that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\n\n\nSend me a private message on Ed Discussion if you would like your assignment to be regraded or for me to provide feedback if no peer review was given.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/CSSS508_Lecture1.html#academic-integrity",
    "title": "CSSS 508",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n\n\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/CSSS508_Lecture1.html#classroom-environment",
    "title": "CSSS 508",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#classroom-environment-1",
    "href": "Lectures/CSSS508_Lecture1.html#classroom-environment-1",
    "title": "CSSS 508",
    "section": "Classroom Environment…",
    "text": "Classroom Environment…\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\n\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#accommodations",
    "href": "Lectures/CSSS508_Lecture1.html#accommodations",
    "title": "CSSS 508",
    "section": "Accommodations",
    "text": "Accommodations\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website.\n\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help-and-feedback",
    "href": "Lectures/CSSS508_Lecture1.html#help-and-feedback",
    "title": "CSSS 508",
    "section": "Help and Feedback",
    "text": "Help and Feedback\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before or after class, attending office hours, and/or reaching out on Ed Discussion. As much as possible, I encourage you to use my office hours.\n\nAlso, help one another as you navigate this course! Use Ed Discussion to discuss questions with each other, and feel free to form study/practice groups.\n\n\n\n\n\nFeedback\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can submit anonymous feedback here. I will also send out a mid-quarter feedback survey.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/CSSS508_Lecture1.html#asking-questions",
    "title": "CSSS 508",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\n\n\n\nFYI\n\n\nIf you ask me a question directly on Ed Discussion or in office hours, I may send out your question (anonymously) along with my answer to the whole course.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "CSSS 508",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\nCode represents R code or keyboard shortcuts you can use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "title": "CSSS 508",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\nCode represents R code you could use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49 \n# Sometimes important stuff is highlighted!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "title": "CSSS 508",
    "section": "A Note on How to Use These Slides",
    "text": "A Note on How to Use These Slides\nSince the lectures for this class were created using Quarto, there are numerous built-in features meant to facilitate your learning, particularly of R.\n\n\nThe bars in the bottom left-hand corner will show you a table of contents for the entire slideshow, allowing you to find what you’re looking for more easily.\nIf you hover over any chunk of R code embedded in the slides you will see a clipboard which you can click to copy the code. You can then paste it in your own Quarto document or R script to run it in your session of RStudio.\nTo get a PDF version of these slides click File &gt; Print from your internet browser, select Save as PDF as the Destination or Printer, and make sure the Layout is set to Landscape. (Note: the PDF Export Mode in Tools actually cuts off content which is why I’m not recommending it)\nClicking on the paintbrush in the bottom left-hand corner allows you to draw directly on the slides, in a very Microsoft Paint kind of way. See if it’s useful but I make no promises!\nType ? at any time to see all the available key-board shortcuts.\nSome pages are scrollable.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/CSSS508_Lecture1.html#why-r",
    "title": "CSSS 508",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n\n\nR is free.\n\n\n\n\nR has a very large community.\n\n\n\n\nR can handle virtually any data format.\n\n\n\n\nR makes replication easy.\n\n\n\n\nR is a language so it can do everything.\n\n\n\n\nR skills transfer to other languages like Python and Julia.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/CSSS508_Lecture1.html#r-studio",
    "title": "CSSS 508",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a “front-end” or integrated development environment (IDE) for R that can make your life easier.\n\nWe’ll show RStudio can…\n\n\nOrganize your code, output, and plots\nAuto-complete code and highlight syntax\nHelp view data and objects\nEnable easy integration of R code into documents with Quarto\n\n\n\n\n\nIt can also…\n\nManage git repositories (version control)\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "CSSS 508",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "CSSS 508",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\n\n\nWorks with LaTeX and HTML for math and more formatting control",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "CSSS 508",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!\n\n\nGo to the course homepage, https://jpierkunke.github.io/CSSS508-Spring2025/\n\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nLastly, click the Download Quarto link and download Quarto to your machine.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/CSSS508_Lecture1.html#getting-started",
    "title": "CSSS 508",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "CSSS 508",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\n\nHighlight lines in the editor window and click     Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "CSSS 508",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click     Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ⌘+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n\n\nType individual lines in the console and press Enter.\n\n\n\n\nIn quarto documents, click within a code chunk and click the green arrow     to run the chunk. The button beside that (   ) runs all prior chunks.\n\n\n\nThe console will show the lines you ran followed by any printed output.\n\nThis thing is the caret: |",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/CSSS508_Lecture1.html#incomplete-code",
    "title": "CSSS 508",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "CSSS 508",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n\n\n123 + 456 + 789\n\n[1] 1368\n\n\n\n\nThe [1] in the output indicates the numeric index of the first element on that line.\n\n\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ⌘+Enter.\n\n\n\nsqrt(400)\n\n[1] 20",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#functions",
    "href": "Lectures/CSSS508_Lecture1.html#functions",
    "title": "CSSS 508",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R.\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\n\n\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n\n\n\n\n\nSomething to Note\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it’s therefore a required specification.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help",
    "href": "Lectures/CSSS508_Lecture1.html#help",
    "title": "CSSS 508",
    "section": "Help",
    "text": "Help\n\n\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the bottom right.\n\n?sqrt\n\n\nIf you’re trying to look up the help page for a function and can’t remember its name you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help-1",
    "href": "Lectures/CSSS508_Lecture1.html#help-1",
    "title": "CSSS 508",
    "section": "Help",
    "text": "Help\nHelp files provide documentation on how to use functions and what functions produce. They will generally consist of the following sections:\n\n\nDescription - What does it do?\n\n\nUsage - How do you write it?\n\n\nArguments - What arguments does it take; which are required; what are the defaults?\n\n\nDetails - A more in-depth description\n\n\nValue - What does the function return?\n\n\nSee Also - Related R functions\n\n\nExamples - Example (& reproducible) code",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#objects",
    "href": "Lectures/CSSS508_Lecture1.html#objects",
    "title": "CSSS 508",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n\nCreating an object can be done using the assignment operators &lt;- or =: . . .\n\nnew.object &lt;- 144\nx = 5\n\n\n\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside () like in sqrt(x).\n\n\nWe do math with operators, e.g., x + y.\n+ is the addition operator!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/CSSS508_Lecture1.html#calling-objects",
    "title": "CSSS 508",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nnew.object\n\n[1] 144",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#naming-objects",
    "href": "Lectures/CSSS508_Lecture1.html#naming-objects",
    "title": "CSSS 508",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio auto-complete means long, descriptive names are better than short, vague ones! Good names save confusion later!\n\n\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods\nAnd_some.People_ARETRUErebels\n\n\n\n\nRemember that object names are CaSe SeNsItIvE!!\nAlso, TYPOS MATTER!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/CSSS508_Lecture1.html#using-objects",
    "title": "CSSS 508",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. . . .\n\nnew.object + 10\n\n[1] 154\n\nnew.object + new.object\n\n[1] 288\n\nsqrt(new.object)\n\n[1] 12",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#comments",
    "href": "Lectures/CSSS508_Lecture1.html#comments",
    "title": "CSSS 508",
    "section": "Comments",
    "text": "Comments\nAnything written after #1 will be ignored by R.\n\n# create vector of ages of students\nages &lt;- c(45, 21, 27, 34, 23, 24, 24)\n\n# get average age of students\nmean(ages)\n\n[1] 28.28571\n\n\n\nComments help collaborators and future-you understand what, and more importantly, why you are doing what you’re doing with that specific line/chunk of code.\n\n\nAdditionally, comments allow you to explain your overall coding plan and record anything important that you’ve discovered along the way.\n\nIn Quarto documents, comments only work in code chunks. Outside of a chunk, # creates headers like “comments” at the top of this slide.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/CSSS508_Lecture1.html#vectors",
    "title": "CSSS 508",
    "section": "Vectors",
    "text": "Vectors\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e. TRUE, FALSE).\n\nYou can create a vector using the function c() which stands for “combine” or “concatenate”. . . .\n\nnew.object &lt;- c(4, 9, 16, 25, 36)\nnew.object\n\n[1]  4  9 16 25 36\n\n\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\n\n\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new.object)\n\n[1] 2 3 4 5 6",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/CSSS508_Lecture1.html#more-complex-objects",
    "title": "CSSS 508",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#creating-a-quarto-document",
    "href": "Lectures/CSSS508_Lecture1.html#creating-a-quarto-document",
    "title": "CSSS 508",
    "section": "Creating a Quarto Document",
    "text": "Creating a Quarto Document\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\n\nMake sure HTML Output is selected\nIn the Title box call this test document “My First Qmd” and click Create\n\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking     towards the top left of the source pane).\nLastly, click     Render at the top of the source pan to “knit” your document into an html file. This will produce a minimal webpage since we only have a title. We need to add more content!\n\n\nIf you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "href": "Lectures/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "title": "CSSS 508",
    "section": "Anatomy of a Quarto Document",
    "text": "Anatomy of a Quarto Document\n\n\n\n\nQuarto file\nRendered html document\n\n\n\n\n\n---\ntitle: \"ggplot2 demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 4\n    code-fold: true\n---\n\n## Air Quality\n\n@fig-airquality further explores the impact of temperature on ozone level.\n\n```{r}\n#| label: fig-airquality\n#| fig-cap: \"Temperature and ozone level.\"\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n\n\n\n\n\n\n\n\nThe rendered output of the qmd file shown on the previous tab.\n\n\n\n\n\n\n\nElements of a Quarto document include:\n\n\nAn (optional) YAML header (surrounded by ---s).\n\n\n\n\nPlain text and any associated formatting.\n\n\n\n\nChunks of code (surrounded by ``` s) and/or their output.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-headers",
    "title": "CSSS 508",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of a .qmd file is a YAML1code block, and everything else is part of the main document. Try adding some of these other fields to your YAML and re-render it to see what it looks like.\n\n---\ntitle: \"My Report\"\nauthor: \"Jess Kunke\"\ndate: \"April 1, 2025\"\noutput: html_document\n---\n\n\nTo mess with global formatting, you can modify the header2.\n\noutput:\n  html_document:\n    theme: readable\n\n\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.Be careful though, YAML is space-sensitive; indents matter!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-syntax",
    "title": "CSSS 508",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\nOutput\nbold/strong emphasis italic/normal emphasis \nHeader\n\n\nSubheader\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\nQuarto Syntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "CSSS 508",
    "section": "Quarto Syntax Continued",
    "text": "Quarto Syntax Continued\nThis is all basic markdown syntax which you can learn about here.\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "CSSS 508",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r squared}\ny &lt;- 1:5\nz &lt;- y^2\n```\n\n\n\nTry copying any of the code chunks from the previous three slides to add some formatted text to your own qmd.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "CSSS 508",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\n\nWays to modify the overall document appearance\nWays to format parts of your document\nLearn about the visual editor here",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "CSSS 508",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code…\n```{r cars}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nAdd this code chunk to your document!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/CSSS508_Lecture1.html#chunk-options",
    "title": "CSSS 508",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r barchart}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/CSSS508_Lecture1.html#chunk-options-1",
    "title": "CSSS 508",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "CSSS 508",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options for the chunk in my_first_Rmd.qmd and re-render your document to see what happens.\n\n```{r fenced}\n#| eval: false\nsummary(cars)\n```",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/CSSS508_Lecture1.html#in-line-r-code",
    "title": "CSSS 508",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n\n\nFour score and seven years ago is the same as 87 years.\n\n\n\nMaybe we’ve saved a variable in a code chunk that we want to reference in the text:\n\nx &lt;- sqrt(77)\n\n\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n\n\nThe value of x rounded to the nearest two decimals is 8.77.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/CSSS508_Lecture1.html#this-is-amazing",
    "title": "CSSS 508",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\n\n\n\n\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\n\n\n\n\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "CSSS 508",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\n\ndate: \"March 26, 2024\"\nto\ndate: \"`r Sys.time()`\"",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r",
    "href": "Lectures/CSSS508_Lecture1.html#base-r",
    "title": "CSSS 508",
    "section": "Base R\n",
    "text": "Base R\n\nSimply by downloading R you have access to what is referred to as Base R. That is, the built-in functions and datasets that R comes equipped with, right out of the box.\n\nExamples that we’ve already seen include &lt;-, sqrt(), +, Sys.time(), and summary() but there are obviously many many more.\n\n\nYou can see a whole list of what Base R contains by running library(help = \"base\") in the console.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nIn the sample Quarto document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer tab in the source pane (“interactive” use only, don’t put in Quarto document!).\n\n\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nNote R is object-oriented which means summary() provides different information for different types of objects!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nhist() generates a histogram of a vector. Note that you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\n\n\n\nhist(cars$dist)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can try and make this histogram a bit more appealing by adding more arguments and their specifications.\n\n\nCode\nPlot\n\n\n\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line (y-value)\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line (x-value)\n\n\n\n\n\nNote\n\n\ndist ~ speed is a formula of the type y ~ x. The first element (dist) gets plotted on the y-axis and the second (speed) goes on the x-axis. Regression formulae follow this convention as well!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\", # add y-axis label\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "href": "Lectures/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "title": "CSSS 508",
    "section": "Another Base R Dataset: swiss\n",
    "text": "Another Base R Dataset: swiss\n\nLet’s look at another built-in dataset.\n\nFirst, run ?swiss in the console to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "CSSS 508",
    "section": "Looking at swiss\n",
    "text": "Looking at swiss\n\n\n\nCode\nPlot\n\n\n\n\npairs(swiss, \n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets with numerical/continuous data, but mostly useless for larger data.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#packages",
    "href": "Lectures/CSSS508_Lecture1.html#packages",
    "title": "CSSS 508",
    "section": "Packages",
    "text": "Packages\nWhat makes R so powerful though is it’s extensive library of packages. Due to it’s open-source nature, anyone (even you!) can write a package that others can use.\n\nPackages contain pre-made functions and/or data that can be used to extend Base R’s capabilities.\n\n\n\n\n\nBase R/Package Analogy\n\n\nBase R is like creating a recipe from scratch: going to the store and buying all the ingredients and cooking it by yourself. Using a package is more akin to using a meal-kit service: you still have to cook but you’re provided with the ingredients and step-by-step instructions for making the recipe.\n\n\n\n\n\nAs of this writing there are 22,254 available packages!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-1",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-1",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nYou never want to include this line of code in a Quarto document or an R Script",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-2",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-2",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package2!\nYou never want to include this line of code in a Quarto document or an R ScriptYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-3",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-3",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package2!\n\nOnce a package is installed, you need to load it into the current session of R so you can use it. You’ll do this by putting the following in an R Script or embedded in a code chunk in a Quarto file:\n\n\nlibrary(package_name)\n\nYou never want to include this line of code in a Quarto document or an R ScriptYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#gt-package",
    "href": "Lectures/CSSS508_Lecture1.html#gt-package",
    "title": "CSSS 508",
    "section": "\ngt Package",
    "text": "gt Package\nLet’s make a table that’s more polished than the code-y output R automatically gives us. To do this, we’ll want to install our first package called gt. In the console, run: install.packages(\"gt\").\n\n\n\nDifferent Syntax\n\n\nNotice that unlike the library() command, the name of a package to be installed must be in quotes? This is because the name here is a search term (text, not an object!) while for library() it is an actual R object.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#making-cleaner-tables",
    "href": "Lectures/CSSS508_Lecture1.html#making-cleaner-tables",
    "title": "CSSS 508",
    "section": "Making cleaner tables",
    "text": "Making cleaner tables\n\n\nCode\nTable\n\n\n\n\nlibrary(gt) # loads gt, do once in your session\ngt(as.data.frame.matrix(summary(swiss))) \n\n\n\n\n\nNesting Functions\n\n\nNote that we put the summary(swiss) function call inside the as.data.frame.matrix() call which all went into the gt() function. This is called nesting functions and is very common. I’ll introduce a method next week to avoid confusion from nesting too many functions inside each other.\n\n\n\n\n\n\n\n\nWhat’s as.data.frame.matrix() Doing?\n\n\ngt() takes as its first argument a data.frame-type object, while summary() produces a table-type object. Therefore, as.data.frame.matrix() was additionally needed to turn the table into a data.frame.\n\n\n\n\n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nMin. :35.00\nMin. : 1.20\nMin. : 3.00\nMin. : 1.00\nMin. : 2.150\nMin. :10.80\n\n\n1st Qu.:64.70\n1st Qu.:35.90\n1st Qu.:12.00\n1st Qu.: 6.00\n1st Qu.: 5.195\n1st Qu.:18.15\n\n\nMedian :70.40\nMedian :54.10\nMedian :16.00\nMedian : 8.00\nMedian : 15.140\nMedian :20.00\n\n\nMean :70.14\nMean :50.66\nMean :16.49\nMean :10.98\nMean : 41.144\nMean :19.94\n\n\n3rd Qu.:78.45\n3rd Qu.:67.65\n3rd Qu.:22.00\n3rd Qu.:12.00\n3rd Qu.: 93.125\n3rd Qu.:21.70\n\n\nMax. :92.50\nMax. :89.70\nMax. :37.00\nMax. :53.00\nMax. :100.000\nMax. :26.60",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "href": "Lectures/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "title": "CSSS 508",
    "section": "\ngt’s Version of head() and tail()\n",
    "text": "gt’s Version of head() and tail()\n\n\n\nhead()\ngt_preview() alternative\n\n\n\n\nhead(swiss)\n\n             Fertility Agriculture Examination Education Catholic\nCourtelary        80.2        17.0          15        12     9.96\nDelemont          83.1        45.1           6         9    84.84\nFranches-Mnt      92.5        39.7           5         5    93.40\nMoutier           85.8        36.5          12         7    33.77\nNeuveville        76.9        43.5          17        15     5.16\nPorrentruy        76.1        35.3           9         7    90.57\n             Infant.Mortality\nCourtelary               22.2\nDelemont                 22.2\nFranches-Mnt             20.2\nMoutier                  20.3\nNeuveville               20.6\nPorrentruy               26.6\n\n\n\n\n\ngt_preview(swiss, \n           top_n = 3, # default is 5\n           bottom_n = 3) # default is 1 \n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\n1\n80.2\n17.0\n15\n12\n9.96\n22.2\n\n\n2\n83.1\n45.1\n6\n9\n84.84\n22.2\n\n\n3\n92.5\n39.7\n5\n5\n93.40\n20.2\n\n\n4..44\n\n\n\n\n\n\n\n\n45\n35.0\n1.2\n37\n53\n42.34\n18.0\n\n\n46\n44.7\n46.6\n16\n29\n50.43\n18.2\n\n\n47\n42.8\n27.7\n22\n29\n58.33\n19.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n👋 Bye Bye as.data.frame.matrix()\n\n\nWe no longer need as.data.frame.matrix() since we’re no longer using summary(). Both head() and gt_preview() take a data.frame-type object as their first argument which is the same data type as swiss.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  }
]