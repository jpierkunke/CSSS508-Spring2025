[
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#title-slide",
    "href": "Lectures/CSSS508_Lecture4.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Manipulating and Summarizing Data\nCS&SS 508 • Lecture 4\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#pros-to-using-r-over-spreadsheets",
    "href": "Lectures/CSSS508_Lecture4.html#pros-to-using-r-over-spreadsheets",
    "title": "CSSS 508",
    "section": "Pros to using R over spreadsheets",
    "text": "Pros to using R over spreadsheets\nTools like Excel or Google Sheets let you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It’s hard to know how someone changed the raw data!\nIt’s hard to catch mistakes when you use spreadsheets1.\n\nToday, we’ll use R to manipulate data more transparently and reproducibly.\nDon’t be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#how-is-data-stored-in-r",
    "href": "Lectures/CSSS508_Lecture4.html#how-is-data-stored-in-r",
    "title": "CSSS 508",
    "section": "How is data stored in R?",
    "text": "How is data stored in R?\nUnder the hood, R stores different types of data in different ways.\n\ne.g., R knows that 4.0 is a number, and that \"banana\" is not a number.\n\nSo what exactly are the common data types, and how do we know what R is doing?\n\n\n\n\n\nLogicals (logical)\nFactors (factor)\nDate/Date-time (Date, POSIXct, POSIXt)\nNumbers (integer, double)\nMissing Values (NA, NaN, Inf)\nCharacter Strings (character)\n\n\n\n\nc(FALSE, TRUE, TRUE)\nfactor(c(\"red\", \"blue\"))\nas_Date(c(\"2018-10-04\"))\nc(1, 10*3, 4, -3.14)\nc(NA, NA, NA, NaN, NaN, NA)\nc(\"red\", \"blue\", \"blue\")",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#a-running-example-for-today",
    "href": "Lectures/CSSS508_Lecture4.html#a-running-example-for-today",
    "title": "CSSS 508",
    "section": "A running example for today",
    "text": "A running example for today\n\nlibrary(gapminder)\n\n# what does this next line do?\ngap = gapminder[11:14,]\n\n# take a look at gap\ngap\n\n# a column is a vector\ngap$continent\n\n# look at the structure\n# - what variable type is continent?\n# - what do the 1's and 2's mean?\nstr(gap$continent)\n\n# look at the structure\n# - what variable type is year?\n# - what does [1:4] mean?\n# - what are the numbers it prints after the [1:4]?\nstr(gap$year)\n\n# look at the structure of gap\n# gap is a data frame (specifically a type called a tibble)\n# data frames are named lists of column vectors, which is\n# why we can access a column using datasetname$columnname\nstr(gap)",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#booleans",
    "href": "Lectures/CSSS508_Lecture4.html#booleans",
    "title": "CSSS 508",
    "section": "Booleans",
    "text": "Booleans\nThe simplest data type is a Boolean, or binary, variable: TRUE or FALSE1.\n\nMore often than not our data don’t actually have a variable with this data type, but they are definitely created and evaluated in the data manipulation and summarizing process.\n\n\nLogical operators refer to base functions which allow us to test if a condition is present between two objects.\n\n\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\n\n\nNaturally, these types of expressions produce a binary outcome of T or F which enables us to transform our data in a variety of ways!\n\nor NA",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#logical-operators-in-r",
    "href": "Lectures/CSSS508_Lecture4.html#logical-operators-in-r",
    "title": "CSSS 508",
    "section": "Logical Operators in R",
    "text": "Logical Operators in R\nComparing objects\n\n\n\n\n==:\n!=:\n&gt;, &gt;=, &lt;, &lt;=:\n%in%:\n\n\n\n\n\nis equal to1\nnot equal to\nless than, less than or equal to, etc.\nused when checking if equal to one of several values\n\n\n\n\n\nCombining comparisons\n\n\n\n\n\n&:\n|:\n!:\nxor():\n\n\n\n\n\nboth conditions need to hold (AND)\n\nat least one condition needs to hold (OR)\n\ninverts a logical condition (TRUE becomes FALSE, vice versa)\n\nexclusive OR (i.e. x or y but NOT both)\n\n\n\n\n\nYou may also see && and || but they are what’s known as short-circuiting operators and are not to be used in dplyr functions (used for programming not data manipulation); they’ll only ever return a single TRUE or FALSE.\nNote: there are TWO equal signs here!",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#logicals-with-our-example",
    "href": "Lectures/CSSS508_Lecture4.html#logicals-with-our-example",
    "title": "CSSS 508",
    "section": "Logicals with our example",
    "text": "Logicals with our example\n\n# let's start from here again\ngap = gapminder[11:14,]\n\n# what do these lines do? why do you get the answers you do?\ngap[1,1] == \"Afghanistan\" #*\ngap[1,1] == \"Albania\"\ngap[1,1] == \"Banana\"\n\n# how is this different from line #* above?\ngap[,1] == \"Afghanistan\"\n# another way to do the same thing:\ngap$country == \"Afghanistan\"\n\n# what does this do differently?\ngap[1,] == \"Afghanistan\"\n\n# try the following code; when do you want to use %in% instead of ==?\n# identify which rows correspond to either Albania or Lithuania\ngap$country %in% c(\"Albania\", \"Lithuania\")\n\n# when do you want to use !(...)? how would you have to rewrite this code if \n#   you didn't use !(...)?\n# identify which rows do NOT correspond to either Albania or Tunisia\n!(gap$country %in% c(\"Albania\", \"Lithuania\"))",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#practice",
    "href": "Lectures/CSSS508_Lecture4.html#practice",
    "title": "CSSS 508",
    "section": "Practice",
    "text": "Practice\nWrite a line of code to identify rows…\n\nwith a per-capita GDP greater than 800\nbefore or in 2005\nbefore 1955 or after 2005\nbefore 1955 and a per-capita GDP greater than 800",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#solutions",
    "href": "Lectures/CSSS508_Lecture4.html#solutions",
    "title": "CSSS 508",
    "section": "Solutions",
    "text": "Solutions\n\n# 1. with a per-capita GDP greater than 800\ngap$gdpPercap &gt; 800\n\n# 2. before or in 2005\ngap$year &lt;= 2005\n\n# 3. before 1955 or after 2005\ngap$year &lt; 1995 | gap$year &gt; 2005\n\n# 4. before 1955 and a per-capita GDP greater than 800\ngap$year &lt; 1995 | gap$gdpPercap &gt; 800",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#using-logical-indices-to-subset-your-data",
    "href": "Lectures/CSSS508_Lecture4.html#using-logical-indices-to-subset-your-data",
    "title": "CSSS 508",
    "section": "Using logical indices to subset your data",
    "text": "Using logical indices to subset your data\nSo far, we’ve just created logical vectors indicating which elements or rows meet certain conditions.\nWe can use this to get specific rows of a dataset:\n\n# all rows with a per-capita GDP greater than 800\ngap[gap$gdpPercap &gt; 800,]\n\n\nOr to get specific values of a variable (column):\n\n# all values of the lifeExp variable before 1955 and a per-capita GDP greater than 800\n# here are two ways to do that\ngap$lifeExp[gap$year &lt; 1995 | gap$gdpPercap &gt; 800]\ngap[gap$year &lt;= 2005, \"lifeExp\"]\n\n\n\nWe’ve seen briefly in class how to subset data with the filter function we saw from the tidyverse using these same logical vectors:\n\n# all values of the lifeExp variable before 1955 and a per-capita GDP greater than 800\n# here are two ways to do that\nfilter(gap, gap$gdpPercap &gt; 800)\nfilter(gap, gap$year &lt; 1995 | gap$gdpPercap &gt; 800)\n\nWe’ll see today how we can combine filter with select to get values for a subset of columns as well as a subset of rows.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#tip-making-simple-test-examples-to-understand-how-a-function-works",
    "href": "Lectures/CSSS508_Lecture4.html#tip-making-simple-test-examples-to-understand-how-a-function-works",
    "title": "CSSS 508",
    "section": "Tip: Making simple test examples to understand how a function works",
    "text": "Tip: Making simple test examples to understand how a function works\nThe best way to understand and troubleshoot code is to try it out in pieces and on small examples.\nThe is.na() function returns a logical vector telling you which elements of a vector are NA.\nTo try it out, you can make a small example vector and try this function on it. This is one of the best ways to get more comfortable with R!\nFor example:\n\nmyvec = c(\"1\", \"4\", NA, \"6\")\nis.na(myvec)\n\n[1] FALSE FALSE  TRUE FALSE\n\nx = c(NA, 1:4, NA)\nis.na(x)\n\n[1]  TRUE FALSE FALSE FALSE FALSE  TRUE",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#conditional-transformations",
    "href": "Lectures/CSSS508_Lecture4.html#conditional-transformations",
    "title": "CSSS 508",
    "section": "Conditional transformations",
    "text": "Conditional transformations\n\nif_else()\n\nIf you want to use one value when a condition is TRUE and another value when it’s FALSE.\n\n\n# note: this is pseudocode, will not work if you try to run it\nif_else(condition = \"A logical vector\", \n        true = \"Output when condition is true\", \n        false = \"Output when condition is false\")\n\n\n\n\n# this is a real code example\nx &lt;- c(-3:3, NA)\nx # take a look at x\n9if_else(x &gt; 0, \"+\", \"-\", \"missing\")\n\n\n9\n\nThere’s an optional fourth argument, missing which will be used if the input is NA.\n\n\n\n\n[1] -3 -2 -1  0  1  2  3 NA\n[1] \"-\"       \"-\"       \"-\"       \"-\"       \"+\"       \"+\"       \"+\"      \n[8] \"missing\"\n\n\n\n\n\ncase_when()\n\nA very useful extension of if_else() for multiple conditions1.\n\n\n\ncase_when(\n  x == 0   ~ \"0\",\n  x &lt; 0    ~ \"-\", \n  x &gt; 0    ~ \"+\",\n10  is.na(x) ~ \"missing\"\n11)\n\n\n10\n\nUse .default if you want to create a “default”/catch all value.\n\n11\n\nBoth functions require compatible types: i.e. numerical and logical, strings and factors, dates and datetimes, NA and everything.\n\n\n\n\n[1] \"-\"       \"-\"       \"-\"       \"0\"       \"+\"       \"+\"       \"+\"      \n[8] \"missing\"\n\n\n\nNote that if multiple conditions match in case_when(), only the first will be used.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#using-ifelse-and-case_when-to-addmodify-columns",
    "href": "Lectures/CSSS508_Lecture4.html#using-ifelse-and-case_when-to-addmodify-columns",
    "title": "CSSS 508",
    "section": "Using ifelse and case_when to add/modify columns",
    "text": "Using ifelse and case_when to add/modify columns\nWe can use these conditional transformations to add new columns whose values are based on existing columns. Here, we make a variable called popsize whose value is “large” or “small” depending on the value of the pop variable:\n\ngap = gapminder[11:14,]\ngap$popsize = ifelse(gap$pop &gt; 10000000, \"large\", \"small\")\n\nWe can also modify existing columns based on their own or other columns’ values. Here, we change pop from a numerical column to a character column whose value is either “large” or “small”:\n\ngap = gapminder[11:14,]\ngap$pop = ifelse(gap$pop &gt; 10000000, \"large\", \"small\")",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#dplyr",
    "href": "Lectures/CSSS508_Lecture4.html#dplyr",
    "title": "CSSS 508",
    "section": "dplyr",
    "text": "dplyr\nToday, we’ll use tools from the dplyr package to manipulate data!\n\nLike ggplot2, dplyr is part of the Tidyverse, and included in the tidyverse package.\n\n\nlibrary(tidyverse)\n\nAll dplyr functions have the following in common:\n\nThe first argument is always a data frame.\nThe subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\nThe output is always a new data frame.\n\nEach function operates either on rows, columns, groups, or entire tables.\nTo save the transformations you’ve made to a data frame you’ll need to save the output to a new object.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#the-nycflights13-datasets",
    "href": "Lectures/CSSS508_Lecture4.html#the-nycflights13-datasets",
    "title": "CSSS 508",
    "section": "The nycflights13 datasets",
    "text": "The nycflights13 datasets\nTo demonstrate data transformations we’re going to use the nycflights13 datasets, which you’ll need to download and load into R\n\n# Download and load data\n12# install.packages(\"nycflights13\")\n13library(nycflights13)\n\n\n12\n\nRun in console.\n\n13\n\nLoad into R session.\n\n\n\n\n\nnycflights13 includes five data frames1, some of which contain missing data (NA):\n\n14data(flights)\n15data(airlines)\n16data(airports)\n17data(planes)\n18data(weather)\n\n\n14\n\nflights leaving JFK, LGA, or EWR in 2013\n\n15\n\nairline abbreviations\n\n16\n\nairport metadata\n\n17\n\nairplane metadata\n\n18\n\nhourly weather data for JFK, LGA, and EWR\n\n\n\n\n\nNote these are separate data frames, each needing to be loaded separately:",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#subset-rows-filter",
    "href": "Lectures/CSSS508_Lecture4.html#subset-rows-filter",
    "title": "CSSS 508",
    "section": "Subset Rows: filter()",
    "text": "Subset Rows: filter()\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter().\n\n\ndelay_2hr &lt;- flights |&gt; \n1  filter(dep_delay &gt; 120)\n2delay_2hr\n\n\n1\n\nHere’s where all your new knowledge about logical operators comes in handy! Make sure to use == not = to test the logical condition.\n\n2\n\nNow, delay_2hr is an object in our environment which contains rows corresponding to flights that experienced at least a 2 hour delay.\n\n\n\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#subset-columns-select",
    "href": "Lectures/CSSS508_Lecture4.html#subset-columns-select",
    "title": "CSSS 508",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\n\nWe can select columns by name:\n\nflights |&gt; \n3  select(year, month, day)\n\n\n3\n\nYou can use a - before a variable name or a vector of variables to drop them from the data (i.e.  select(-c(year, month, day))).\n\n\n\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#subset-columns-select-1",
    "href": "Lectures/CSSS508_Lecture4.html#subset-columns-select-1",
    "title": "CSSS 508",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\nWe can select columns between variables (inclusive):\n\nflights |&gt; \n4  select(year:day)\n\n\n4\n\nAdd a ! before year and you’ll drop this group of variables from the data.\n\n\n\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#subset-columns-select-2",
    "href": "Lectures/CSSS508_Lecture4.html#subset-columns-select-2",
    "title": "CSSS 508",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\nWe can select columns based on a condition:\n\nflights |&gt; \n5  select(where(is.character))\n\n\n5\n\nThere are a number of helper functions you can use with select() including starts_with(), ends_with(), contains() and num_range(). Read more about these and more here.\n\n\n\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#finding-unique-rows-distinct",
    "href": "Lectures/CSSS508_Lecture4.html#finding-unique-rows-distinct",
    "title": "CSSS 508",
    "section": "Finding Unique Rows: distinct()",
    "text": "Finding Unique Rows: distinct()\nYou may want to find the unique combinations of variables in a dataset. Use distinct()\n\n\nflights |&gt; \n6  distinct(origin, dest)\n\n\n6\n\nFind all unique origin and destination pairs.\n\n\n\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#distinct-drops-variables",
    "href": "Lectures/CSSS508_Lecture4.html#distinct-drops-variables",
    "title": "CSSS 508",
    "section": "distinct() drops variables!",
    "text": "distinct() drops variables!\nBy default, distinct() drops unused variables. If you don’t want to drop them, add the argument .keep_all = TRUE:\n\n\nflights |&gt; \n7  distinct(origin, dest, .keep_all = TRUE)\n\n\n7\n\nIt’s not a coincidence that all of these distinct flights are on January 1: distinct() will find the first occurrence of a unique row in the dataset and discard the rest. Use count() if you’re looking for the number of occurrences.\n\n\n\n\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#count-unique-rows-count",
    "href": "Lectures/CSSS508_Lecture4.html#count-unique-rows-count",
    "title": "CSSS 508",
    "section": "Count Unique Rows: count()",
    "text": "Count Unique Rows: count()\n\n\nflights |&gt;\n8  count(origin, dest, sort = TRUE)\n\n\n8\n\nsort = TRUE arranges them in descending order of number of occurrences.\n\n\n\n\n# A tibble: 224 × 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#grouping-data-group_by",
    "href": "Lectures/CSSS508_Lecture4.html#grouping-data-group_by",
    "title": "CSSS 508",
    "section": "Grouping Data: group_by()",
    "text": "Grouping Data: group_by()\nIf you want to analyze your data by specific groupings, use group_by():\n\nflights |&gt; \n1  group_by(month)\n\n\n1\n\ngroup_by() doesn’t change the data but you’ll notice that the output indicates that it is “grouped by” month (Groups: month [12]). This means subsequent operations will now work “by month”.\n\n\n\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#summarizing-data-summarize",
    "href": "Lectures/CSSS508_Lecture4.html#summarizing-data-summarize",
    "title": "CSSS 508",
    "section": "Summarizing Data: summarize()",
    "text": "Summarizing Data: summarize()\nsummarize() calculates summaries of variables in your data:\n\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\n\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max()).",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#summarize-example",
    "href": "Lectures/CSSS508_Lecture4.html#summarize-example",
    "title": "CSSS 508",
    "section": "summarize() Example",
    "text": "summarize() Example\nLet’s see what this looks like in our flights dataset:\n\n\nflights |&gt; \n  summarize(\n2    avg_delay = mean(dep_delay)\n  )\n\n\n2\n\nThe NA produced here is a result of calling mean on dep_delay. Any summarizing function will return NA if any of the values are NA. We can set na.rm = TRUE to change this behavior.\n\n\n\n\n# A tibble: 1 × 1\n  avg_delay\n      &lt;dbl&gt;\n1        NA",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#summarize-example-1",
    "href": "Lectures/CSSS508_Lecture4.html#summarize-example-1",
    "title": "CSSS 508",
    "section": "summarize() Example",
    "text": "summarize() Example\nLet’s see what this looks like in our flights dataset:\n\nflights |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE) \n  )\n\n# A tibble: 1 × 1\n  avg_delay\n      &lt;dbl&gt;\n1      12.6",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#summarizing-data-by-groups",
    "href": "Lectures/CSSS508_Lecture4.html#summarizing-data-by-groups",
    "title": "CSSS 508",
    "section": "Summarizing Data by Groups",
    "text": "Summarizing Data by Groups\nWhat if we want to summarize data by our groups? Use group_by() and summarize()\n\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 × 2\n   month delay\n   &lt;int&gt; &lt;dbl&gt;\n 1     1 10.0 \n 2     2 10.8 \n 3     3 13.2 \n 4     4 13.9 \n 5     5 13.0 \n 6     6 20.8 \n 7     7 21.7 \n 8     8 12.6 \n 9     9  6.72\n10    10  6.24\n11    11  5.44\n12    12 16.6 \n\n\n\n\nBecause we did group_by() with month, then used summarize(), we get one row per value of month!",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#summarizing-data-by-groups-1",
    "href": "Lectures/CSSS508_Lecture4.html#summarizing-data-by-groups-1",
    "title": "CSSS 508",
    "section": "Summarizing Data by Groups",
    "text": "Summarizing Data by Groups\nYou can create any number of summaries in a single call to summarize().\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n3    n = n()\n  )\n\n\n3\n\nn() returns the number of rows in each group.\n\n\n\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#grouping-by-multiple-variables",
    "href": "Lectures/CSSS508_Lecture4.html#grouping-by-multiple-variables",
    "title": "CSSS 508",
    "section": "Grouping by Multiple Variables",
    "text": "Grouping by Multiple Variables\n\ndaily &lt;- flights |&gt; \n  group_by(year, month, day)  \ndaily\n\n# A tibble: 336,776 × 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\nSummary & Grouping Behavior\n\n\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. You can change the default behavior by setting the .groups argument to a different value, e.g., “drop” to drop all grouping or “keep” to preserve the same groups. The default is “drop_last”.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#remove-grouping-ungroup",
    "href": "Lectures/CSSS508_Lecture4.html#remove-grouping-ungroup",
    "title": "CSSS 508",
    "section": "Remove Grouping: ungroup()",
    "text": "Remove Grouping: ungroup()\n\ndaily |&gt; \n  ungroup() \n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#new-alternative-for-grouping-.by",
    "href": "Lectures/CSSS508_Lecture4.html#new-alternative-for-grouping-.by",
    "title": "CSSS 508",
    "section": "New Alternative for Grouping: .by",
    "text": "New Alternative for Grouping: .by\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n4    .by = month\n  )\n\n\n4\n\n.by works with all verbs and has the advantage that you don’t need to use the .groups argument to suppress the grouping message or ungroup() when you’re done.\n\n\n\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#create-new-columns-mutate",
    "href": "Lectures/CSSS508_Lecture4.html#create-new-columns-mutate",
    "title": "CSSS 508",
    "section": "Create New Columns: mutate()",
    "text": "Create New Columns: mutate()\nYou can add new columns to a data frame using mutate().\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n3    .before = 1\n  )\n\n\n3\n\nBy default, mutate() adds new columns on the right hand side of your dataset, which makes it difficult to see if anything happened. You can use the .before argument to specify which numeric index (or variable name) to move the newly created variable to. .after is an alternative argument for this.\n\n\n\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#specifying-variables-to-keep-mutate",
    "href": "Lectures/CSSS508_Lecture4.html#specifying-variables-to-keep-mutate",
    "title": "CSSS 508",
    "section": "Specifying Variables to Keep: mutate()",
    "text": "Specifying Variables to Keep: mutate()\nYou can specify which columns to keep with the .keep argument:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n4    .keep = \"used\"\n  )\n\n\n4\n\n“used” retains only the variables used to create the new variables, which is useful for checking your work. Other options include: “all,” “unused,” and “none.”\n\n\n\n\n# A tibble: 336,776 × 6\n   dep_delay arr_delay air_time  gain hours gain_per_hour\n       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1         2        11      227    -9 3.78          -2.38\n 2         4        20      227   -16 3.78          -4.23\n 3         2        33      160   -31 2.67         -11.6 \n 4        -1       -18      183    17 3.05           5.57\n 5        -6       -25      116    19 1.93           9.83\n 6        -4        12      150   -16 2.5           -6.4 \n 7        -5        19      158   -24 2.63          -9.11\n 8        -3       -14       53    11 0.883         12.5 \n 9        -3        -8      140     5 2.33           2.14\n10        -2         8      138   -10 2.3           -4.35\n# ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_",
    "href": "Lectures/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_",
    "title": "CSSS 508",
    "section": "Select Specific Rows Per Group: slice_*",
    "text": "Select Specific Rows Per Group: slice_*\nThere are five handy functions that allow you extract specific rows within each group:\n\n\ndf |&gt; slice_head(n = 1) takes the first row from each group.\ndf |&gt; slice_tail(n = 1) takes the last row in each group.\ndf |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x.\ndf |&gt; slice_max(x, n = 1) takes the row with the largest value of column x.\ndf |&gt; slice_sample(n = 1) takes one random row.\n\n\n\nLet’s find the flights that are most delayed upon arrival at each destination.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_-1",
    "href": "Lectures/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_-1",
    "title": "CSSS 508",
    "section": "Select Specific Rows Per Group: slice_*",
    "text": "Select Specific Rows Per Group: slice_*\n\nflights |&gt; \n  group_by(dest) |&gt; \n5  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest, arr_delay) \n\n\n5\n\nYou can vary n to select more than one row, or instead of n =, you can use prop = 0.1 to select (e.g.) 10% of the rows in each group.\n\n\n\n\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest  arr_delay  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 ABQ         153  2013     7    22     2145           2007        98      132\n 2 ACK         221  2013     7    23     1139            800       219     1250\n 3 ALB         328  2013     1    25      123           2000       323      229\n 4 ANC          39  2013     8    17     1740           1625        75     2042\n 5 ATL         895  2013     7    22     2257            759       898      121\n 6 AUS         349  2013     7    10     2056           1505       351     2347\n 7 AVL         228  2013     8    13     1156            832       204     1417\n 8 BDL         266  2013     2    21     1728           1316       252     1839\n 9 BGR         238  2013    12     1     1504           1056       248     1628\n10 BHM         291  2013     4    10       25           1900       325      136\n# ℹ 98 more rows\n# ℹ 10 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nThere are 105 groups but 108 rows! Why? slice_min() and slice_max() keep tied values so n = 1 means “give us all rows with the highest value.” If you want exactly one row per group you can set with_ties = FALSE.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#sorting-data-by-rows-arrange",
    "href": "Lectures/CSSS508_Lecture4.html#sorting-data-by-rows-arrange",
    "title": "CSSS 508",
    "section": "Sorting Data by Rows: arrange()",
    "text": "Sorting Data by Rows: arrange()\nSometimes it’s useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange().\n\n\nflights |&gt; \n1  arrange(year, month, day, dep_time)\n\n\n1\n\nIf you provide more than one column name, each additional column will be used to break ties in the values of preceding columns.\n\n\n\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/CSSS508_Lecture4.html#sorting-data-by-rows-arrange-1",
    "title": "CSSS 508",
    "section": "Sorting Data by Rows: arrange()",
    "text": "Sorting Data by Rows: arrange()\nTo sort in descending order, using desc() within arrange()\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#rename-variables-rename",
    "href": "Lectures/CSSS508_Lecture4.html#rename-variables-rename",
    "title": "CSSS 508",
    "section": "Rename Variables: rename()",
    "text": "Rename Variables: rename()\nYou may receive data with unintuitive variable names. Change them using rename().\n\n\n\nVariable Syntax\n\n\nI recommend against using spaces in your variable names! It makes things really hard sometimes!!\n\n\n\n\nflights |&gt; \n2  rename(tail_num = tailnum)\n\n\n2\n\nrename(new_name = old_name) is the format. You can try out janitor::clean_names() if you want to automate this process for a lot of variables.\n\n\n\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#move-variables-around-relocate",
    "href": "Lectures/CSSS508_Lecture4.html#move-variables-around-relocate",
    "title": "CSSS 508",
    "section": "Move Variables Around: relocate()",
    "text": "Move Variables Around: relocate()\nYou might want to collect related variables together or move important variables to the front. Use relocate()!\n\nflights |&gt; \n5  relocate(time_hour, air_time)\n\n\n5\n\nBy default relocate() moves variables to the front but you can also specify where to put them using the .before and .after arguments, just like in mutate().\n\n\n\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#practice-manipulating-data-1",
    "href": "Lectures/CSSS508_Lecture4.html#practice-manipulating-data-1",
    "title": "CSSS 508",
    "section": "Practice: Manipulating Data",
    "text": "Practice: Manipulating Data\n\nCreate a new object that contains gapminder1 (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy.\nHow many rows and columns does the object contain?\nSort the rows by year (ascending order) and population (descending order) and overwrite the object you created for answer 1. Print the first 6 rows.\nAdd a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!\n\nFrom the gapminder package",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers",
    "href": "Lectures/CSSS508_Lecture4.html#answers",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder\n\n# A tibble: 18 × 4\n   country        year        pop lifeExp\n   &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n 1 China          1982 1000281000    65.5\n 2 China          1987 1084035000    67.3\n 3 China          1992 1164970000    68.7\n 4 China          1997 1230075000    70.4\n 5 China          2002 1280400000    72.0\n 6 China          2007 1318683096    73.0\n 7 India          1982  708000000    56.6\n 8 India          1987  788000000    58.6\n 9 India          1992  872000000    60.2\n10 India          1997  959000000    61.8\n11 India          2002 1034172547    62.9\n12 India          2007 1110396331    64.7\n13 United States  1982  232187835    74.6\n14 United States  1987  242803533    75.0\n15 United States  1992  256894189    76.1\n16 United States  1997  272911760    76.8\n17 United States  2002  287675526    77.3\n18 United States  2007  301139947    78.2",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers-1",
    "href": "Lectures/CSSS508_Lecture4.html#answers-1",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers-2",
    "href": "Lectures/CSSS508_Lecture4.html#answers-2",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year, desc(pop))\n\n\n\n\n\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n\n\n\n\nprint(subset_gapminder[1:6, ])\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers-3",
    "href": "Lectures/CSSS508_Lecture4.html#answers-3",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder\n\n# A tibble: 18 × 5\n   country        year        pop lifeExp pop_billions\n   &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1 China          1982 1000281000    65.5        1.00 \n 2 India          1982  708000000    56.6        0.708\n 3 United States  1982  232187835    74.6        0.232\n 4 China          1987 1084035000    67.3        1.08 \n 5 India          1987  788000000    58.6        0.788\n 6 United States  1987  242803533    75.0        0.243\n 7 China          1992 1164970000    68.7        1.16 \n 8 India          1992  872000000    60.2        0.872\n 9 United States  1992  256894189    76.1        0.257\n10 China          1997 1230075000    70.4        1.23 \n11 India          1997  959000000    61.8        0.959\n12 United States  1997  272911760    76.8        0.273\n13 China          2002 1280400000    72.0        1.28 \n14 India          2002 1034172547    62.9        1.03 \n15 United States  2002  287675526    77.3        0.288\n16 China          2007 1318683096    73.0        1.32 \n17 India          2007 1110396331    64.7        1.11 \n18 United States  2007  301139947    78.2        0.301",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers-4",
    "href": "Lectures/CSSS508_Lecture4.html#answers-4",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\nClassic syntaxNew syntax (dplyr 1.1.0)\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n1            .by = year)\n\n\n1\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). Learn more about this new feature here)\n\n\n\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#answers-5",
    "href": "Lectures/CSSS508_Lecture4.html#answers-5",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\nCodePlot\n\n\n\nlibrary(ggplot2) \nlibrary(ggthemes)\nlibrary(geomtextpath)\nggplot(subset_gapminder, aes(year, lifeExp, color = country)) +\n  geom_point() + \n  geom_textpath(aes(label = country), show.legend = FALSE) +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme_tufte(base_size = 20) + \n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#why-merge-data",
    "href": "Lectures/CSSS508_Lecture4.html#why-merge-data",
    "title": "CSSS 508",
    "section": "Why Merge Data?",
    "text": "Why Merge Data?\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n\n\nMerge the data!!\n\n\nTo do this we’ll be using the various join functions from the dplyr package.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#joining-in-concept",
    "href": "Lectures/CSSS508_Lecture4.html#joining-in-concept",
    "title": "CSSS 508",
    "section": "Joining in Concept",
    "text": "Joining in Concept\nWe need to think about the following when we want to merge data frames A and B:\n\n\nWhich rows are we keeping from each data frame?\n\n\n\n\nWhich columns are we keeping from each data frame?\n\n\n\n\n\nWhich variables determine whether rows match?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#keys",
    "href": "Lectures/CSSS508_Lecture4.html#keys",
    "title": "CSSS 508",
    "section": "Keys",
    "text": "Keys\nKeys are the way that two datasets are connected to one another. The two types of keys are:\n\nPrimary: a variable or set of variables that uniquely identifies each observation.\n\nCalled a compound key if it requires multiple variables to uniquely identify each observation\nYou can use unique(), n_distinct(), distinct(), select() and related functions to see which variables or combinations of variables uniquely identify each row; how?\n\nForeign: a variable (or set of variables) that corresponds to a primary key in another table.\n\n\nNote: grey shading indicates the primary key for that particular dataset.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#primary-keys",
    "href": "Lectures/CSSS508_Lecture4.html#primary-keys",
    "title": "CSSS 508",
    "section": "Primary Keys",
    "text": "Primary Keys\nLet’s look at our data to gain a better sense of what this all means.\n\nairlinesairportsplanesweatherflights\n\n\n\nairlines records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making carrier the primary key.\n\n\nairlines \n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\n\n\nairports records data about each airport. You can identify each airport by its three letter airport code, making faa the primary key.\n\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\n\n\nplanes records data about each plane. You can identify a plane by its tail number, making tailnum the primary key.\n\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\n\n\n\n\nweather records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making origin and time_hour the compound primary key.\n\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\nflights has three variables (time_hour, flight, carrier) that uniquely identify an observation. More significantly, however, it contains foreign keys that correspond to the primary keys of the other datasets.\n\n\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#foreign-keys",
    "href": "Lectures/CSSS508_Lecture4.html#foreign-keys",
    "title": "CSSS 508",
    "section": "Foreign Keys",
    "text": "Foreign Keys\n\nNote: grey shading indicates the primary key for that particular dataset.\n\nflights$origin –&gt; airports$faa\nflights$dest –&gt; airports$faa\nflights$origin-flights$time_hour –&gt; weather$origin-weather$time_hour.\nflights$tailnum –&gt; planes$tailnum\nflights$carrier –&gt; airlines$carrier",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#checking-keys",
    "href": "Lectures/CSSS508_Lecture4.html#checking-keys",
    "title": "CSSS 508",
    "section": "Checking Keys",
    "text": "Checking Keys\nA nice feature of these data are that the primary and foreign keys have the same name and almost every variable name used across multiple tables has the same meaning.1 This isn’t always the case!2\n\nIt is good practice to make sure your primary keys actually uniquely identify an observation and that they don’t have any missing values.\n\n\n\nplanes |&gt; \n1  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\n\n1\n\nIf your primary keys uniquely identify each observation you’ll get an empty tibble in return.\n\n\n\n\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n\n\n\nplanes |&gt; \n2  filter(is.na(tailnum))\n\n\n2\n\nIf none of your primary keys are missing you’ll get an empty tibble in return here too.\n\n\n\n\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\nWith the exception of year: it means year of departure in flights and year of manufacture in planes. We’ll cover how to handle this shortly.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#surrogate-keys",
    "href": "Lectures/CSSS508_Lecture4.html#surrogate-keys",
    "title": "CSSS 508",
    "section": "Surrogate Keys",
    "text": "Surrogate Keys\nSometimes you’ll want to create an index of your observations to serve as a surrogate key because the compound primary key is not particularly easy to reference.\n\nFor example, our flights dataset has three variables that uniquely identify each observation: time_hour, carrier, flight.\n\n\n\nflights2 &lt;- flights |&gt; \n3  mutate(id = row_number(), .before = 1)\nflights2\n\n\n3\n\nrow_number() simply specifies the row number of the data frame.\n\n\n\n\n\n\n# A tibble: 336,776 × 20\n      id  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1     1  2013     1     1      517            515         2      830\n 2     2  2013     1     1      533            529         4      850\n 3     3  2013     1     1      542            540         2      923\n 4     4  2013     1     1      544            545        -1     1004\n 5     5  2013     1     1      554            600        -6      812\n 6     6  2013     1     1      554            558        -4      740\n 7     7  2013     1     1      555            600        -5      913\n 8     8  2013     1     1      557            600        -3      709\n 9     9  2013     1     1      557            600        -3      838\n10    10  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#basic-equi--joins",
    "href": "Lectures/CSSS508_Lecture4.html#basic-equi--joins",
    "title": "CSSS 508",
    "section": "Basic (Equi-) Joins",
    "text": "Basic (Equi-) Joins\nAll join functions have the same basic interface: they take a pair of data frames and return one data frame.\n\nThe order of the rows and columns is primarily going to be determined by the first data frame.\n\n\ndplyr has two types of joins: mutating and filtering.\n\n\n\n\n\nMutating Joins\nAdd new variables to one data frame from matching observations from another data frame.\n\nleft_join()\nright_join()\ninner_join()\nfull_join()\n\n\n\n\n\nFiltering Joins\nFilter observations from one data frame based on whether or not they match an observation in another data frame.\n\nsemi_join()\nanti-join()",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#basic-joins-visualized",
    "href": "Lectures/CSSS508_Lecture4.html#basic-joins-visualized",
    "title": "CSSS 508",
    "section": "Basic joins, visualized",
    "text": "Basic joins, visualized",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#mutating-joins-1",
    "href": "Lectures/CSSS508_Lecture4.html#mutating-joins-1",
    "title": "CSSS 508",
    "section": "Mutating Joins",
    "text": "Mutating Joins",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#left_join",
    "href": "Lectures/CSSS508_Lecture4.html#left_join",
    "title": "CSSS 508",
    "section": "left_join()",
    "text": "left_join()\n\nThe most common type of join\nAppends columns from y to x by the rows in x\n\nNA added if there is nothing from y\n\nNatural join: when all variables that appear in both datasets are used as the join key\n\nIf the join_by() argument is not specified, left_join() will automatically join by all columns that have names and values in common.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#left_join-in-nycflights13",
    "href": "Lectures/CSSS508_Lecture4.html#left_join-in-nycflights13",
    "title": "CSSS 508",
    "section": "left_join in nycflights13",
    "text": "left_join in nycflights13\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\n\nWith only the pertinent variables from the flights dataset, we can see how a left_join works with the airlines dataset.\n\nflights2 |&gt;\n  left_join(airlines)\n\n\n\nJoining with `by = join_by(carrier)`\n\n\n# A tibble: 336,776 × 7\n    year time_hour           origin dest  tailnum carrier name                  \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I…\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#different-variable-meanings",
    "href": "Lectures/CSSS508_Lecture4.html#different-variable-meanings",
    "title": "CSSS 508",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n  left_join(planes)\n\n\n\nJoining with `by = join_by(year, tailnum)`\n\n\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier type  manufacturer\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      &lt;NA&gt;  &lt;NA&gt;        \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      &lt;NA&gt;  &lt;NA&gt;        \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      &lt;NA&gt;  &lt;NA&gt;        \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      &lt;NA&gt;  &lt;NA&gt;        \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      &lt;NA&gt;  &lt;NA&gt;        \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      &lt;NA&gt;  &lt;NA&gt;        \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      &lt;NA&gt;  &lt;NA&gt;        \n# ℹ 336,766 more rows\n# ℹ 5 more variables: model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;,\n#   engine &lt;chr&gt;\n\n\n\nWhen we try to do this, however, we get a bunch of NAs. Why?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#different-variable-meanings-1",
    "href": "Lectures/CSSS508_Lecture4.html#different-variable-meanings-1",
    "title": "CSSS 508",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n  left_join(planes)\n\nJoining with `by = join_by(year, tailnum)`\n\n\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier type  manufacturer\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      &lt;NA&gt;  &lt;NA&gt;        \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      &lt;NA&gt;  &lt;NA&gt;        \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      &lt;NA&gt;  &lt;NA&gt;        \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      &lt;NA&gt;  &lt;NA&gt;        \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      &lt;NA&gt;  &lt;NA&gt;        \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      &lt;NA&gt;  &lt;NA&gt;        \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      &lt;NA&gt;  &lt;NA&gt;        \n# ℹ 336,766 more rows\n# ℹ 5 more variables: model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;,\n#   engine &lt;chr&gt;\n\n\nJoin is trying to use tailnum and year as a compound key. While both datasets have year as a variable, they mean different things. Therefore, we need to be explicit here about what to join by.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#different-variable-meanings-2",
    "href": "Lectures/CSSS508_Lecture4.html#different-variable-meanings-2",
    "title": "CSSS 508",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n4  left_join(planes, join_by(tailnum))\n\n\n4\n\njoin_by(tailnum) is short for join_by(tailnum == tailnum) making these types of basic joins equi joins.\n\n\n\n\n\n\n# A tibble: 336,776 × 14\n   year.x time_hour           origin dest  tailnum carrier year.y type          \n    &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;         \n 1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mu…\n 2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mu…\n 3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mu…\n 4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mu…\n 5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mu…\n 6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mu…\n 7   2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6        2000 Fixed wing mu…\n 8   2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV        1998 Fixed wing mu…\n 9   2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6        2004 Fixed wing mu…\n10   2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA          NA &lt;NA&gt;          \n# ℹ 336,766 more rows\n# ℹ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\nWhen you have the same variable name but they mean different things you can specify a particular suffix with the suffix argument.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#different-variable-names",
    "href": "Lectures/CSSS508_Lecture4.html#different-variable-names",
    "title": "CSSS 508",
    "section": "Different variable names",
    "text": "Different variable names\nIf you have keys that have the same meaning (values) but are named different things in their respective datasets you’d also specify that with join_by()\n\n\nflights2 |&gt; \n5  left_join(airports, join_by(dest == faa))\n\n\n5\n\nby = c(\"dest\" = \"faa\") was the former syntax for this and you still might see that in older code.\n\n\n\n\n\n\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      George Bu…  30.0 -95.3\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      George Bu…  30.0 -95.3\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miami Intl  25.8 -80.3\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;        NA    NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hartsfiel…  33.6 -84.4\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chicago O…  42.0 -87.9\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Fort Laud…  26.1 -80.2\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      Washingto…  38.9 -77.5\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      Orlando I…  28.4 -81.3\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      Chicago O…  42.0 -87.9\n# ℹ 336,766 more rows\n# ℹ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\nThis will match dest to faa for the join and then drop faa.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#different-variable-names-1",
    "href": "Lectures/CSSS508_Lecture4.html#different-variable-names-1",
    "title": "CSSS 508",
    "section": "Different variable names",
    "text": "Different variable names\nYou can request dplyr to keep both keys with keep = TRUE argument.\n\n\nflights2 |&gt; \n  left_join(airports, join_by(dest == faa), keep = TRUE) \n\n\n\n# A tibble: 336,776 × 14\n    year time_hour           origin dest  tailnum carrier faa   name         lat\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      IAH   George Bu…  30.0\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      IAH   George Bu…  30.0\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      MIA   Miami Intl  25.8\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      ATL   Hartsfiel…  33.6\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      ORD   Chicago O…  42.0\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      FLL   Fort Laud…  26.1\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      IAD   Washingto…  38.9\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      MCO   Orlando I…  28.4\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      ORD   Chicago O…  42.0\n# ℹ 336,766 more rows\n# ℹ 5 more variables: lon &lt;dbl&gt;, alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n:::",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#unexpected-behavior",
    "href": "Lectures/CSSS508_Lecture4.html#unexpected-behavior",
    "title": "CSSS 508",
    "section": "Unexpected Behavior: ==",
    "text": "Unexpected Behavior: ==\nBe careful using == with numbers:\n\n\nx &lt;- c(1 / 49 * 49, sqrt(2) ^ 2)\nx\n\n[1] 1 2\n\n\n\n1x == c(1, 2)\n2print(x, digits = 16)\n\n\n1\n\nComputers store numbers with a fixed number of decimal places so there’s no way to precisely represent decimals.\n\n2\n\ndplyr::near() is a useful alternative which ignores small differences.\n\n\n\n\n[1] FALSE FALSE\n[1] 0.9999999999999999 2.0000000000000004",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#unexpected-behavior-missing-values",
    "href": "Lectures/CSSS508_Lecture4.html#unexpected-behavior-missing-values",
    "title": "CSSS 508",
    "section": "Unexpected Behavior: Missing values",
    "text": "Unexpected Behavior: Missing values\nSimilarly mysterious, missing values (NA) represent the unknown. Almost anything conditional involving NAs will also be unknown:\n\nNA &gt; 5\n10 == NA\n3NA == NA\n\n\n3\n\nThe logic here: if you have one unknown and a second unknown, you don’t actually know if they equal one another!\n\n\n\n\n[1] NA\n[1] NA\n[1] NA\n\n\n\nThis is the reason we use is.na() to check for missingness.\n\nis.na(c(NA, 5))\n\n[1]  TRUE FALSE",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#examples-of-logical-operators",
    "href": "Lectures/CSSS508_Lecture4.html#examples-of-logical-operators",
    "title": "CSSS 508",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet’s create two objects, A and B:\n\nA &lt;- c(5, 10, 15)\nB &lt;- c(5, 15, 25)\n\n\nComparisons:\n\nA == B\nA &gt; B\n4A %in% B\n\n\n4\n\nWill return a vector the length of A that is TRUE whenever a value in A is anywhere in B.  Note: You CAN use %in% to search for NAs.\n\n\n\n\n[1]  TRUE FALSE FALSE\n[1] FALSE FALSE FALSE\n[1]  TRUE FALSE  TRUE\n\n\n\n\nCombinations:\n\nA &gt; 5 & A &lt;= B \n5B &lt; 10 | B &gt; 20\n!(A == 10)\n\n\n5\n\nBe sure not to cut corners (i.e. writing  B &lt; 10 | &gt; 20). The code won’t technically error but it won’t evaluate the way you expect it to. Read more about the confusing logic behind this here.\n\n\n\n\n[1] FALSE  TRUE  TRUE\n[1]  TRUE FALSE  TRUE\n[1]  TRUE FALSE  TRUE",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#logical-summaries",
    "href": "Lectures/CSSS508_Lecture4.html#logical-summaries",
    "title": "CSSS 508",
    "section": "Logical Summaries",
    "text": "Logical Summaries\n\n\n\n\nany():\nall():\n\n\n\n\n\nthe equivalent of |; it’ll return TRUE if there are any TRUE’s in x\nthe equivalent of &; it’ll return TRUE only if all values of x are TRUE’s\n\n\n\n\n\nC &lt;- c(5, 10, NA, 10, 20, NA)\n6any(C &lt;= 10)\nall(C &lt;= 20)\n7all(C &lt;= 20, na.rm = TRUE)\n8mean(C, na.rm = TRUE)\n\n\n6\n\nLike other summary functions, they’ll return NA if there are any missing values present and it’s FALSE.\n\n7\n\nUse na.rm = TRUE to remove NAs prior to evaluation.\n\n8\n\nWhen you evaluate a logical vector numerically, TRUE = 1 and FALSE = 0. This makes sum() and mean() useful when summarizing logical functions (sum gives number of TRUEs and mean gives the proportion).\n\n\n\n\n[1] TRUE\n[1] NA\n[1] TRUE\n[1] 11.25",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#right_join",
    "href": "Lectures/CSSS508_Lecture4.html#right_join",
    "title": "CSSS 508",
    "section": "right_join()",
    "text": "right_join()\n\nHas the same interface as a left_join but keeps all rows in y instead of x",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#inner_join",
    "href": "Lectures/CSSS508_Lecture4.html#inner_join",
    "title": "CSSS 508",
    "section": "inner_join()",
    "text": "inner_join()\n\nHas the same interface as a left_join but only keeps rows that occur in both x and y",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#full_join",
    "href": "Lectures/CSSS508_Lecture4.html#full_join",
    "title": "CSSS 508",
    "section": "full_join()",
    "text": "full_join()\n\nHas the same interface as a left_join but keeps all rows in either x or y",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#filtering-joins-1",
    "href": "Lectures/CSSS508_Lecture4.html#filtering-joins-1",
    "title": "CSSS 508",
    "section": "Filtering Joins",
    "text": "Filtering Joins",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#semi_join",
    "href": "Lectures/CSSS508_Lecture4.html#semi_join",
    "title": "CSSS 508",
    "section": "semi_join()",
    "text": "semi_join()\n\nKeeps all rows in x that have a match in y",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#semi_join-in-nycflights13",
    "href": "Lectures/CSSS508_Lecture4.html#semi_join-in-nycflights13",
    "title": "CSSS 508",
    "section": "semi_join() in nycflights13",
    "text": "semi_join() in nycflights13\nWe could use a semi-join to filter the airports dataset to show just the origin airports.\n\n\nairports |&gt; \n  semi_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 3 × 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#anti_join",
    "href": "Lectures/CSSS508_Lecture4.html#anti_join",
    "title": "CSSS 508",
    "section": "anti_join()",
    "text": "anti_join()\n\nReturns all rows in x that don’t have a match in y",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#anti_join-in-nycflights13",
    "href": "Lectures/CSSS508_Lecture4.html#anti_join-in-nycflights13",
    "title": "CSSS 508",
    "section": "anti_join() in nycflights13",
    "text": "anti_join() in nycflights13\nWe can find rows that are missing from airports by looking for flights that don’t have a matching destination airport.\n\n\nairports |&gt; \n  anti_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 1,455 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,445 more rows\n\n\n\n\n\nThis type of join is useful for finding missing values that are implicit in the data (i.e. NAs that don’t show up in the data but only exist as an absence.)",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#more-than-one-match",
    "href": "Lectures/CSSS508_Lecture4.html#more-than-one-match",
    "title": "CSSS 508",
    "section": "More Than One Match",
    "text": "More Than One Match\n\n\nThere are three possible outcomes for a row in x:\n\n\nIf it doesn’t match anything, it’s dropped.\nIf it matches 1 row in y, it’s preserved.\nIf it matches more than 1 row in y, it’s duplicated once for each match.\n\n\n\n\nWhat happens if we match on more than one row?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#more-than-one-match-1",
    "href": "Lectures/CSSS508_Lecture4.html#more-than-one-match-1",
    "title": "CSSS 508",
    "section": "More Than One Match",
    "text": "More Than One Match\n\ndf1 &lt;- tibble(key = c(1, 2, 2), val_x = c(\"x1\", \"x2\", \"x3\"))\ndf2 &lt;- tibble(key = c(1, 2, 2), val_y = c(\"y1\", \"y2\", \"y3\"))\n\ndf1 |&gt; \n  inner_join(df2, join_by(key))\n\n\n\n# A tibble: 5 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     2 x2    y3   \n4     2 x3    y2   \n5     2 x3    y3   \n\n\n\nIf you are doing this deliberately, you can set relationship = “many-to-many”, as the warning suggests.\n\n\n\nGiven their nature, filtering joins never duplicate rows like mutating joins do. They will only ever return a subset of the datasets.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#non-equi-joins",
    "href": "Lectures/CSSS508_Lecture4.html#non-equi-joins",
    "title": "CSSS 508",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we’ve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\n\ndplyr has four different types of non-equi joins:\n\n\n\n\n\nCross joins match every pair of rows.\n\n\n\n\n\n\n\nCross joins, aka self-joins, are useful when generating permutations (e.g. creating every possible combination of values). This comes in handy when creating datasets of predicted probabilities for plotting in ggplot.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#non-equi-joins-1",
    "href": "Lectures/CSSS508_Lecture4.html#non-equi-joins-1",
    "title": "CSSS 508",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we’ve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\ndplyr has four different types of non-equi joins:\n\n\n\nCross joins match every pair of rows.\nInequality joins use &lt;, &lt;=, &gt;, and &gt;= instead of ==.\n\nOverlap joins are a special type of inequality join designed to work with ranges1.\n\n\n\n\n\n\n\nInequality joins can be used to restrict the cross join so that instead of generating all permutations, we generate all combinations.\nOverlap joins provide three helpers that use inequality joins to make it easier to work with intervals: between(), within(), overlaps(). Read more about their functionality and specifications here.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture4.html#non-equi-joins-2",
    "href": "Lectures/CSSS508_Lecture4.html#non-equi-joins-2",
    "title": "CSSS 508",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we’ve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\ndplyr has four different types of non-equi joins:\n\n\n\nCross joins match every pair of rows.\nInequality joins use &lt;, &lt;=, &gt;, and &gt;= instead of ==.\n\nOverlap joins are a special type of inequality join designed to work with ranges.\n\nRolling joins are similar to inequality joins but only find the closest match.\n\n\n\n\n\n\n\n\n\n\n\n\nRolling joins are a special type of inequality join where instead of getting every row that satisfies the inequality, you get just the closest row. You can turn any inequality join into a rolling join by adding closest().",
    "crumbs": [
      "Lectures",
      "Lecture 4: Data wrangling"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#title-slide",
    "href": "Lectures/CSSS508_Lecture7.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Working with Text Data\nCS&SS 508 • Lecture 7\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#basics-of-strings",
    "href": "Lectures/CSSS508_Lecture7.html#basics-of-strings",
    "title": "CSSS 508",
    "section": "Basics of Strings",
    "text": "Basics of Strings\n\n\nA general programming term for a unit of character data is a string\n\nStrings are a sequence of characters\nIn R, “strings” and “character data” are mostly interchangeable.\nSome languages have more precise distinctions, but we won’t worry about that here!\n\n\n\n\n\nWe can create strings by surrounding text, numbers, spaces, or symbols with quotes!\n\nExamples: \"Hello! My name is Jess\" or \"%*$#01234\"\n\nYou can create a string using either single quotes (' ') or double quotes (\" \")\n\nIn the interests of consistency, the tidyverse style guide recommends using \" \", unless the string contains multiple \" \"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#escaping-with-strings",
    "href": "Lectures/CSSS508_Lecture7.html#escaping-with-strings",
    "title": "CSSS 508",
    "section": "Escaping with Strings",
    "text": "Escaping with Strings\nWe use a lot of different symbols in our code that we might actually want to represent within a string itself. To do that, we need to escape that particular character. We can do that using \\.\n\nFor instance, if we want to include a literal single or double quote in our string, we’d escape it by writing:\n\n1\"\\'\"\n2'\\\"'\n\n\n1\n\nSingle quote.\n\n2\n\nDouble quote.\n\n\n\n\n\n\nSimilarly, if we want to represent a \\ we’ll need to escape it as well…\n\n3\"\\\\\"\n\n\n3\n\nBackslash.\n\n\n\n\n\n\nNote: When you print these objects you’ll see the escape characters. To actually view the string’s contents ( and not the syntax needed to construct it), use str_view().\n\n\n\n4str_view(c(\"\\'\", '\\\"', \"\\\\\"))\n\n\n4\n\nAll stringr functions begin with the prefix str_ which is useful due to R Studio’s auto-complete feature.\n\n\n\n\n&gt; [1] │ '\n&gt; [2] │ \"\n&gt; [3] │ \\",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#other-special-characters",
    "href": "Lectures/CSSS508_Lecture7.html#other-special-characters",
    "title": "CSSS 508",
    "section": "Other Special Characters",
    "text": "Other Special Characters\nThere are other things you may want to represent inside a character string, such as a new line, or a tab space.\n\n\n5str_view(\"Sometimes you need\\nto create another line.\")\n6str_view(\"\\tOther times you just need to indent somewhere.\")\n\n\n5\n\nUse \\n to create a new line. Helpful when plotting if you have variable names or values that are wordy! If you need to do this for one or more variables you can use str_wrap() and specify the character width you desire.\n\n6\n\nUse \\t to add a tab. str_view will highlight tabs in blue in your console to make it stand out from other random whitespace.\n\n\n\n\n\n\n&gt; [1] │ Sometimes you need\n&gt;     │ to create another line.\n&gt; [1] │ {\\t}Other times you just need to indent somewhere.\n\n\n\n\nAdditionally, you can represent Unicode characters which will be written with the \\u or \\U escape.\n\nstr_view(c(\"\\U1F00F\", \"\\u2866\", \"\\U1F192\"))\n\n&gt; [1] │ 🀏\n&gt; [2] │ ⡦\n&gt; [3] │ 🆒",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "href": "Lectures/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "title": "CSSS 508",
    "section": "Data: King County Restaurant Inspections!",
    "text": "Data: King County Restaurant Inspections!\nToday we’ll study real data on food safety inspections in King County, collected from data.kingcounty.gov.\nNote these data are fairly large in their native .csv format. The following code can be used to download the data directly from Vic’s Github repo as a smaller, .Rdata object:\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "href": "Lectures/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "title": "CSSS 508",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\n\nglimpse(restaurants)\n\n&gt; Rows: 256,681\n&gt; Columns: 22\n&gt; $ Name                         &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"…\n&gt; $ `Program Identifier`         &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"…\n&gt; $ `Inspection Date`            &lt;chr&gt; \"03/02/2023\", \"03/02/2023\", \"08/31/2022\",…\n&gt; $ Description                  &lt;chr&gt; \"Seating 0-12 - Risk Category III\", \"Seat…\n&gt; $ Address                      &lt;chr&gt; \"2746 NE 45TH ST\", \"2746 NE 45TH ST\", \"27…\n&gt; $ City                         &lt;chr&gt; \"SEATTLE\", \"SEATTLE\", \"SEATTLE\", \"SEATTLE…\n&gt; $ `Zip Code`                   &lt;dbl&gt; 98105, 98105, 98105, 98105, 98105, 98105,…\n&gt; $ Phone                        &lt;chr&gt; \"(206) 722-6400\", \"(206) 722-6400\", \"(206…\n&gt; $ Longitude                    &lt;dbl&gt; -122.2964, -122.2964, -122.2964, -122.296…\n&gt; $ Latitude                     &lt;dbl&gt; 47.66231, 47.66231, 47.66231, 47.66231, 4…\n&gt; $ `Inspection Business Name`   &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"…\n&gt; $ `Inspection Type`            &lt;chr&gt; \"Routine Inspection/Field Review\", \"Routi…\n&gt; $ `Inspection Score`           &lt;dbl&gt; 20, 20, 10, 10, 0, 0, 0, 30, 30, 0, 47, 4…\n&gt; $ `Inspection Result`          &lt;chr&gt; \"Unsatisfactory\", \"Unsatisfactory\", \"Unsa…\n&gt; $ `Inspection Closed Business` &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n&gt; $ `Violation Type`             &lt;chr&gt; \"RED\", \"RED\", \"BLUE\", \"RED\", NA, NA, NA, …\n&gt; $ `Violation Description`      &lt;chr&gt; \"1300 - Food contact surfaces cleaned and…\n&gt; $ `Violation Points`           &lt;dbl&gt; 15, 5, 5, 5, 0, 0, 0, 5, 25, 0, 5, 2, 5, …\n&gt; $ Business_ID                  &lt;chr&gt; \"PR0089260\", \"PR0089260\", \"PR0089260\", \"P…\n&gt; $ Inspection_Serial_Num        &lt;chr&gt; \"DAJ5DTHLV\", \"DAJ5DTHLV\", \"DAEEWQC0L\", \"D…\n&gt; $ Violation_Record_ID          &lt;chr&gt; \"IVBTPZO0B\", \"IV5GOME67\", \"IVQ7QYW2V\", \"I…\n&gt; $ Grade                        &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,…\n\n\n\n\n\nGood Questions to Ask\n\n\n\n\n\nWhat does each row represent?\nIs the data in long or wide format?\n\n\n\n\n\nWhat are the key variables?\nHow are the data stored? (data type)",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#creating-strings",
    "href": "Lectures/CSSS508_Lecture7.html#creating-strings",
    "title": "CSSS 508",
    "section": "Creating Strings",
    "text": "Creating Strings\nYou can create strings based on the value of other strings with str_c() (string combine), which takes any number of vectors and returns a character vector.\n\n7str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508)\n8str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508, sep = \" \")\n9str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508, sep = \" \", collapse = \", \")\n\n\n7\n\nBy default, str_c doesn’t put a space between the vectors it is combining.\n\n8\n\nYou can add a specific separator, including a space, using the sep argument.\n\n9\n\nIf you want to combine the output into a single string, use collapse.\n\n\n\n\n\n\n&gt; [1] \"CSSS508\" \"STAT508\" \"SOC508\" \n&gt; [1] \"CSSS 508\" \"STAT 508\" \"SOC 508\" \n&gt; [1] \"CSSS 508, STAT 508, SOC 508\"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#example-1-with-restaurant-data",
    "href": "Lectures/CSSS508_Lecture7.html#example-1-with-restaurant-data",
    "title": "CSSS 508",
    "section": "Example #1 with Restaurant Data",
    "text": "Example #1 with Restaurant Data\n\nrestaurants |&gt; \n  select(Name, Address, City) |&gt; \n  distinct() |&gt; \n10  mutate(Sentence = str_c(Name, \" is located at \", Address, \" in \", City, \".\"),\n11         .keep = \"none\")\n\n\n10\n\nNotice there are spaces at the beginning and end of the fixed character strings. This is because if we used the sep argument here it would add a space before the period at the end of the sentence. So instead, we can add them directly where we want them.\n\n11\n\nUsing .keep = \"none\" here in order to see just the results of our mutate.\n\n\n\n\n\n\n&gt; # A tibble: 10,969 × 1\n&gt;    Sentence                                                                    \n&gt;    &lt;chr&gt;                                                                       \n&gt;  1 #807 TUTTA BELLA is located at 2746 NE 45TH ST in SEATTLE.                  \n&gt;  2 +MAS CAFE  is located at 1906 N 34TH ST in SEATTLE.                         \n&gt;  3 ?al?al Cafe is located at 122 2ND AVE S in SEATTLE.                         \n&gt;  4 100 LB CLAM is located at 1001 FAIRVIEW AVE N Unit 1700A in SEATTLE.        \n&gt;  5 1000 SPIRITS is located at 1225 1ST AVE in SEATTLE.                         \n&gt;  6 100TH AVE CAKES is located at 15364 NE 96TH PL in REDMOND.                  \n&gt;  7 108 VIETNAMESE AUTHENTIC  CUISINE is located at 18114 E VALLEY HWY in KENT. \n&gt;  8 11TH FRAME RESTAURANT & LOUNGE is located at 7638 NE BOTHELL WAY in KENMORE.\n&gt;  9 125TH ST GRILL is located at 12255 AURORA AVE N in Seattle.                 \n&gt; 10 12S TACOS MEXICAN FOOD KC1012 is located at 625 S 4TH ST in RENTON.         \n&gt; # ℹ 10,959 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#example-2-with-restaurant-data",
    "href": "Lectures/CSSS508_Lecture7.html#example-2-with-restaurant-data",
    "title": "CSSS 508",
    "section": "Example #2 with Restaurant Data",
    "text": "Example #2 with Restaurant Data\nAs we saw in the previous example, when you’re mixing many fixed and variable strings with str_c() things can get overwhelmed by quotation marks pretty easily. An alternative with simpler syntax is str_glue() in which anything inside {} will be evaluated like it’s outside the quotes.\n\n\nrestaurants |&gt; \n  select(Name, Address, City) |&gt; \n  distinct() |&gt; \n  mutate(Sentence = str_glue(\"{Name} is located at {Address} in {City}.\"), \n         .keep = \"none\")\n\n\n\n&gt; # A tibble: 10,969 × 1\n&gt;    Sentence                                                                    \n&gt;    &lt;glue&gt;                                                                      \n&gt;  1 #807 TUTTA BELLA is located at 2746 NE 45TH ST in SEATTLE.                  \n&gt;  2 +MAS CAFE  is located at 1906 N 34TH ST in SEATTLE.                         \n&gt;  3 ?al?al Cafe is located at 122 2ND AVE S in SEATTLE.                         \n&gt;  4 100 LB CLAM is located at 1001 FAIRVIEW AVE N Unit 1700A in SEATTLE.        \n&gt;  5 1000 SPIRITS is located at 1225 1ST AVE in SEATTLE.                         \n&gt;  6 100TH AVE CAKES is located at 15364 NE 96TH PL in REDMOND.                  \n&gt;  7 108 VIETNAMESE AUTHENTIC  CUISINE is located at 18114 E VALLEY HWY in KENT. \n&gt;  8 11TH FRAME RESTAURANT & LOUNGE is located at 7638 NE BOTHELL WAY in KENMORE.\n&gt;  9 125TH ST GRILL is located at 12255 AURORA AVE N in Seattle.                 \n&gt; 10 12S TACOS MEXICAN FOOD KC1012 is located at 625 S 4TH ST in RENTON.         \n&gt; # ℹ 10,959 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#example-3-with-restaurant-data",
    "href": "Lectures/CSSS508_Lecture7.html#example-3-with-restaurant-data",
    "title": "CSSS 508",
    "section": "Example #3 with Restaurant Data",
    "text": "Example #3 with Restaurant Data\nIf you want to create a summary of certain character strings you can use str_flatten() which takes a character vector and combines each element of the vector into a single string.\n\n\nrestaurants |&gt; \n11  select(Name, `Inspection Score`) |&gt;\n  summarize(inspection_scores = str_flatten(`Inspection Score`, collapse = \", \"), \n            .by = Name)\n\n\n11\n\nNotice that when a variable has spaces in its name (rather than being separated with an underscore in snake_case, for instance) you need to put backticks around it so R knows it is a singular object name.\n\n\n\n\n\n\n&gt; # A tibble: 9,878 × 2\n&gt;    Name                                inspection_scores                        \n&gt;    &lt;chr&gt;                               &lt;chr&gt;                                    \n&gt;  1 \"#807 TUTTA BELLA\"                  20, 20, 10, 10, 0, 0                     \n&gt;  2 \"+MAS CAFE \"                        0, 30, 30, 0, 47, 47, 47, 47, 47, 0, 0   \n&gt;  3 \"?al?al Cafe\"                       0, 0                                     \n&gt;  4 \"100 LB CLAM\"                       0, 0, 0, 25, 25, 25, 25, 0, 0            \n&gt;  5 \"1000 SPIRITS\"                      0, 5, 0, 5, 0, 5, 0, 5, 0, 32, 32, 32, 2…\n&gt;  6 \"100TH AVE CAKES\"                   0, 0, 0, 0                               \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" 35, 35, 35, 30, 30, 15, 15               \n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    20, 20, 0, 10, 10, 5, 0, 30, 30, 18, 18,…\n&gt;  9 \"125TH ST GRILL\"                    0, 20, 20, 20, 0, 20, 20, 20, 18, 18, 18…\n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     &lt;NA&gt;                                     \n&gt; # ℹ 9,868 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#example-4-with-restaurant-data",
    "href": "Lectures/CSSS508_Lecture7.html#example-4-with-restaurant-data",
    "title": "CSSS 508",
    "section": "Example #4 with Restaurant Data",
    "text": "Example #4 with Restaurant Data\nWhat if we want to plot one of the variables in our dataset but many of its values are too long and it’d be too arduous to manually add \\n to every long value? There’s str_wrap()!\n\n\nrestaurants |&gt; \n  mutate(Name = str_wrap(Name, width = 20)) |&gt; \n  distinct(Name)\n\n\n\n\n\n&gt; # A tibble: 9,873 × 1\n&gt;    Name                               \n&gt;    &lt;chr&gt;                              \n&gt;  1 \"#807 TUTTA BELLA\"                 \n&gt;  2 \"+MAS CAFE\"                        \n&gt;  3 \"?al?al Cafe\"                      \n&gt;  4 \"100 LB CLAM\"                      \n&gt;  5 \"1000 SPIRITS\"                     \n&gt;  6 \"100TH AVE CAKES\"                  \n&gt;  7 \"108 VIETNAMESE\\nAUTHENTIC CUISINE\"\n&gt;  8 \"11TH FRAME\\nRESTAURANT & LOUNGE\"  \n&gt;  9 \"125TH ST GRILL\"                   \n&gt; 10 \"12S TACOS MEXICAN\\nFOOD KC1012\"   \n&gt; # ℹ 9,863 more rows\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\n\n\n#807 TUTTA BELLA\n\n\n+MAS CAFE\n\n\n?al?al Cafe\n\n\n100 LB CLAM\n\n\n1000 SPIRITS\n\n\n100TH AVE CAKES\n\n\n108 VIETNAMESEAUTHENTIC CUISINE\n\n\n11TH FRAMERESTAURANT & LOUNGE\n\n\n125TH ST GRILL\n\n\n12S TACOS MEXICANFOOD KC1012",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separating-character-strings-into-multiple-variables",
    "href": "Lectures/CSSS508_Lecture7.html#separating-character-strings-into-multiple-variables",
    "title": "CSSS 508",
    "section": "Separating Character Strings into Multiple Variables",
    "text": "Separating Character Strings into Multiple Variables\nOftentimes you’ll have multiple pieces of information in one single string. That’s where the family of separate_* functions1 come in handy.\n\n\n12separate_longer_delim(col, delim)\n13separate_longer_position(col, width)\n14separate_wider_delim(col, delim, names)\n15separate_wider_position(col, widths)\n\n\n12\n\nTakes a string and splits it into many rows based on a specified delimiter. Tends to be most useful when the number of components varies from row to row.\n\n13\n\nRarer use case but also splits into many rows, now based on the width of the output desired.\n\n14\n\nTakes a string and splits it into many columns based on a specified delimiter. Need to provide names for the new columns created by the split.\n\n15\n\nRather than a delimiter you provide a named integer vector where the name gives the name of the new column, and the value is the number of characters it occupies.\n\n\n\n\n\nThese functions actually come from the tidyr package because they operate on (columns of) data frames, rather than individual vectors. You’ll notice that all of the str_* functions go inside a dplyr function, such as mutate, filter, etc. That’s because they operate on the level of a vector, not a dataframe. These separate_* functions, however, work like dplyr functions in that they operate directly on a column of data so you can pipe a data frame directly to them.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#example-with-restaurant-data",
    "href": "Lectures/CSSS508_Lecture7.html#example-with-restaurant-data",
    "title": "CSSS 508",
    "section": "Example with Restaurant Data",
    "text": "Example with Restaurant Data\nThe most common use case will be the need to split a character string into multiple columns, which will require the separate_wider_* functions1.\n\n\nrestaurants |&gt; \n16  select(`Inspection Date`) |&gt;\n  separate_wider_delim(`Inspection Date`, \n                       delim = \"/\", \n                       names = c(\"month\", \"day\", \"year\"))\n\n\n16\n\nThis variable was read in as a character string rather than a date object.\n\n\n\n\n\n\n&gt; # A tibble: 256,681 × 3\n&gt;    month day   year \n&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n&gt;  1 03    02    2023 \n&gt;  2 03    02    2023 \n&gt;  3 08    31    2022 \n&gt;  4 08    31    2022 \n&gt;  5 01    13    2022 \n&gt;  6 01    06    2021 \n&gt;  7 06    22    2023 \n&gt;  8 03    01    2023 \n&gt;  9 03    01    2023 \n&gt; 10 07    13    2022 \n&gt; # ℹ 256,671 more rows\n\n\n\nIf you need to use the separate_longer_* functions, you can read more about them here.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions",
    "href": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions",
    "title": "CSSS 508",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don’t have the expected number of pieces.\n\nrestaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\")) \n\n\n\n&gt; Error in `separate_wider_delim()`:\n&gt; ! Expected 3 pieces in each element of `Address`.\n&gt; ! 792 values were too short.\n&gt; ℹ Use `too_few = \"debug\"` to diagnose the problem.\n&gt; ℹ Use `too_few = \"align_start\"/\"align_end\"` to silence this message.\n&gt; ! 223848 values were too long.\n&gt; ℹ Use `too_many = \"debug\"` to diagnose the problem.\n&gt; ℹ Use `too_many = \"drop\"/\"merge\"` to silence this message.\n\n\n\nThese debugging options will add 3 new variables to the data frame that begin with the name of the splitting variable with a suffix to designate the information they provide.\n\n\n\n_ok is a binary TRUE/FALSE telling you if that observation split in the expected way.\n\n_pieces returns the number of pieces that observation actually contains.\n_remainder returns the additional pieces left over (if any) for that observation.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions-1",
    "href": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions-1",
    "title": "CSSS 508",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don’t have the expected number of pieces.\n\ndebug &lt;- restaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\"), \n17                       too_many = \"debug\",\n                       too_few = \"debug\") \n18debug[debug$Address_pieces == 4, ]\n\n\n17\n\ntoo_many = \"drop\" will drop any additional pieces and too_many = \"merge\" will merge them all into the final column.\n\n18\n\nExample of the too_many error (Address_pieces ranged from 4 to 9 in this dataset).\n\n\n\n\n\n\n&gt; # A tibble: 172,718 × 7\n&gt;    num   name  type  Address         Address_ok Address_pieces Address_remainder\n&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;           &lt;lgl&gt;               &lt;int&gt; &lt;chr&gt;            \n&gt;  1 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  2 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  3 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  4 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  5 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  6 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  7 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt;  8 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt;  9 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt; 10 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt; # ℹ 172,708 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions-2",
    "href": "Lectures/CSSS508_Lecture7.html#separate_wider_-functions-2",
    "title": "CSSS 508",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don’t have the expected number of pieces.\n\ndebug &lt;- restaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\"),\n                       too_many = \"debug\",\n19                       too_few = \"debug\")\n20debug[debug$Address_pieces == 2, ]\n\n\n19\n\ntoo_few = \"align_start\" and too_few = \"align_end\" will add NAs to the missing pieces depending on where they should go.\n\n20\n\nExample of the too_few error.\n\n\n\n\n\n\n&gt; # A tibble: 792 × 7\n&gt;    num   name     type  Address      Address_ok Address_pieces Address_remainder\n&gt;    &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;        &lt;lgl&gt;               &lt;int&gt; &lt;chr&gt;            \n&gt;  1 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  2 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  3 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  4 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  5 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  6 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  7 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  8 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt;  9 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt; 10 1401  BROADWAY &lt;NA&gt;  1401 BROADW… FALSE                   2 \"\"               \n&gt; # ℹ 782 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#modifying-strings-converting-cases",
    "href": "Lectures/CSSS508_Lecture7.html#modifying-strings-converting-cases",
    "title": "CSSS 508",
    "section": "Modifying Strings: Converting Cases",
    "text": "Modifying Strings: Converting Cases\nstr_to_upper(), str_to_lower(), str_to_title() convert cases, which is often a good idea to do before searching for values:\n\n\nunique_cities &lt;- unique(restaurants$City)\nunique_cities  |&gt; \n  head()\n\n\n\n&gt; [1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"Seattle\" \"RENTON\"\n\n\n\n\n\nstr_to_upper(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"SEATTLE\" \"RENTON\"\n\n\n\nstr_to_lower(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"seattle\" \"redmond\" \"kent\"    \"kenmore\" \"seattle\" \"renton\"\n\n\n\nstr_to_title(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"Seattle\" \"Redmond\" \"Kent\"    \"Kenmore\" \"Seattle\" \"Renton\"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#modifying-strings-removing-whitespace",
    "href": "Lectures/CSSS508_Lecture7.html#modifying-strings-removing-whitespace",
    "title": "CSSS 508",
    "section": "Modifying Strings: Removing Whitespace",
    "text": "Modifying Strings: Removing Whitespace\nExtra leading or trailing whitespace is common in text data:\n\nunique_names &lt;- unique(restaurants$Name)\nunique_names |&gt; head(3)\n\n\n\n&gt; [1] \"#807 TUTTA BELLA\" \"+MAS CAFE \"       \"?al?al Cafe\"\n\n\n\nWe can remove the white space using str_trim():\n\nstr_trim(unique_names) |&gt; head(3)\n\n\n\n&gt; [1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\"\n\n\n\n\n\nTwo related functions are str_squish() which trims spaces around a string but also removes duplicate spaces inside it and str_pad() which adds “padding” to any string to make it a given minimum width.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#counting-characters",
    "href": "Lectures/CSSS508_Lecture7.html#counting-characters",
    "title": "CSSS 508",
    "section": "Counting Characters",
    "text": "Counting Characters\nAt the most basic level you can use str_length() to count the characters in a string.\n\n\nphone_numbers &lt;- restaurants |&gt;\n  select(`Phone`) |&gt; \n21  mutate(phone_length = str_length(`Phone`))\n\n22phone_numbers |&gt; count(phone_length)\n\n\n21\n\nGetting the length of Phone\n\n22\n\nGetting the count of different lengths for Phone found in the data\n\n\n\n\n\n\n&gt; # A tibble: 4 × 2\n&gt;   phone_length      n\n&gt;          &lt;int&gt;  &lt;int&gt;\n&gt; 1           14 185717\n&gt; 2           15    155\n&gt; 3           18     49\n&gt; 4           NA  70760\n\n\n\n\n\nphone_numbers |&gt; \n  filter(phone_length %in% c(15, 18)) |&gt; \n23  slice_head(n = 1, by = phone_length)\n\n\n23\n\nFiltering for the two abnormal phone number lengths, and getting the first observation (row) by the two different numbers (15, 18).\n\n\n\n\n\n\n&gt; # A tibble: 2 × 2\n&gt;   Phone              phone_length\n&gt;   &lt;chr&gt;                     &lt;int&gt;\n&gt; 1 (714) 670-=5051              15\n&gt; 2 (822) 370-0EXT3700           18",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#subsetting-strings",
    "href": "Lectures/CSSS508_Lecture7.html#subsetting-strings",
    "title": "CSSS 508",
    "section": "Subsetting Strings",
    "text": "Subsetting Strings\nIf we want to subset a string we can use str_sub(). Let’s pull out just the area codes from the Phone variable.\n\n\nrestaurants |&gt; \n  select(`Phone`) |&gt; \n24  mutate(area_code = str_sub(`Phone`, start = 2, end = 4)) |&gt;\n  distinct(area_code)\n\n\n24\n\nstart and end are the positions where the “substring” should start and end (inclusive). You can also use negative values to count backwards from the end of a string. Note that str_sub() won’t fail if the string is too short: it will just return as much as possible.\n\n\n\n\n\n\n&gt; # A tibble: 209 × 1\n&gt;    area_code\n&gt;    &lt;chr&gt;    \n&gt;  1 206      \n&gt;  2 952      \n&gt;  3 758      \n&gt;  4 425      \n&gt;  5 702      \n&gt;  6 509      \n&gt;  7 512      \n&gt;  8 &lt;NA&gt;     \n&gt;  9 760      \n&gt; 10 801      \n&gt; # ℹ 199 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings",
    "href": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings",
    "title": "CSSS 508",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you’re interested in working with character data in a different language.\n\n\nEncoding\n\nUTF-8 can encode just about every character used by humans today and many extra symbols like emojis.\n\nreadr uses UTF-8 everywhere. This is a good default but will fail for data produced by older systems that don’t use UTF-8.\n\nTo read these correctly, you specify the encoding via the locale argument (hopefully that information is provided in the data documentation).\n\nUnfortunately, that’s rarely the case, so readr provides guess_encoding() to help you figure it out. It’s not foolproof and works better when you have lots of text.\n\nLearn more about the intricacies of encoding here.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings-1",
    "href": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings-1",
    "title": "CSSS 508",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you’re interested in working with character data in a different language.\n\nLetter Variations\n\nAccented letters may be either 1 character or 2 depending upon how they’re encoded, which affects position for str_length() and str_sub().\nstr_equal() will recognize that the different variations have the same appearance while == will evaluate them as different.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings-2",
    "href": "Lectures/CSSS508_Lecture7.html#working-with-non-english-strings-2",
    "title": "CSSS 508",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you’re interested in working with character data in a different language.\n\nLocale-Dependent Functions\n\nA locale is similar to a language but includes an optional region specifier to handle regional variations within a language1.\nBase R string functions will automatically use the locale set by your operating system which means that base R string functions do what you expect for your language.\n\nHowever, your code might work differently if you share it with someone who lives in a different country.\nTo avoid this problem, stringr defaults to English rules by using the “en” locale and requires you to specify the locale argument to override it.\n\n\nYou can see which are supported in stringr by looking at stringi::stri_locale_list()",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#pattern-matching",
    "href": "Lectures/CSSS508_Lecture7.html#pattern-matching",
    "title": "CSSS 508",
    "section": "Pattern-Matching!",
    "text": "Pattern-Matching!\nIt’s common to want to see if a string satisfies a certain pattern.\n\nWe did this with numeric values earlier in this course!\n\nrestaurants |&gt;  \n  filter(`Inspection Score` &lt; 10 | `Inspection Score` &gt; 150)\n\n&gt; # A tibble: 139,744 × 22\n&gt;    Name         `Program Identifier` `Inspection Date` Description Address City \n&gt;    &lt;chr&gt;        &lt;chr&gt;                &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;\n&gt;  1 \"#807 TUTTA… #807 TUTTA BELLA     01/13/2022        Seating 0-… 2746 N… SEAT…\n&gt;  2 \"#807 TUTTA… #807 TUTTA BELLA     01/06/2021        Seating 0-… 2746 N… SEAT…\n&gt;  3 \"+MAS CAFE \" +MAS CAFE            06/22/2023        Seating 0-… 1906 N… SEAT…\n&gt;  4 \"+MAS CAFE \" +MAS CAFE            07/13/2022        Seating 0-… 1906 N… SEAT…\n&gt;  5 \"+MAS CAFE \" +MAS CAFE            12/29/2021        Seating 0-… 1906 N… SEAT…\n&gt;  6 \"+MAS CAFE \" +MAS CAFE            07/29/2020        Seating 0-… 1906 N… SEAT…\n&gt;  7 \"?al?al Caf… ?al?al Cafe          03/16/2023        Seating 13… 122 2N… SEAT…\n&gt;  8 \"?al?al Caf… ?al?al Cafe          01/11/2023        Seating 13… 122 2N… SEAT…\n&gt;  9 \"100 LB CLA… 100 LB CLAM          09/13/2023        Seating 0-… 1001 F… SEAT…\n&gt; 10 \"100 LB CLA… 100 LB CLAM          07/13/2022        Seating 0-… 1001 F… SEAT…\n&gt; # ℹ 139,734 more rows\n&gt; # ℹ 16 more variables: `Zip Code` &lt;dbl&gt;, Phone &lt;chr&gt;, Longitude &lt;dbl&gt;,\n&gt; #   Latitude &lt;dbl&gt;, `Inspection Business Name` &lt;chr&gt;, `Inspection Type` &lt;chr&gt;,\n&gt; #   `Inspection Score` &lt;dbl&gt;, `Inspection Result` &lt;chr&gt;,\n&gt; #   `Inspection Closed Business` &lt;lgl&gt;, `Violation Type` &lt;chr&gt;,\n&gt; #   `Violation Description` &lt;chr&gt;, `Violation Points` &lt;dbl&gt;, Business_ID &lt;chr&gt;,\n&gt; #   Inspection_Serial_Num &lt;chr&gt;, Violation_Record_ID &lt;chr&gt;, Grade &lt;dbl&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#patterns-str_detect",
    "href": "Lectures/CSSS508_Lecture7.html#patterns-str_detect",
    "title": "CSSS 508",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nWe can do similar pattern-checking using str_detect():\n\n1str_detect(string, pattern)\n\n\n1\n\nstring is the character string (or vector of strings) we want to examine and pattern is the pattern that we’re checking for, inside string. The output will be a TRUE/FALSE vector indicating if pattern was found.\n\n\n\n\n\n\n\nrestaurants |&gt; \n  select(Name, Address) |&gt; \n  filter(str_detect(Address, \"Pike\")) |&gt; \n  distinct()\n\n\n\n&gt; # A tibble: 5 × 2\n&gt;   Name                           Address       \n&gt;   &lt;chr&gt;                          &lt;chr&gt;         \n&gt; 1 Axum Foods DBA Lands Of Origin 1532 Pike PL  \n&gt; 2 CHA CHA LOUNGE                 1013 E Pike ST\n&gt; 3 Kitchen and Market             1926 Pike PL  \n&gt; 4 Luke's Lobster                 104 Pike ST   \n&gt; 5 SAM'S TAVERN                   1024 E Pike ST\n\n\n\n\n\nHmmm…there are only 5 restaurants on a street with Pike in the name?!",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#patterns-str_detect-1",
    "href": "Lectures/CSSS508_Lecture7.html#patterns-str_detect-1",
    "title": "CSSS 508",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nWe can do similar pattern-checking using str_detect():\n\n1str_detect(string, pattern)\n\n\n1\n\nstring is the character string (or vector of strings) we want to examine and pattern is the pattern that we’re checking for, inside string. The output will be a TRUE/FALSE vector indicating if pattern was found.\n\n\n\n\n\n\nrestaurants |&gt; \n  select(Name, Address) |&gt; \n2  mutate(Address = str_to_title(Address)) |&gt;\n  filter(str_detect(Address, \"Pike\")) |&gt; \n  distinct()\n\n\n2\n\nNote: Results are case-sensitive!! Therefore we need to transform all the addresses to the same case.\n\n\n\n\n\n\n&gt; # A tibble: 139 × 2\n&gt;    Name                                       Address           \n&gt;    &lt;chr&gt;                                      &lt;chr&gt;             \n&gt;  1 ALDER & ASH                                629 Pike St       \n&gt;  2 ALIBI ROOM, THE                            85 Pike St        \n&gt;  3 AMAZON RETAIL LLC                          610 E Pike St     \n&gt;  4 ATHENIAN INN                               1517 Pike Pl      \n&gt;  5 ATRIUM KITCHEN AT PIKE PLACE MARKET        93 Pike St Ste 101\n&gt;  6 AUDACITY WINEBAR ALEXANDRIA NICOLE CELLARS 800 Pike St       \n&gt;  7 Axum Foods DBA Lands Of Origin             1532 Pike Pl      \n&gt;  8 AYUTTHAYA THAI RESTAURANT                  727 E Pike St     \n&gt;  9 BAGELBOP                                   93 Pike St        \n&gt; 10 BAI TONG THAI STREET CAFE                  1121 E Pike St    \n&gt; # ℹ 129 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#replacement-str_replace",
    "href": "Lectures/CSSS508_Lecture7.html#replacement-str_replace",
    "title": "CSSS 508",
    "section": "Replacement: str_replace()",
    "text": "Replacement: str_replace()\nWhat about if you want to replace a string with something else? Use str_replace()!\n\nThis function works very similarly to str_detect(), but with one extra argument:\n\n3str_replace(string, pattern, replacement)\n\n\n3\n\nreplacement is what pattern is substituted for.\n\n\n\n\n\n\n\nrestaurants |&gt; \n  select(`Inspection Date`) |&gt; \n  mutate(full_date = str_replace(string = `Inspection Date`, \n4                                 pattern = \"01/\",\n                                 replacement = \"January \"))\n\n\n4\n\nIn this case, our pattern is limited since \"01/\" occurs both for the month and the day. This would be a good place for a regular expression.\n\n\n\n\n&gt; # A tibble: 256,681 × 2\n&gt;    `Inspection Date` full_date      \n&gt;    &lt;chr&gt;             &lt;chr&gt;          \n&gt;  1 03/02/2023        03/02/2023     \n&gt;  2 03/02/2023        03/02/2023     \n&gt;  3 08/31/2022        08/31/2022     \n&gt;  4 08/31/2022        08/31/2022     \n&gt;  5 01/13/2022        January 13/2022\n&gt;  6 01/06/2021        January 06/2021\n&gt;  7 06/22/2023        06/22/2023     \n&gt;  8 03/01/2023        03/January 2023\n&gt;  9 03/01/2023        03/January 2023\n&gt; 10 07/13/2022        07/13/2022     \n&gt; # ℹ 256,671 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#what-are-regular-expressions",
    "href": "Lectures/CSSS508_Lecture7.html#what-are-regular-expressions",
    "title": "CSSS 508",
    "section": "What are Regular Expressions?",
    "text": "What are Regular Expressions?\nRegular expressions1 or regexes are how we describe patterns we are looking for in text in a way that a computer can understand. We write an expression, apply it to a string input, and then can do things with matches we find.\n\n\nLiteral characters are defined snippets to search for like Pike or 01/.\n\n\n\n\nMetacharacters2 let us be flexible in describing patterns. Some basic types of metacharacters are listed below.\n\nQuantifiers control how many times a pattern can match\n\n? makes a pattern optional (i.e. it matches 0 or 1 times)\n+ lets a pattern repeat (i.e. it matches at least once)\n* lets a pattern be optional or repeat (i.e. it matches any number of times, including 0)\n{n} matches exactly n times, {n,} matches at least n times, {n, m} matches between n and m times\n\nCharacter classes are defined by [] and let you match a set of characters\n\n. matches any character except a new line (\\n)\n- allows you to specify a range\nYou can invert a match by starting it with ^\n\nGrouping allows you to override the default precedence rules for regular expressions\n\n() also allows you to create groups which can be referenced later in the regular expression with backreferences, like \\1, \\2\nUse (?:), the non-grouping parentheses, to control precedence but not capture the match in a group. This is slightly more efficient than capturing parentheses and most useful for complex cases where you need to capture matches and control precedence independently.\n\nAlternation, |, allows us to pick between one or more alternative patterns\nAnchors allow you to add specificity as to where the match occurs\n\nUse ^ to anchor the start\nUse $ to anchor the end\nMatch the boundary between words (start or end) with \\b\n\nLookarounds look ahead or behind the current match without “consuming” any characters. These are useful when you want to check that a pattern exists, but you don’t want to include it in the result.\n\n(?=...) is a positive look-ahead assertion. Matches if ... matches at the current input\n(?!...) is a negative look-ahead assertion. Matches if ... does not match at the current input\n(?&lt;=...) is a positive look-behind assertion. Matches if ... matches text preceding the current position. Length must be bounded (i.e. no * or +)\n(?&lt;!...) is a negative look-behind assertion. Matches if ... does not match text preceding the current position. Length must be bounded (i.e. no * or +)\n\n\n\n\n\nYou can read more about regular expressions in stringr here and this is a useful tutorial to learn regex if you need to/when you’re ready!\n\n\nRegular expressions are very compact and use a lot of punctuation characters, so they can seem overwhelming and hard to read at first. DO NOT prioritize learning this right now, especially if you are still a beginner! This information is for future reference and to give you a sense of what you can do if you need/want to work with text data in the future.To treat a metacharacter as a literal character, you must escape it with two preceding backslashes \\\\, e.g. to match (206) including the parentheses, you’d use \\\\(206\\\\) in your regex.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue",
    "title": "CSSS 508",
    "section": "Separation with regex {auto-animate=“true”}",
    "text": "Separation with regex {auto-animate=“true”}\nLet’s go back to our example and see if we can use a regular expression to replace 01/ just for the month position of our date variable.\n\n\nrestaurants |&gt; \n  select(`Inspection Date`) |&gt; \n  mutate(full_date = str_replace(string = `Inspection Date`, \n5                                 pattern = \"^01/\",\n                                 replacement = \"January \"))\n\n\n5\n\nWe can pretty simply use a regex signifier (the starting anchor ^) to make sure our replacement only happens to the 01/s in the month position.\n\n\n\n\n\n\n&gt; # A tibble: 256,681 × 2\n&gt;    `Inspection Date` full_date      \n&gt;    &lt;chr&gt;             &lt;chr&gt;          \n&gt;  1 03/02/2023        03/02/2023     \n&gt;  2 03/02/2023        03/02/2023     \n&gt;  3 08/31/2022        08/31/2022     \n&gt;  4 08/31/2022        08/31/2022     \n&gt;  5 01/13/2022        January 13/2022\n&gt;  6 01/06/2021        January 06/2021\n&gt;  7 06/22/2023        06/22/2023     \n&gt;  8 03/01/2023        03/01/2023     \n&gt;  9 03/01/2023        03/01/2023     \n&gt; 10 07/13/2022        07/13/2022     \n&gt; # ℹ 256,671 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex",
    "title": "CSSS 508",
    "section": "Separation with regex",
    "text": "Separation with regex\nLet’s look at a more realistic example and introduce the regex version of our separate_wider_* functions. What if we wanted to separate the Description variable into two separate variables: capacity_description and risk_category?\n\nrestaurants |&gt; \n6  count(Description) |&gt;\n7  print(n = 33)\n\n\n6\n\nSee all distinct values that Description takes to figure out how we need to separate this character vector.\n\n7\n\nYou can force a tibble to print more than the default 10 rows by specifying the number with print(n).\n\n\n\n\n\n\n&gt; # A tibble: 33 × 2\n&gt;    Description                                       n\n&gt;    &lt;chr&gt;                                         &lt;int&gt;\n&gt;  1 Bakery-no seating - Risk Category I              15\n&gt;  2 Bakery-no seating - Risk Category II           4396\n&gt;  3 Bakery-no seating - Risk Category III           325\n&gt;  4 Bed and Breakfast - Risk Category I              72\n&gt;  5 Caterer - Risk Category I                        53\n&gt;  6 Caterer - Risk Category II                       85\n&gt;  7 Caterer - Risk Category III                    2006\n&gt;  8 Grocery Store-no seating - Risk Category I     9752\n&gt;  9 Grocery Store-no seating - Risk Category II    2487\n&gt; 10 Limited Food Services - no permanent plumbing  1152\n&gt; 11 Meat/Sea Food - Risk Category III             14258\n&gt; 12 Mobile Food Unit - Risk Category I              735\n&gt; 13 Mobile Food Unit - Risk Category II             494\n&gt; 14 Mobile Food Unit - Risk Category III           4500\n&gt; 15 Non-Profit Institution - Risk Category I        840\n&gt; 16 Non-Profit Institution - Risk Category II       613\n&gt; 17 Non-Profit Institution - Risk Category III     6342\n&gt; 18 School Lunch Program - Risk II                13767\n&gt; 19 Seating 0-12 - Risk Category I                 4329\n&gt; 20 Seating 0-12 - Risk Category II                7102\n&gt; 21 Seating 0-12 - Risk Category III              40880\n&gt; 22 Seating 13-50 - Risk Category I                1511\n&gt; 23 Seating 13-50 - Risk Category II               7331\n&gt; 24 Seating 13-50 - Risk Category III             58592\n&gt; 25 Seating 151-250 - Risk Category I                73\n&gt; 26 Seating 151-250 - Risk Category II               26\n&gt; 27 Seating 151-250 - Risk Category III           10347\n&gt; 28 Seating 51-150 - Risk Category I                667\n&gt; 29 Seating 51-150 - Risk Category II               975\n&gt; 30 Seating 51-150 - Risk Category III            55706\n&gt; 31 Seating &gt; 250 - Risk Category I                  69\n&gt; 32 Seating &gt; 250 - Risk Category II                  4\n&gt; 33 Seating &gt; 250 - Risk Category III              7177",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-1",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-1",
    "title": "CSSS 508",
    "section": "Separation with regex {auto-animate=“true”}",
    "text": "Separation with regex {auto-animate=“true”}\n\nres_sep &lt;- restaurants |&gt; \n8  distinct(Name, Description) |&gt;\n9  separate_wider_regex(cols = Description,\n10                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\")) \n\n\n8\n\nFor this example I want to limit the dataset just to the pertinent variables for illustrative purposes so I am only keeping the distinct values of Name and Description.\n\n9\n\nThe cols argument of this function is the column you want to separate.\n\n10\n\nThe patterns argument takes a named character vector where the names become the column names and the character strings are regular expressions that match the desired contents of the vector.\n\n\n\n\n\n\n&gt; Error in `separate_wider_regex()`:\n&gt; ! Expected each value of `Description` to match the pattern, the whole\n&gt;   pattern, and nothing but the pattern.\n&gt; ! 104 values have problems.\n&gt; ℹ Use `too_few = \"debug\"` to diagnose the problem.\n&gt; ℹ Use `too_few = \"align_start\"` to silence this message.\n\n\n\n\nI’ve triggered the debugging error message which tells me how to diagnose/ignore the mismatch that’s occurring.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-2",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-2",
    "title": "CSSS 508",
    "section": "Separation with regex {auto-animate=“true”}",
    "text": "Separation with regex {auto-animate=“true”}\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n11                       patterns = c(capacity_description = \"^.+\",\n12                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"),\n                       too_few = \"debug\") |&gt; \n  distinct(capacity_description, risk_category, Description_ok, \n13           Description_matches, Description_remainder) |&gt;\n  print(n = 33)\n\n\n11\n\n\"^\" matches the beginning of a string,  \".\" matches any character except a new line, and \"+\" quantifies that \".\", asking it to return 1 or more characters.\n\n12\n\n\"Risk\" matches exactly, \" ?\" matches a singular white space 0 or 1 time,  \"(?:Category)?\" optionally matches the exact word “Category”, again \" ?\" matches a singular white space 0 or 1 time, \"I{1,3}\" matches “I” 1-3 times, and \"$\" signifies the end of the string.\n\n13\n\nUsing distinct() on the created and debugging variables allows us to see what didn’t match.\n\n\n\n\n\n\n&gt; # A tibble: 33 × 5\n&gt;    capacity_description         risk_category Description_ok Description_matches\n&gt;    &lt;chr&gt;                        &lt;chr&gt;         &lt;lgl&gt;                        &lt;int&gt;\n&gt;  1 \"Seating 0-12 - \"            Risk Categor… TRUE                             2\n&gt;  2 \"Seating 13-50 - \"           Risk Categor… TRUE                             2\n&gt;  3 \"Seating 51-150 - \"          Risk Categor… TRUE                             2\n&gt;  4 \"Bakery-no seating - \"       Risk Categor… TRUE                             2\n&gt;  5 \"Mobile Food Unit - \"        Risk Categor… TRUE                             2\n&gt;  6 \"Seating &gt; 250 - \"           Risk Categor… TRUE                             2\n&gt;  7 \"Seating 151-250 - \"         Risk Categor… TRUE                             2\n&gt;  8 \"Grocery Store-no seating -… Risk Categor… TRUE                             2\n&gt;  9 \"Seating 13-50 - \"           Risk Categor… TRUE                             2\n&gt; 10 \"Caterer - \"                 Risk Categor… TRUE                             2\n&gt; 11 \"Caterer - \"                 Risk Categor… TRUE                             2\n&gt; 12 \"Seating 13-50 - \"           Risk Categor… TRUE                             2\n&gt; 13 \"Seating 0-12 - \"            Risk Categor… TRUE                             2\n&gt; 14 \"Meat/Sea Food - \"           Risk Categor… TRUE                             2\n&gt; 15 \"Bakery-no seating - \"       Risk Categor… TRUE                             2\n&gt; 16 \"Seating 0-12 - \"            Risk Categor… TRUE                             2\n&gt; 17 \"Caterer - \"                 Risk Categor… TRUE                             2\n&gt; 18 \"Limited Food Services - no… &lt;NA&gt;          FALSE                            1\n&gt; 19 \"Seating 51-150 - \"          Risk Categor… TRUE                             2\n&gt; 20 \"Seating 51-150 - \"          Risk Categor… TRUE                             2\n&gt; 21 \"School Lunch Program - \"    Risk II       TRUE                             2\n&gt; 22 \"Mobile Food Unit - \"        Risk Categor… TRUE                             2\n&gt; 23 \"Mobile Food Unit - \"        Risk Categor… TRUE                             2\n&gt; 24 \"Non-Profit Institution - \"  Risk Categor… TRUE                             2\n&gt; 25 \"Grocery Store-no seating -… Risk Categor… TRUE                             2\n&gt; 26 \"Bakery-no seating - \"       Risk Categor… TRUE                             2\n&gt; 27 \"Seating &gt; 250 - \"           Risk Categor… TRUE                             2\n&gt; 28 \"Non-Profit Institution - \"  Risk Categor… TRUE                             2\n&gt; 29 \"Non-Profit Institution - \"  Risk Categor… TRUE                             2\n&gt; 30 \"Seating 151-250 - \"         Risk Categor… TRUE                             2\n&gt; 31 \"Seating &gt; 250 - \"           Risk Categor… TRUE                             2\n&gt; 32 \"Seating 151-250 - \"         Risk Categor… TRUE                             2\n&gt; 33 \"Bed and Breakfast - \"       Risk Categor… TRUE                             2\n&gt; # ℹ 1 more variable: Description_remainder &lt;chr&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-3",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-3",
    "title": "CSSS 508",
    "section": "Separation with regex {auto-animate=“true”}",
    "text": "Separation with regex {auto-animate=“true”}\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"), \n14                       too_few = \"align_start\")\nres_sep\n\n\n14\n\nSince the only non-match was the one without a valid value for risk_category, we can give too_few the value align_start which tells the function to fill in anything without a value for the second variable with an NA.\n\n\n\n\n\n\n&gt; # A tibble: 11,209 × 3\n&gt;    Name                                capacity_description   risk_category    \n&gt;    &lt;chr&gt;                               &lt;chr&gt;                  &lt;chr&gt;            \n&gt;  1 \"#807 TUTTA BELLA\"                  \"Seating 0-12 - \"      Risk Category III\n&gt;  2 \"+MAS CAFE \"                        \"Seating 0-12 - \"      Risk Category III\n&gt;  3 \"?al?al Cafe\"                       \"Seating 13-50 - \"     Risk Category III\n&gt;  4 \"100 LB CLAM\"                       \"Seating 0-12 - \"      Risk Category III\n&gt;  5 \"1000 SPIRITS\"                      \"Seating 51-150 - \"    Risk Category III\n&gt;  6 \"100TH AVE CAKES\"                   \"Bakery-no seating - \" Risk Category II \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" \"Seating 51-150 - \"    Risk Category III\n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    \"Seating 51-150 - \"    Risk Category III\n&gt;  9 \"125TH ST GRILL\"                    \"Seating 51-150 - \"    Risk Category III\n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     \"Mobile Food Unit - \"  Risk Category III\n&gt; # ℹ 11,199 more rows\n\n\n\nWe can clean up these variables a bit more with a version of str_replace(): str_remove(). This technically replaces the pattern match with \"\", or an empty string.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-4",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-auto-animatetrue-4",
    "title": "CSSS 508",
    "section": "Separation with regex {auto-animate=“true”}",
    "text": "Separation with regex {auto-animate=“true”}\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"), \n                       too_few = \"align_start\") |&gt;\n15  mutate(capacity_description = str_remove(capacity_description, pattern = \" - $\"),\n16         risk_category = str_remove(risk_category, pattern = \"Risk ?(?:Category)? \"))\nres_sep\n\n\n15\n\nWe can remove the trailing - by using str_remove and providing the regular expression for that piece of the capacity_description string.\n\n16\n\nSince this variable is already named risk_category, we can remove that language from the beginning of each string, by matching the first part of our original regular expression for this variable.\n\n\n\n\n\n\n&gt; # A tibble: 11,209 × 3\n&gt;    Name                                capacity_description risk_category\n&gt;    &lt;chr&gt;                               &lt;chr&gt;                &lt;chr&gt;        \n&gt;  1 \"#807 TUTTA BELLA\"                  Seating 0-12         III          \n&gt;  2 \"+MAS CAFE \"                        Seating 0-12         III          \n&gt;  3 \"?al?al Cafe\"                       Seating 13-50        III          \n&gt;  4 \"100 LB CLAM\"                       Seating 0-12         III          \n&gt;  5 \"1000 SPIRITS\"                      Seating 51-150       III          \n&gt;  6 \"100TH AVE CAKES\"                   Bakery-no seating    II           \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" Seating 51-150       III          \n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    Seating 51-150       III          \n&gt;  9 \"125TH ST GRILL\"                    Seating 51-150       III          \n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     Mobile Food Unit     III          \n&gt; # ℹ 11,199 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separation-with-regex-1",
    "href": "Lectures/CSSS508_Lecture7.html#separation-with-regex-1",
    "title": "CSSS 508",
    "section": "Separation with regex",
    "text": "Separation with regex\nWhat do the final 33 distinct values of these two new variables look like?\n\n\nres_sep |&gt; \n  distinct(capacity_description, risk_category) |&gt; \n  print(n = 33)\n\n\n\n&gt; # A tibble: 33 × 2\n&gt;    capacity_description                          risk_category\n&gt;    &lt;chr&gt;                                         &lt;chr&gt;        \n&gt;  1 Seating 0-12                                  III          \n&gt;  2 Seating 13-50                                 III          \n&gt;  3 Seating 51-150                                III          \n&gt;  4 Bakery-no seating                             II           \n&gt;  5 Mobile Food Unit                              III          \n&gt;  6 Seating &gt; 250                                 III          \n&gt;  7 Seating 151-250                               III          \n&gt;  8 Grocery Store-no seating                      I            \n&gt;  9 Seating 13-50                                 II           \n&gt; 10 Caterer                                       II           \n&gt; 11 Caterer                                       III          \n&gt; 12 Seating 13-50                                 I            \n&gt; 13 Seating 0-12                                  I            \n&gt; 14 Meat/Sea Food                                 III          \n&gt; 15 Bakery-no seating                             III          \n&gt; 16 Seating 0-12                                  II           \n&gt; 17 Caterer                                       I            \n&gt; 18 Limited Food Services - no permanent plumbing &lt;NA&gt;         \n&gt; 19 Seating 51-150                                I            \n&gt; 20 Seating 51-150                                II           \n&gt; 21 School Lunch Program                          II           \n&gt; 22 Mobile Food Unit                              I            \n&gt; 23 Mobile Food Unit                              II           \n&gt; 24 Non-Profit Institution                        III          \n&gt; 25 Grocery Store-no seating                      II           \n&gt; 26 Bakery-no seating                             I            \n&gt; 27 Seating &gt; 250                                 I            \n&gt; 28 Non-Profit Institution                        II           \n&gt; 29 Non-Profit Institution                        I            \n&gt; 30 Seating 151-250                               I            \n&gt; 31 Seating &gt; 250                                 II           \n&gt; 32 Seating 151-250                               II           \n&gt; 33 Bed and Breakfast                             I\n\n\n\n\n\nNice!",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#other-uses-for-regular-expressions",
    "href": "Lectures/CSSS508_Lecture7.html#other-uses-for-regular-expressions",
    "title": "CSSS 508",
    "section": "Other Uses for Regular Expressions",
    "text": "Other Uses for Regular Expressions\nEven if you aren’t explicitly manipulating/analyzing text data for your research, knowing some things about regular expressions will still come in handy because they’re used in other places, both in Base R and the tidyverse.\n\n\n\n\napropos(pattern)\nlist.files(path, pattern)\n\n\n\n\nmatches()\npivot_longer()\nseparate_*_delim()",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#apropos",
    "href": "Lectures/CSSS508_Lecture7.html#apropos",
    "title": "CSSS 508",
    "section": "apropos()",
    "text": "apropos()\napropos(pattern) searches all objects available from the global environment that match the given pattern. This is useful if you can’t quite remember the name of a function, for example:\n\n\napropos(\"separate\")\n\n\n\n&gt; [1] \"separate\"                 \"separate_\"               \n&gt; [3] \"separate_longer_delim\"    \"separate_longer_position\"\n&gt; [5] \"separate_rows\"            \"separate_rows_\"          \n&gt; [7] \"separate_wider_delim\"     \"separate_wider_position\" \n&gt; [9] \"separate_wider_regex\"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#list.files",
    "href": "Lectures/CSSS508_Lecture7.html#list.files",
    "title": "CSSS 508",
    "section": "list.files()",
    "text": "list.files()\nlist.files(path, pattern) lists all files in path that match a regular expression pattern. For example, you can find all the Quarto files in the current directory with:\n\n\nlist.files(pattern = \"\\\\.qmd$\")\n\n\n\n&gt; [1] \"CSSS508_Lecture1.qmd\" \"CSSS508_Lecture2.qmd\" \"CSSS508_Lecture3.qmd\"\n&gt; [4] \"CSSS508_Lecture4.qmd\" \"CSSS508_Lecture5.qmd\" \"CSSS508_Lecture6.qmd\"\n&gt; [7] \"CSSS508_Lecture7.qmd\" \"lectures.qmd\"         \"quarto_anatomy.qmd\"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#matches",
    "href": "Lectures/CSSS508_Lecture7.html#matches",
    "title": "CSSS 508",
    "section": "matches()",
    "text": "matches()\nmatches(pattern) will select all variables whose name matches the supplied pattern.. It’s a tidyselect function (like starts_with() and the like) that you can use in any tidyverse function that selects variables.\n\n\nnames(iris)\n17iris %&gt;% select(matches(\"[pt]al\")) |&gt;\n  names() \n\n\n17\n\n[pt] signifies match either p or t.\n\n\n\n\n\n\n&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#pivot_longer",
    "href": "Lectures/CSSS508_Lecture7.html#pivot_longer",
    "title": "CSSS 508",
    "section": "pivot_longer()",
    "text": "pivot_longer()\npivot_longer()’s argument names_pattern takes a vector of regular expressions, just like separate_wider_regex(). It’s useful when extracting data out of variable names with a complex structure.\n\n\nnames(who) |&gt; head(n = 10)\n\n\n\n&gt;  [1] \"country\"      \"iso2\"         \"iso3\"         \"year\"         \"new_sp_m014\" \n&gt;  [6] \"new_sp_m1524\" \"new_sp_m2534\" \"new_sp_m3544\" \"new_sp_m4554\" \"new_sp_m5564\"\n\n\n\n\n\nwho |&gt; pivot_longer(cols = new_sp_m014:newrel_f65,\n                    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n18                    names_pattern = \"new_?(.*)_(.)(.*)\",\n                    values_to = \"count\") |&gt; \n  slice_head(n = 10)\n\n\n18\n\n\"new_?(.*)_(.)(.*)\" explained: new matches exactly, then _? optionally matches an underscore, (.*) matches any number of characters and in this example it captures the new diagnosis variable, _ matches exactly, (.) matches one character which captures the gender variable m or f in this example, and lastly, (.*) again matches any number of characters, in this case it captures the varying digits of the age variable.\n\n\n\n\n\n\n&gt; # A tibble: 10 × 8\n&gt;    country     iso2  iso3   year diagnosis gender age   count\n&gt;    &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n&gt;  1 Afghanistan AF    AFG    1980 sp        m      014      NA\n&gt;  2 Afghanistan AF    AFG    1980 sp        m      1524     NA\n&gt;  3 Afghanistan AF    AFG    1980 sp        m      2534     NA\n&gt;  4 Afghanistan AF    AFG    1980 sp        m      3544     NA\n&gt;  5 Afghanistan AF    AFG    1980 sp        m      4554     NA\n&gt;  6 Afghanistan AF    AFG    1980 sp        m      5564     NA\n&gt;  7 Afghanistan AF    AFG    1980 sp        m      65       NA\n&gt;  8 Afghanistan AF    AFG    1980 sp        f      014      NA\n&gt;  9 Afghanistan AF    AFG    1980 sp        f      1524     NA\n&gt; 10 Afghanistan AF    AFG    1980 sp        f      2534     NA",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#separate__delim",
    "href": "Lectures/CSSS508_Lecture7.html#separate__delim",
    "title": "CSSS 508",
    "section": "separate_*_delim()",
    "text": "separate_*_delim()\nThe delim argument in separate_longer_delim() and separate_wider_delim() usually matches a fixed string, but you can use regex() to make it match a pattern. This is useful, for example, if you want to match a comma that is optionally followed by a space, i.e. regex(\", ?\").",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#base-r-equivalents",
    "href": "Lectures/CSSS508_Lecture7.html#base-r-equivalents",
    "title": "CSSS 508",
    "section": "Base R Equivalents1",
    "text": "Base R Equivalents1\n\n\n\nBase R\npaste0(x, sep, collapse)\n\nnchar(x)\nsubstr(x, start, end)\ntoupper(x)\ntolower(x)\ntools::toTitleCase(x)\ntrimws(x)\ngrepl(pattern, x)\nsub(x, pattern, replacement)\nstrwrap(x)\n\nstringr\nstr_c(x, sep, collapse)\nstr_flatten(x, collapse)\nstr_length(x)\nstr_sub(x, start, end)\nstr_to_upper(x)\nstr_to_lower(x)\nstr_to_title(x)\nstr_trim(x)\nstr_detect(x, pattern)\nstr_replace(x, pattern, replacement)\nstr_wrap(x)\n\n\n\nThere are many other useful stringr functions/variants of the functions we used today. Check them out here.\n\n\nYou can see a full list here, including functions we didn’t look at today.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#strings-1",
    "href": "Lectures/CSSS508_Lecture7.html#strings-1",
    "title": "CSSS 508",
    "section": "Strings",
    "text": "Strings\n\nFirst, install the babynames packages in your console, then run the following code to load the babynames dataset into your global environment.\n\n1library(babynames)\ndata(babynames) \n\n\n1\n\nUS baby names provided by the Social Security Administration. This package contains all names used for at least 5 children of either sex for 1880-2017.\n\n\n\n\n\n\n\nWhat is the shortest name length? What is the longest name length? Mean? Median?\nWhat is the most popular letter for a name to start with?1\nPick a year between 1880 and 2017 and use either str_c() or str_glue() to create a new variable that is a sentence stating what the most popular name was for each binary sex category in that year. Bonus: Add a line break in your sentence and use str_view() to see what the new string looks like2.\nOptional bonus: Make a plot of the popularity of your own name/nickname over time. What year was your name most popular? Is that close to your birth year?\n\n\n\nHint, each name has a proportion that is necessary to incorporate here.Hint: Use pull() before running str_view() to extract the last column created (your sentence) as a vector.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers",
    "href": "Lectures/CSSS508_Lecture7.html#answers",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nbabynames\n\n\n\n&gt; # A tibble: 1,924,665 × 5\n&gt;     year sex   name          n   prop\n&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n&gt;  1  1880 F     Mary       7065 0.0724\n&gt;  2  1880 F     Anna       2604 0.0267\n&gt;  3  1880 F     Emma       2003 0.0205\n&gt;  4  1880 F     Elizabeth  1939 0.0199\n&gt;  5  1880 F     Minnie     1746 0.0179\n&gt;  6  1880 F     Margaret   1578 0.0162\n&gt;  7  1880 F     Ida        1472 0.0151\n&gt;  8  1880 F     Alice      1414 0.0145\n&gt;  9  1880 F     Bertha     1320 0.0135\n&gt; 10  1880 F     Sarah      1288 0.0132\n&gt; # ℹ 1,924,655 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers-1",
    "href": "Lectures/CSSS508_Lecture7.html#answers-1",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nWhat is the shortest name length? What is the longest name length? Mean? Median?\n\n\n\nbabynames |&gt; \n  distinct(name) |&gt; \n  mutate(length = str_length(name)) |&gt; \n  summarise(shortest = min(length), \n            longest = max(length), \n            mean = mean(length), \n            median = median(length))\n\n\n\n&gt; # A tibble: 1 × 4\n&gt;   shortest longest  mean median\n&gt;      &lt;int&gt;   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1        2      15  6.53      6",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers-2",
    "href": "Lectures/CSSS508_Lecture7.html#answers-2",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nWhat is the most popular letter for a name to start with?1\n\n\n\nbabynames |&gt; \n  mutate(first = str_sub(name, 1, 1)) |&gt; \n  count(first, wt = prop,) |&gt; \n  arrange(desc(n))\n\n\n\n&gt; # A tibble: 26 × 2\n&gt;    first     n\n&gt;    &lt;chr&gt; &lt;dbl&gt;\n&gt;  1 J      32.6\n&gt;  2 M      25.9\n&gt;  3 A      20.9\n&gt;  4 C      18.7\n&gt;  5 R      17.8\n&gt;  6 E      16.0\n&gt;  7 D      15.5\n&gt;  8 L      15.3\n&gt;  9 S      13.8\n&gt; 10 B      11.8\n&gt; # ℹ 16 more rows\n\n\n\nHint, each name has a proportion that is necessary to account for here.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers-3",
    "href": "Lectures/CSSS508_Lecture7.html#answers-3",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nPick a year between 1880 and 2017 and use either str_c() or str_glue() to create a new variable that is a sentence stating what the most popular name was for each binary sex category in that year. Bonus: Add a line break in your sentence and use str_view() to see what the new string looks like1.\n\n\n\nbabynames |&gt; \n  filter(year == 1950) |&gt; \n2  mutate(sex2 = if_else(sex == \"F\", \"girl\", \"boy\")) |&gt;\n3  slice_max(prop, by = c(sex)) |&gt;\n  mutate(Sentence = str_wrap(str_glue(\"The most popular name for {sex2}s in \n                                      {year} was {name}.\"), \n                             width = 25)) |&gt; \n4  pull(Sentence) |&gt;\n  str_view()\n\n\n2\n\nCreating a new sex2 variable for better interpretability of the final Sentence variable.\n\n3\n\nGetting the most popular (by proportion of all names) male and female names.\n\n4\n\npull() is similar to indexing with $ in Base R but works well with pipes. This is necessary to do before str_view() which only takes a vector of values (not a column from a data frame).\n\n\n\n\n\n\n&gt; [1] │ The most popular name for\n&gt;     │ girls in 1950 was Linda.\n&gt; [2] │ The most popular name for\n&gt;     │ boys in 1950 was James.\n\n\n\nHint: Use pull() before running str_view() to extract the last column created (your sentence) as a vector.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers-4",
    "href": "Lectures/CSSS508_Lecture7.html#answers-4",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nOptional bonus: Make a plot of the popularity of your own name/nickname over time. What year was your name most popular? Is that close to your birth year?\n\n\n5library(ggrepel)\n6library(ggthemes)\n7library(patchwork)\n\ncolors &lt;- c(\"#4e79a7\",\"#f28e2c\",\"#e15759\",\"#76b7b2\",\"#59a14f\",\"#edc949\",\n            \"#af7aa1\",\"#ff9da7\",\"#9c755f\",\"#bab0ab\")\n\nvictoria_plot &lt;- babynames |&gt; \n  filter(name == \"Victoria\") |&gt; \n8  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt;\n  ggplot(aes(x = year, y = prop, group = name, fill = name)) +\n  geom_density(stat = \"identity\", alpha = 0.25, color = colors[1]) + \n9  geom_vline(xintercept = 1988, color = colors[2], linetype = 2) +\n10  geom_vline(data = babynames |&gt;\n               filter(name == \"Victoria\") |&gt;\n               mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt;\n               slice_max(prop, by = sex2),\n             aes(xintercept = year), color = colors[3]) +\n11  facet_grid(sex2 ~ .,\n             scales = \"free_y\") +\n12  scale_fill_manual(values = colors[1]) +\n  labs(title = 'Popularity of the name \"Victoria\"',\n       subtitle = \"1880-2017, by binary sex category\",\n13       y = \"\",\n       x = \"\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n14        strip.background = element_rect(color=\"black\",\n                                        fill= alpha(colors[10], 0.5),\n                                        linetype = 0))\n\nvic_plot &lt;- babynames |&gt; \n  filter(name == \"Vic\") |&gt; \n  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt; \n  ggplot(aes(x = year, y = prop, group = name, fill = name)) +\n  geom_density(stat = \"identity\", alpha = 0.25, color = colors[6]) + \n  geom_vline(xintercept = 1988, color = colors[2], linetype = 2) +\n  geom_vline(data = babynames |&gt; \n               filter(name == \"Vic\") |&gt; \n               mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt; \n               slice_max(prop, by = sex2), \n             aes(xintercept = year), color = colors[3]) + \n  facet_grid(sex2 ~ .,\n             scales = \"free_y\") + \n  scale_fill_manual(values = colors[6]) + \n  labs(title = 'Popularity of the name \"Vic\"',\n       y = \"\", \n       caption = \"Note: y-axes are of different scales; \n       Orange, dashed line represents 1988; # \n       Red, solid line represents most popular # \n15       year for that name-sex pairing.\",\n       x = \"Year\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n        strip.background = element_rect(color=\"black\", \n                                        fill= alpha(colors[10], 0.5), \n                                        linetype = 0))\n\n16combo_plots &lt;- victoria_plot / vic_plot + ylab(NULL)\n\n17wrap_elements(combo_plots) +\n  theme_tufte(base_size = 16) +\n18  labs(tag = \"Proportion of all names given to U.S. newborns\") +\n  theme(plot.tag = element_text(size = rel(1.25), angle = 90),\n        plot.tag.position = \"left\")\n\n\n5\n\nFor labels that don’t overlap.\n\n6\n\nFor extra built-in themes.\n\n7\n\nAllows distinct plots to be put together into one visualization.\n\n8\n\nCreating an alternative sex variable for facet visualization purposes.\n\n9\n\nVertical line for birth year.\n\n10\n\nVertical line for most popular year for that name/nickname.\n\n11\n\nFacetting by sex2 and allowing the y-axis to vary based on facet value.\n\n12\n\nApplying desired colors.\n\n13\n\nLeaving axes blank for final patchwork labelling.\n\n14\n\nSpecifying color for facet labels.\n\n15\n\nAdding note and x-axis text since this plot will be at the bottom of the overall visualization.\n\n16\n\nCreating object for patchwork visuaization.\n\n17\n\nPutting together the two separate plots.\n\n18\n\nCreating and plotting a y axis that spans both plots.",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture7.html#answers-5",
    "href": "Lectures/CSSS508_Lecture7.html#answers-5",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nExample using regular expressions:\n\nnicknames &lt;- babynames |&gt; \n19  mutate(nickname = case_when(str_detect(name, pattern = \"^Vi.{2}oria$\") ~ \"Victoria\",\n                              str_detect(name, pattern = \"^Vi.{2}or$\") ~ \"Victor\",\n                              str_detect(name, pattern = \"^Vi[ck]{1,2}$\") ~ \"Vic\",\n                              str_detect(name, pattern = \"^Tor[riey]*$\") ~ \"Tori\",\n                              str_detect(name, pattern = \"^Vi[ck]+[iey]*$\") ~ \"Vicky\",\n                               .default = NA)) |&gt; \n20  filter(!is.na(nickname)) |&gt;\n21  mutate(prop2 = sum(prop),\n         .by = c(year, nickname, sex)) |&gt;\n  distinct(year, nickname, prop2, sex) |&gt; \n22  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\"),\n23         nickname = fct(nickname, levels = c(\"Victoria\", \"Victor\", \"Vicky\", \"Tori\", \"Vic\")))\n\nmy_names &lt;- nicknames |&gt; \n  ggplot(aes(x = year, y = prop2, fill = nickname, group = nickname)) +\n  geom_density(aes(color = nickname), stat = \"identity\", alpha = 0.15) +\n  geom_vline(xintercept = 1988, color = colors[4], linetype = 2) +\n24  scale_fill_manual(values = colors[c(1:3, 5:7)]) +\n  scale_color_manual(values = colors[c(1:3, 5:7)]) + \n  facet_grid(sex2 ~ .,\n             scales = \"free_y\") + \n  geom_label_repel(data = nicknames |&gt; slice_max(prop2, by = c(sex2, nickname)),\n                   aes(label = nickname), stat = \"identity\") + \n  labs(title = 'Popularity of all nicknames for \"Victoria\" (including all spelling variants)',\n       caption = \"Note: y-axes are of different scales; Teal, dashed line represents 1988\",\n       subtitle = \"1880-2017, by binary sex category\",\n       y = \"Proportion of all names given to U.S. newborns\", \n       x = \"Year\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n        strip.background = element_rect(color=\"black\", fill= alpha(colors[10], 0.5), linetype = 0))\nmy_names\n\n\n19\n\nCreating a new variable that finds all spelling variations of “Victoria” and its most common derivatives using regular expressions.\n\n20\n\nRemoving all names that don’t match any of the versions of “Victoria” or its nicknames.\n\n21\n\nCalculating a new proportion that collapses all spelling variations into the most common variant.\n\n22\n\nCreating an alternative sex variable for facet visualization purposes.\n\n23\n\nPutting names in the order I want to assign for colors.\n\n24\n\nPicking the specific colors I want to assign to the 5 names",
    "crumbs": [
      "Lectures",
      "Lecture 7: Text data"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#title-slide",
    "href": "Lectures/CSSS508_Lecture6.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Data Structures & Types\nCS&SS 508 • Lecture 6\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-types-in-r",
    "href": "Lectures/CSSS508_Lecture6.html#data-types-in-r",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-types-in-r-1",
    "href": "Lectures/CSSS508_Lecture6.html#data-types-in-r-1",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-types-in-r-2",
    "href": "Lectures/CSSS508_Lecture6.html#data-types-in-r-2",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-types-in-r-3",
    "href": "Lectures/CSSS508_Lecture6.html#data-types-in-r-3",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#why-use-factors",
    "href": "Lectures/CSSS508_Lecture6.html#why-use-factors",
    "title": "CSSS 508",
    "section": "Why Use Factors?",
    "text": "Why Use Factors?\nFactors are a special class of data specifically for categorical variables1 which have a fixed, known, and mutually exclusive set of possible values2.\nImagine we have a variable that records the month that an event occurred.\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\nThe two main issues with coding this simply as a character string:\n\nIt doesn’t help catch spelling errors\n\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n\n\nCharacters are sorted alphabetically, which is not necessarily intuitive or useful for your variable\n\n\nsort(month)\n\n&gt; [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n\n\nFor categoricals; forcats is also an anagram of factors.Factors can also be created from character strings that you want to display in non-alphabetical order",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#factors",
    "href": "Lectures/CSSS508_Lecture6.html#factors",
    "title": "CSSS 508",
    "section": "Factors",
    "text": "Factors\nFactors have an additional specification called levels. These are the categories of the categorical variable. We can create a vector of the levels first:\n\nmonth_levels &lt;- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\nAnd then we can create a factor like so:\n\nmonth_factor &lt;- factor(month, levels = month_levels)\nmonth_factor\n\n&gt; [1] Dec Apr Jan Mar\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nWe can see that the levels specify in which order the categories should be displayed:\n\nsort(month_factor)\n\n&gt; [1] Jan Mar Apr Dec\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#creating-factors",
    "href": "Lectures/CSSS508_Lecture6.html#creating-factors",
    "title": "CSSS 508",
    "section": "Creating Factors",
    "text": "Creating Factors\nfactor is Base R’s function for creating factors while fct is forcats function for making factors. A couple of things to note about their differences:\n\n\nfactor\n\nAny values not specified as a level will be silently converted to NA\nWithout specified levels, they’ll be created from the data in alphabetical order1\n\n\nfct\n\nWill send a error message if a value exists outside the specified levels\nWithout specified levels, they’ll be created from the data in order of first appearance\n\n\nYou can create a factor by specifying col_factor() when reading in data with readr:\n\ndf &lt;- read_csv(csv, col_types = cols(month = col_factor(month_levels)))\n\nIf you need to access the levels directly you can use the Base R function levels().\n\nlevels(month_factor)\n\n&gt;  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\nThis is risky to rely on since not every computer will sort strings the same way.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels",
    "href": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nOne of the more common data manipulations you’ll want to do with factors is to change the ordering of the levels. This could be to put them in a more intuitive order but also to make a visualization clearer and more impactful.\nLet’s use a subset of the General Social Survey1 data to see what this might look like.\n\ngss_cat\n\n&gt; # A tibble: 21,483 × 9\n&gt;     year marital         age race  rincome        partyid    relig denom tvhours\n&gt;    &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n&gt;  1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n&gt;  2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n&gt;  3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n&gt;  4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n&gt;  5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n&gt;  6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n&gt;  7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n&gt;  8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n&gt;  9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n&gt; 10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n&gt; # ℹ 21,473 more rows\n\n\nOnce you’ve loaded forcats you can run ?gss_cat to learn more.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels-1",
    "href": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels-1",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nThere are four related functions to change the level ordering in forcats.\nfct_reorder()\n\n1fct_reorder(.f = factor,\n2            .x = ordering_vector,\n3            .fun = optional_function)\n\n\n1\n\nfactor is the factor to reorder (or a character string to be turned into a factor)\n\n2\n\nordering_vector specifies how to reorder factor\n\n3\n\noptional_function is applied if there are multiple values of ordering_vector for each value of factor (the default is to take the median)\n\n\n\n\nfct_relevel()\n\nfct_relevel(.f = factor, \n4            ... = value,\n5            after = placement)\n\n\n4\n\nvalue is either a function (i.e. sort) or a character level (default is to move it to the front of the vector)\n\n5\n\nplacement is an optional vector index where the level should be placed\n\n\n\n\nfct_reorder2()\n\nfct_reorder2(.f = factor, \n6            .x = vector1,\n            .y = vector2)\n\n\n6\n\nfct_reorder2 reorders factor by the values of vector2 associated with the largest values of vector1.\n\n\n\n\nfct_infreq()\n\n7fct_infreq(.f = factor)\n\n\n7\n\nfct_infreq reorders factor in decreasing frequency. See other variations here. Use with fct_rev() for increasing frequency.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels-2",
    "href": "Lectures/CSSS508_Lecture6.html#changing-the-order-of-levels-2",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nThere are four related functions to change the level ordering in forcats.\n\nfct_reorder1fct_relevel2fct_reorder2fct_infreq\n\n\nfct_reorder() is for reordering levels by sorting along another variable\nWithout fct_reorder()\n\n\nCode\nrelig_summary &lt;- gss_cat |&gt;\n  summarize(\n    tvhours = mean(tvhours, na.rm = TRUE),\n    .by = relig\n  )\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\nWith fct_reorder()\n\n\nCode\nrelig_summary |&gt;\n  mutate(\n    relig = fct_reorder(relig, tvhours)\n  ) |&gt;\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nfct_relevel() allows you to reorder the levels by hand\nWithout fct_relevel()\n\n\nCode\nrincome_summary &lt;- gss_cat |&gt;\n  summarize(\n    age = mean(age, na.rm = TRUE),\n    .by = rincome\n  )\n\nggplot(rincome_summary, aes(x = age, y = rincome)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\nWith fct_relevel()\n\n\nCode\nggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, \"Not applicable\"))) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nfct_reorder2() is like fct_reorder(), except when the factor is mapped to a non-position aesthetic such as color\nWithout fct_reorder2()\n\n\nCode\nby_age &lt;- gss_cat |&gt;\n  filter(!is.na(age)) |&gt; \n  count(age, marital) |&gt;\n  mutate(\n    prop = n / sum(n), \n    .by = age\n  )\n\nggplot(by_age, aes(x = age, y = prop, color = marital)) +\n  geom_line(linewidth = 1) + \n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\n\n\nWith fct_reorder()\n\n\nCode\nggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set1\") + \n  labs(color = \"marital\") \n\n\n\n\n\n\n\n\n\n\n\nfct_infreq() reorders levels by the number of observations within each level (largest first)\nWithout fct_infreq()\n\n\nCode\ngss_cat |&gt;\n  ggplot(aes(x = marital)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nWith fct_infreq()\nQuestion for you: what does fct_rev() do here?\n\n\nCode\ngss_cat |&gt;\n  mutate(marital = marital |&gt; fct_infreq() |&gt; fct_rev()) |&gt;\n  ggplot(aes(x = marital)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nUse fct_reorder and fct_reorder2 for categorical variables where ordering is arbitary.Use fct_relevel for categorical variables that already have an inherent ordering.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#changing-the-value-of-levels",
    "href": "Lectures/CSSS508_Lecture6.html#changing-the-value-of-levels",
    "title": "CSSS 508",
    "section": "Changing the Value of Levels",
    "text": "Changing the Value of Levels\nYou may also want to change the actual values of your factor levels. The main way to do this is fct_recode().\n\n8gss_cat |&gt; count(partyid)\n\n\n8\n\nYou can use count() to get the full list of levels for a variable and their respective counts.\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    partyid                n\n&gt;    &lt;fct&gt;              &lt;int&gt;\n&gt;  1 No answer            154\n&gt;  2 Don't know             1\n&gt;  3 Other party          393\n&gt;  4 Strong republican   2314\n&gt;  5 Not str republican  3032\n&gt;  6 Ind,near rep        1791\n&gt;  7 Independent         4119\n&gt;  8 Ind,near dem        2499\n&gt;  9 Not str democrat    3690\n&gt; 10 Strong democrat     3490",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#fct_recode",
    "href": "Lectures/CSSS508_Lecture6.html#fct_recode",
    "title": "CSSS 508",
    "section": "fct_recode()",
    "text": "fct_recode()\n\n\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_recode(partyid,\n      \"Republican, strong\" = \"Strong republican\",\n      \"Republican, weak\" = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\" = \"Not str democrat\",\n      \"Democrat, strong\" = \"Strong democrat\"\n    )\n  ) |&gt;\n  count(partyid)\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    partyid                   n\n&gt;    &lt;fct&gt;                 &lt;int&gt;\n&gt;  1 No answer               154\n&gt;  2 Don't know                1\n&gt;  3 Other party             393\n&gt;  4 Republican, strong     2314\n&gt;  5 Republican, weak       3032\n&gt;  6 Independent, near rep  1791\n&gt;  7 Independent            4119\n&gt;  8 Independent, near dem  2499\n&gt;  9 Democrat, weak         3690\n&gt; 10 Democrat, strong       3490\n\n\n\nSome features of fct_recode():\n\nWill leave the levels that aren’t explicitly mentioned, as is.\nWill warn you if you accidentally refer to a level that doesn’t exist.\nYou can combine groups by assigning multiple old levels to the same new level.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#fct_collapse",
    "href": "Lectures/CSSS508_Lecture6.html#fct_collapse",
    "title": "CSSS 508",
    "section": "fct_collapse()",
    "text": "fct_collapse()\nA useful variant of fct_recode() is fct_collapse() which will allow you to collapse a lot of levels at once.\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n    )\n  ) |&gt;\n  count(partyid)\n\n&gt; # A tibble: 4 × 2\n&gt;   partyid     n\n&gt;   &lt;fct&gt;   &lt;int&gt;\n&gt; 1 other     548\n&gt; 2 rep      5346\n&gt; 3 ind      8409\n&gt; 4 dem      7180",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#fct_lump_",
    "href": "Lectures/CSSS508_Lecture6.html#fct_lump_",
    "title": "CSSS 508",
    "section": "fct_lump_*",
    "text": "fct_lump_*\nSometimes you’ll have several levels of a variable that have a small enough N to warrant grouping them together into an other category. The family of fct_lump_* functions are designed to help with this.\n\ngss_cat |&gt;\n9  mutate(relig = fct_lump_n(relig, n = 10)) |&gt;\n  count(relig, sort = TRUE)\n\n\n9\n\nOther functions include: fct_lump_min(), fct_lump_prop(), fct_lump_lowfreq(). Read more about them here.\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    relig                       n\n&gt;    &lt;fct&gt;                   &lt;int&gt;\n&gt;  1 Protestant              10846\n&gt;  2 Catholic                 5124\n&gt;  3 None                     3523\n&gt;  4 Christian                 689\n&gt;  5 Other                     458\n&gt;  6 Jewish                    388\n&gt;  7 Buddhism                  147\n&gt;  8 Inter-nondenominational   109\n&gt;  9 Moslem/islam              104\n&gt; 10 Orthodox-christian         95",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#ordered-factors",
    "href": "Lectures/CSSS508_Lecture6.html#ordered-factors",
    "title": "CSSS 508",
    "section": "Ordered Factors",
    "text": "Ordered Factors\nSo far we’ve mostly been discussing how to code nominal variables, or categorical variables that have no inherent ordering.\nIf you want to specify that your factor has a strict order you can classify it as a ordered factor.\n\n10ordered(c(\"a\", \"b\", \"c\"))\n\n\n10\n\nOrdered factors imply a strict ordering and equal distance between levels: the first level is “less than” the second level by the same amount that the second level is “less than” the third level, and so on.\n\n\n\n\n&gt; [1] a b c\n&gt; Levels: a &lt; b &lt; c\n\n\n\nIn practice there are only two ways in which ordered factors are different than factors:\n\nscale_color_viridis()/scale_fill_viridis() will be used automatically when mapping an ordered factored in ggplot2 because it implies an ordered ranking\nIf you use an ordered function in a linear model, it will use “polygonal contrasts”. You can learn more about what this means here.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#numbers-two-ways",
    "href": "Lectures/CSSS508_Lecture6.html#numbers-two-ways",
    "title": "CSSS 508",
    "section": "Numbers, Two Ways",
    "text": "Numbers, Two Ways\nR has two types of numeric variables: double and integer.\n\nIntegers must be round numbers while doubles can be decimals\nThey are stored differently, and arithmetic works a bit differently with integers vs doubles\nContinuous values must be stored as doubles\nDiscrete values can be integers, doubles, or factors",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#numbers-coded-as-character-strings",
    "href": "Lectures/CSSS508_Lecture6.html#numbers-coded-as-character-strings",
    "title": "CSSS 508",
    "section": "Numbers Coded as Character Strings",
    "text": "Numbers Coded as Character Strings\nOftentimes numerical data is coded as a string so you’ll need to use the appropriate parsing function to read it in in the correct form.\n\n\nparse_integer(c(\"1\", \"2\", \"3\"))\n\n&gt; [1] 1 2 3\n\nparse_double(c(\"1\", \"2\", \"3.123\"))\n\n&gt; [1] 1.000 2.000 3.123\n\n\n\n\n\nIf you have values with extraneous non-numerical text you want to ignore there’s a separate function for that.\n\n\n\nparse_number(c(\"USD 3,513\", \"59%\", \"$1,123,456.00\"))\n\n&gt; [1]    3513      59 1123456",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#count",
    "href": "Lectures/CSSS508_Lecture6.html#count",
    "title": "CSSS 508",
    "section": "count()",
    "text": "count()\nA very useful and common exploratory data analysis tool is to check the relative sums of different categories of a variable. That’s what count() is for!\n\n\nlibrary(nycflights13)\ndata(flights)\n\n1flights |&gt; count(origin)\n\n\n1\n\nAdd the argument sort = TRUE to see the most common values first (i.e. arranged in descending order). . . .\n\n\n\n\n&gt; # A tibble: 3 × 2\n&gt;   origin      n\n&gt;   &lt;chr&gt;   &lt;int&gt;\n&gt; 1 EWR    120835\n&gt; 2 JFK    111279\n&gt; 3 LGA    104662\n\n\nThis is functionally the same as grouping and summarizing with n().\n\n\n\nflights |&gt; \n2  summarise(n= n(),\n3            .by = origin)\n\n\n2\n\nn() is a special summary function that doesn’t take any arguments and instead accesses information about the “current” group. This means that it only works inside dplyr verbs.\n\n3\n\nYou can do this longer version if you also want to compute other summaries simultaneously.\n\n\n\n\n&gt; # A tibble: 3 × 2\n&gt;   origin      n\n&gt;   &lt;chr&gt;   &lt;int&gt;\n&gt; 1 EWR    120835\n&gt; 2 LGA    104662\n&gt; 3 JFK    111279",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#n_distinct",
    "href": "Lectures/CSSS508_Lecture6.html#n_distinct",
    "title": "CSSS 508",
    "section": "n_distinct()",
    "text": "n_distinct()\nUse this function if you want the count the number of distinct (unique) values of one or more variables.\n\nSay we’re interested in which destinations are served by the most carriers:\n\nflights |&gt; \n  summarize(carriers = n_distinct(carrier), \n            .by = dest) |&gt; \n  arrange(desc(carriers))\n\n&gt; # A tibble: 105 × 2\n&gt;    dest  carriers\n&gt;    &lt;chr&gt;    &lt;int&gt;\n&gt;  1 ATL          7\n&gt;  2 ORD          7\n&gt;  3 TPA          7\n&gt;  4 BOS          7\n&gt;  5 CLT          7\n&gt;  6 IAD          6\n&gt;  7 MSP          6\n&gt;  8 DTW          6\n&gt;  9 MSY          6\n&gt; 10 PIT          6\n&gt; # ℹ 95 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#weighted-counts",
    "href": "Lectures/CSSS508_Lecture6.html#weighted-counts",
    "title": "CSSS 508",
    "section": "Weighted Counts",
    "text": "Weighted Counts\nA weighted count is simply a grouped sum, therefore count has a wt argument to allow for the shorthand.\n\n\n\nHow many miles did each plane fly?\n\nflights |&gt; \n  summarize(miles = sum(distance), \n            .by = tailnum)\n\n&gt; # A tibble: 4,044 × 2\n&gt;    tailnum  miles\n&gt;    &lt;chr&gt;    &lt;dbl&gt;\n&gt;  1 N14228  171713\n&gt;  2 N24211  172934\n&gt;  3 N619AA   32141\n&gt;  4 N804JB  311992\n&gt;  5 N668DN   50352\n&gt;  6 N39463  169905\n&gt;  7 N516JB  359585\n&gt;  8 N829AS   52549\n&gt;  9 N593JB  377619\n&gt; 10 N3ALAA   67925\n&gt; # ℹ 4,034 more rows\n\n\n\n\nThis is equivalent to:\n\nflights |&gt; count(tailnum, wt = distance) \n\n&gt; # A tibble: 4,044 × 2\n&gt;    tailnum      n\n&gt;    &lt;chr&gt;    &lt;dbl&gt;\n&gt;  1 D942DN    3418\n&gt;  2 N0EGMQ  250866\n&gt;  3 N10156  115966\n&gt;  4 N102UW   25722\n&gt;  5 N103US   24619\n&gt;  6 N104UW   25157\n&gt;  7 N10575  150194\n&gt;  8 N105UW   23618\n&gt;  9 N107US   21677\n&gt; 10 N108UW   32070\n&gt; # ℹ 4,034 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions",
    "href": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions",
    "title": "CSSS 508",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nIn addition to the standards (+, -, /, *, ^), R has many other useful arithmetic functions.\n\nPairwise min/max\n\nmydata &lt;- tribble(\n  ~x, ~y,\n  1,  3,\n  5,  2,\n  7, NA,\n)\nmydata\n\n&gt; # A tibble: 3 × 2\n&gt;       x     y\n&gt;   &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1     1     3\n&gt; 2     5     2\n&gt; 3     7    NA\n\n\n\n\n\nmydata |&gt; \n  mutate(\n    min = min(x, y, na.rm = TRUE),\n    max = max(x, y, na.rm = TRUE)\n  )\n\n&gt; # A tibble: 3 × 4\n&gt;       x     y   min   max\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1     1     3     1     7\n&gt; 2     5     2     1     7\n&gt; 3     7    NA     1     7\n\n\n\n\n\nmydata |&gt; \n  mutate(\n6    min = pmin(x, y, na.rm = TRUE),\n7    max = pmax(x, y, na.rm = TRUE)\n  )\n\n\n6\n\npmin() returns the smallest value in each row. min(), by contrast, finds the smallest observation given a number of rows.\n\n7\n\npmax() returns the largest value in each row. max(), by contrast, finds the largest observation given a number of rows.\n\n\n\n\n&gt; # A tibble: 3 × 4\n&gt;       x     y   min   max\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1     1     3     1     3\n&gt; 2     5     2     2     5\n&gt; 3     7    NA     7     7",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-1",
    "href": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-1",
    "title": "CSSS 508",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nModular arithmetic\n\n81:10 %/% 3\n\n\n8\n\nComputes integer division.\n\n\n\n\n&gt;  [1] 0 0 1 1 1 2 2 2 3 3\n\n\n\n91:10 %% 3\n\n\n9\n\nComputes the remainder.\n\n\n\n\n&gt;  [1] 1 2 0 1 2 0 1 2 0 1\n\n\n\nWe can see how this can be useful in our flights data which has curiously stored time:\n\nflights |&gt; mutate(hour = sched_dep_time %/% 100,\n                  minute = sched_dep_time %% 100,\n                  .keep = \"used\")\n\n&gt; # A tibble: 336,776 × 3\n&gt;    sched_dep_time  hour minute\n&gt;             &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt;  1            515     5     15\n&gt;  2            529     5     29\n&gt;  3            540     5     40\n&gt;  4            545     5     45\n&gt;  5            600     6      0\n&gt;  6            558     5     58\n&gt;  7            600     6      0\n&gt;  8            600     6      0\n&gt;  9            600     6      0\n&gt; 10            600     6      0\n&gt; # ℹ 336,766 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-2",
    "href": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-2",
    "title": "CSSS 508",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nLogarithms1\n\n10log(c(2.718282, 7.389056, 20.085537))\n\n\n10\n\nInverse is exp()\n\n\n\n\n&gt; [1] 1 2 3\n\n\n\n11log2(c(2, 4, 8))\n\n\n11\n\nEasy to interpret because a difference of 1 on the log scale corresponds to doubling on the original scale and a difference of -1 corresponds to halving. Inverse is 2^.\n\n\n\n\n&gt; [1] 1 2 3\n\n\n\n12log10(c(10, 100, 1000))\n\n\n12\n\nEasy to back-transform because everything is on the order of 10. Inverse is 10^.\n\n\n\n\n&gt; [1] 1 2 3\n\n\nAn incredibly useful transformation for dealing with data that ranges across multiple orders of magnitude and converting exponential growth to linear growth.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-3",
    "href": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-3",
    "title": "CSSS 508",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nCumulative and Rolling Aggregates\nBase R provides cumsum(), cumprod(), cummin(), cummax() for running, or cumulative, sums, products, mins and maxes. dplyr provides cummean() for cumulative means.\n\n\n1:15\n\n&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n\n\n13cumsum(1:15)\n\n\n13\n\ncumsum() is the most common in practice.\n\n\n\n\n&gt;  [1]   1   3   6  10  15  21  28  36  45  55  66  78  91 105 120\n\n\n\n\nFor complex rolling/sliding aggregates, check out the slidr package.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-4",
    "href": "Lectures/CSSS508_Lecture6.html#other-useful-arithmetic-functions-4",
    "title": "CSSS 508",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nNumeric Ranges\n\nx &lt;- c(1, 2, 5, 10, 15, 20)\n14cut(x, breaks = c(0, 5, 10, 15, 20))\n\n\n14\n\ncut() breaks up (aka bins) a numeric vector into discrete buckets\n\n\n\n\n&gt; [1] (0,5]   (0,5]   (0,5]   (5,10]  (10,15] (15,20]\n&gt; Levels: (0,5] (5,10] (10,15] (15,20]\n\n\n\n\n15cut(x, breaks = c(0, 5, 10, 100))\n\n\n15\n\nThe bins don’t have to be the same size.\n\n\n\n\n&gt; [1] (0,5]    (0,5]    (0,5]    (5,10]   (10,100] (10,100]\n&gt; Levels: (0,5] (5,10] (10,100]\n\n\n\n\n\ncut(x, \n  breaks = c(0, 5, 10, 15, 20), \n16  labels = c(\"sm\", \"md\", \"lg\", \"xl\")\n)\n\n\n16\n\nYou can optionally supply your own labels. Note that there should be one less labels than breaks.\n\n\n\n\n&gt; [1] sm sm sm md lg xl\n&gt; Levels: sm md lg xl\n\n\n\n\n\n17y &lt;- c(NA, -10, 5, 10, 30)\ncut(y, breaks = c(0, 5, 10, 15, 20))\n\n\n17\n\nAny values outside of the range of the breaks will become NA.\n\n\n\n\n&gt; [1] &lt;NA&gt;   &lt;NA&gt;   (0,5]  (5,10] &lt;NA&gt;  \n&gt; Levels: (0,5] (5,10] (10,15] (15,20]",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#rounding",
    "href": "Lectures/CSSS508_Lecture6.html#rounding",
    "title": "CSSS 508",
    "section": "Rounding",
    "text": "Rounding\nround() allows us to round to a certain decimal place. Without specifying an argument for the digits argument it will round to the nearest integer.\n\n\nround(pi)\n\n&gt; [1] 3\n\nround(pi, digits = 2)\n\n&gt; [1] 3.14\n\n\n\n\nUsing negative integers in the digits argument allows you to round on the left-hand side of the decimal place.\n\nround(39472, digits = -1)\n\n&gt; [1] 39470\n\nround(39472, digits = -2)\n\n&gt; [1] 39500\n\nround(39472, digits = -3)\n\n&gt; [1] 39000",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#rounding-1",
    "href": "Lectures/CSSS508_Lecture6.html#rounding-1",
    "title": "CSSS 508",
    "section": "Rounding",
    "text": "Rounding\nWhat’s going on here?\n\nround(c(1.5, 2.5)) \n\n&gt; [1] 2 2\n\n\n\nround() uses what’s known as “round half to even” or Banker’s rounding: if a number is half way between two integers, it will be rounded to the even integer. This is a good strategy because it keeps the rounding unbiased: half of all 0.5s are rounded up, and half are rounded down.\n\n\n\nfloor() and ceiling() are also useful rounding shortcuts.\n\n18floor(123.456)\n\n\n18\n\nAlways rounds down.\n\n\n\n\n&gt; [1] 123\n\n\n\n19ceiling(123.456)\n\n\n19\n\nAlways rounds up.\n\n\n\n\n&gt; [1] 124",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#summary-functions",
    "href": "Lectures/CSSS508_Lecture6.html#summary-functions",
    "title": "CSSS 508",
    "section": "Summary Functions",
    "text": "Summary Functions\n\nCentral Tendency\n\n20x &lt;- sample(1:500, size = 100, replace = TRUE)\nmean(x)\n\n\n20\n\nsample() takes a vector of data, and samples size elements from it, with replacement if replace equals TRUE.\n\n\n\n\n&gt; [1] 257.02\n\n\n\nmedian(x)\n\n&gt; [1] 265.5\n\n\n\n21quantile(x, .95)\n\n\n21\n\nA generalization of the median: quantile(x, 0.95) will find the value that’s greater than 95% of the values; quantile(x, 0.5) is equivalent to the median.\n\n\n\n\n&gt;    95% \n&gt; 464.25",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#summary-functions-1",
    "href": "Lectures/CSSS508_Lecture6.html#summary-functions-1",
    "title": "CSSS 508",
    "section": "Summary Functions",
    "text": "Summary Functions\nMeasures of Spread/Variation\n\nmin(x)\n\n&gt; [1] 5\n\nmax(x)\n\n&gt; [1] 494\n\nrange(x)\n\n&gt; [1]   5 494\n\n\n\n22IQR(x)\n\n\n22\n\nEquivalent to quantile(x, 0.75) - quantile(x, 0.25) and gives you the range that contains the middle 50% of the data.\n\n\n\n\n&gt; [1] 206\n\n\n\n23var(x)\n\n\n23\n\n\\[s^2 = \\frac{\\sum(x_i-\\overline{x})^2}{n-1}\\]\n\n\n\n\n&gt; [1] 18357.53\n\n\n\n24sd(x)\n\n\n24\n\n\\[s = \\sqrt{\\frac{\\sum(x_i-\\overline{x})^2}{n-1}}\\]\n\n\n\n\n&gt; [1] 135.49",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#common-numerical-manipulations",
    "href": "Lectures/CSSS508_Lecture6.html#common-numerical-manipulations",
    "title": "CSSS 508",
    "section": "Common Numerical Manipulations",
    "text": "Common Numerical Manipulations\nThese formulas can be used in a summary call but are also useful with mutate(), particularly if being applied to grouped data.\n\n\n19x / sum(x)\n20(x - mean(x)) / sd(x)\n21(x - min(x)) / (max(x) - min(x))\n22x / first(x)\n\n\n19\n\nCalculates the proportion of a total.\n\n20\n\nComputes a Z-score (standardized to mean 0 and sd 1).\n\n21\n\nStandardizes to range [0, 1].\n\n22\n\nComputes an index based on the first observation.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#summary-functions-2",
    "href": "Lectures/CSSS508_Lecture6.html#summary-functions-2",
    "title": "CSSS 508",
    "section": "Summary Functions",
    "text": "Summary Functions\nPositions\n\nfirst(x)\n\n&gt; [1] 314\n\nlast(x)\n\n&gt; [1] 334\n\nnth(x, n = 77)\n\n&gt; [1] 427\n\n\n\n\nThese are all really helpful but is there a good summary descriptive statistics function?",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#basic-summary-statistics",
    "href": "Lectures/CSSS508_Lecture6.html#basic-summary-statistics",
    "title": "CSSS 508",
    "section": "Basic summary statistics",
    "text": "Basic summary statistics\n\n\nsummary(iris)\n\n&gt;   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n&gt;  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n&gt;  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n&gt;  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n&gt;  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n&gt;  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n&gt;  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n&gt;        Species  \n&gt;  setosa    :50  \n&gt;  versicolor:50  \n&gt;  virginica :50  \n&gt;                 \n&gt;                 \n&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#better-summary-statistics",
    "href": "Lectures/CSSS508_Lecture6.html#better-summary-statistics",
    "title": "CSSS 508",
    "section": "Better summary statistics",
    "text": "Better summary statistics\nA basic example:\n\nlibrary(skimr)\nskim(iris)\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSpecies\n0\n1\nFALSE\n3\nset: 50, ver: 50, vir: 50\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.80\n6.4\n7.9\n▆▇▇▅▂\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.00\n3.3\n4.4\n▁▆▇▂▁\n\n\nPetal.Length\n0\n1\n3.76\n1.77\n1.0\n1.6\n4.35\n5.1\n6.9\n▇▁▆▇▂\n\n\nPetal.Width\n0\n1\n1.20\n0.76\n0.1\n0.3\n1.30\n1.8\n2.5\n▇▁▇▅▃",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#better-summary-statistics-1",
    "href": "Lectures/CSSS508_Lecture6.html#better-summary-statistics-1",
    "title": "CSSS 508",
    "section": "Better summary statistics",
    "text": "Better summary statistics\nA more complex example:\n\nskim(starwars)\n\n\nData summary\n\n\nName\nstarwars\n\n\nNumber of rows\n87\n\n\nNumber of columns\n14\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nlist\n3\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nname\n0\n1.00\n3\n21\n0\n87\n0\n\n\nhair_color\n5\n0.94\n4\n13\n0\n11\n0\n\n\nskin_color\n0\n1.00\n3\n19\n0\n31\n0\n\n\neye_color\n0\n1.00\n3\n13\n0\n15\n0\n\n\nsex\n4\n0.95\n4\n14\n0\n4\n0\n\n\ngender\n4\n0.95\n8\n9\n0\n2\n0\n\n\nhomeworld\n10\n0.89\n4\n14\n0\n48\n0\n\n\nspecies\n4\n0.95\n3\n14\n0\n37\n0\n\n\n\nVariable type: list\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nn_unique\nmin_length\nmax_length\n\n\n\n\nfilms\n0\n1\n24\n1\n7\n\n\nvehicles\n0\n1\n11\n0\n2\n\n\nstarships\n0\n1\n16\n0\n5\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nheight\n6\n0.93\n174.60\n34.77\n66\n167.0\n180\n191.0\n264\n▂▁▇▅▁\n\n\nmass\n28\n0.68\n97.31\n169.46\n15\n55.6\n79\n84.5\n1358\n▇▁▁▁▁\n\n\nbirth_year\n44\n0.49\n87.57\n154.69\n8\n35.0\n52\n72.0\n896\n▇▁▁▁▁",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#skim-function",
    "href": "Lectures/CSSS508_Lecture6.html#skim-function",
    "title": "CSSS 508",
    "section": "skim function",
    "text": "skim function\nHighlights of this summary statistics function:\n\n\nprovides a larger set of statistics than summary() including number missing, complete, n, sd, histogram for numeric data\npresentation is in a compact, organized format\nreports each data type separately\nhandles a wide range of data classes including dates, logicals, strings, lists and more\ncan be used with summary() for an overall summary of the data (w/o specifics about columns)\nindividual columns can be selected for a summary of only a subset of the data\nhandles grouped data\nbehaves nicely in pipelines\nproduces knitted results for documents\neasily and highly customizable (i.e. specify your own statistics and classes)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#explicit-missing-values",
    "href": "Lectures/CSSS508_Lecture6.html#explicit-missing-values",
    "title": "CSSS 508",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\n\n\nAn explicit missing value is the presence of an absence.\n\n\n\nIn other words, an explicit missing value is one in which you see an NA.\n\n\nDepending on the reason for its missingness, there are different ways to deal with NAs.\n\n\nData Entry Shorthand\nIf your data were entered by hand and NAs merely represent a value being carried forward from the last entry then you can use fill() to help complete your data.\n\n\n\n\ntreatment &lt;- tribble(\n  ~person,           ~treatment, ~response,\n  \"Derrick Whitmore\", 1,         7,\n  NA,                 2,         10,\n  \"Katherine Burke\",  3,         NA,\n  NA,                 1,         4\n)\n\n\n\n\n\ntreatment |&gt;\n1  fill(everything())\n\n\n1\n\nfill() takes one or more variables (in this case everything(), which means all variables), and by default fills them in downwards. If you have a different issue you can change the .direction argument to \"up\",\"downup\", or \"updown\".\n\n\n\n\n&gt; # A tibble: 4 × 3\n&gt;   person           treatment response\n&gt;   &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;\n&gt; 1 Derrick Whitmore         1        7\n&gt; 2 Derrick Whitmore         2       10\n&gt; 3 Katherine Burke          3       10\n&gt; 4 Katherine Burke          1        4",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#explicit-missing-values-1",
    "href": "Lectures/CSSS508_Lecture6.html#explicit-missing-values-1",
    "title": "CSSS 508",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\nRepresent A Fixed Value\nOther times an NA represents some fixed value, usually 0.\n\n\nx &lt;- c(1, 4, 5, 7, NA)\n2coalesce(x, 0)\n\n\n2\n\ncoalesce() in the dplyr package takes a vector as the first argument and will replace any missing values with the value provided in the second argument.\n\n\n\n\n&gt; [1] 1 4 5 7 0\n\n\n\n\n\nRepresented By a Fixed Value\nIf the opposite issue occurs (i.e. a value is actually an NA), try specifying that to the na argument of your readr data import function. Otherwise, use na_if() from dplyr.\n\nx &lt;- c(1, 4, 5, 7, -99)\nna_if(x, -99)\n\n&gt; [1]  1  4  5  7 NA",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#explicit-missing-values-2",
    "href": "Lectures/CSSS508_Lecture6.html#explicit-missing-values-2",
    "title": "CSSS 508",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\nNaNs\nA special sub-type of missing value is an NaN, or Not a Number.\n\nThese generally behave similar to NAs and are likely the result of a mathematical operation that has an indeterminate result:\n\n0 / 0 \n\n&gt; [1] NaN\n\n0 * Inf\n\n&gt; [1] NaN\n\nInf - Inf\n\n&gt; [1] NaN\n\nsqrt(-1)\n\n&gt; [1] NaN\n\n\n\n\nIf you need to explicitly identify an NaN you can use is.nan().",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#implicit-nas",
    "href": "Lectures/CSSS508_Lecture6.html#implicit-nas",
    "title": "CSSS 508",
    "section": "Implicit NAs",
    "text": "Implicit NAs\n\nAn implicit missing value is the absence of a presence.\n\n\nWe’ve seen a couple of ways that implicit NAs can be made explicit in previous lectures: pivoting and joining.\n\n\nFor example, if we really look at the dataset below, we can see that there are missing values that don’t appear as NA merely due to the current structure of the data.\n\nstocks\n\n&gt; # A tibble: 7 × 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     2  0.34\n&gt; 6  2021     3  0.17\n&gt; 7  2021     4  2.66",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#implicit-nas-1",
    "href": "Lectures/CSSS508_Lecture6.html#implicit-nas-1",
    "title": "CSSS 508",
    "section": "Implicit NAs",
    "text": "Implicit NAs\ntidyr::complete() allows you to generate explicit missing values by providing a set of variables that define the combination of rows that should exist.\n\n\n\n\nstocks |&gt;\n  complete(year, qtr)\n\n&gt; # A tibble: 8 × 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     1 NA   \n&gt; 6  2021     2  0.34\n&gt; 7  2021     3  0.17\n&gt; 8  2021     4  2.66\n\n\n\n\n\n\nstocks |&gt;\n  complete(year, qtr, fill = list(price = 0.93))\n\n&gt; # A tibble: 8 × 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     1  0.93\n&gt; 6  2021     2  0.34\n&gt; 7  2021     3  0.17\n&gt; 8  2021     4  2.66\n\n\n\n\n\n\nThe fill argument of complete only allows you to supply 1 value per variable. If you have more than one value to fill, use complete to create the data structure you need, and case_when to replace NAs would be the most straightforward approach.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#missing-factor-levels",
    "href": "Lectures/CSSS508_Lecture6.html#missing-factor-levels",
    "title": "CSSS 508",
    "section": "Missing Factor Levels",
    "text": "Missing Factor Levels\n\nThe last type of missingness is a theoretical level of a factor that doesn’t have any observations.\n\n\nFor instance, we have this health dataset and we’re interested in smokers:\n\n\n\n\nhealth\n\n&gt; # A tibble: 5 × 3\n&gt;   name    smoker   age\n&gt;   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n&gt; 1 Ikaia   no        34\n&gt; 2 Oletta  no        88\n&gt; 3 Leriah  no        75\n&gt; 4 Dashay  no        47\n&gt; 5 Tresaun no        56\n\n\n\n\n\nhealth |&gt; count(smoker)\n\n&gt; # A tibble: 1 × 2\n&gt;   smoker     n\n&gt;   &lt;fct&gt;  &lt;int&gt;\n&gt; 1 no         5\n\n\n\n\n\n\n3levels(health$smoker)\n\n\n3\n\nThis dataset only contains non-smokers, but we know that smokers exist; the group of smokers is simply empty.\n\n\n\n\n&gt; [1] \"yes\" \"no\"\n\n\n\n\n   \n\n4health |&gt; count(smoker, .drop = FALSE)\n\n\n4\n\nWe can request count() to keep all the groups, even those not seen in the data by using .drop = FALSE.\n\n\n\n\n&gt; # A tibble: 2 × 2\n&gt;   smoker     n\n&gt;   &lt;fct&gt;  &lt;int&gt;\n&gt; 1 yes        0\n&gt; 2 no         5",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#missing-factors-in-plots",
    "href": "Lectures/CSSS508_Lecture6.html#missing-factors-in-plots",
    "title": "CSSS 508",
    "section": "Missing Factors in Plots",
    "text": "Missing Factors in Plots\nThis sample principle applies when visualizing a factor variable, which will automatically drop levels that don’t have any values. Use drop_values = FALSE in the appropriate scale to display implicit NAs.\n\n\n\n\nggplot(health, aes(x = smoker)) +\n  geom_bar() +\n  scale_x_discrete() + \n  theme_classic(base_size = 22)\n\n\n\n\n\n\n\n\n\n\n\nggplot(health, aes(x = smoker)) +\n  geom_bar() +\n  scale_x_discrete(drop = FALSE) + \n  theme_classic(base_size = 22)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#testing-data-types",
    "href": "Lectures/CSSS508_Lecture6.html#testing-data-types",
    "title": "CSSS 508",
    "section": "Testing Data Types",
    "text": "Testing Data Types\nThere are also functions to test for certain data types:\n\n\nis.numeric(5)\n\n&gt; [1] TRUE\n\nis.character(\"A\")\n\n&gt; [1] TRUE\n\nis.logical(TRUE)\n\n&gt; [1] TRUE\n\nis.infinite(-Inf)\n\n&gt; [1] TRUE\n\nis.na(NA)\n\n&gt; [1] TRUE\n\nis.nan(NaN)\n\n&gt; [1] TRUE",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas",
    "href": "Lectures/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas",
    "title": "CSSS 508",
    "section": "Going deeper into the abyss (aka NAs)",
    "text": "Going deeper into the abyss (aka NAs)\n\n\n\n\n\n\n\nArtwork by @allison_horst",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas-1",
    "href": "Lectures/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas-1",
    "title": "CSSS 508",
    "section": "Going deeper into the abyss (aka NAs)",
    "text": "Going deeper into the abyss (aka NAs)\nA lot has been written about NAs and if they are a feature of your data you’re likely going to have to spend a great deal of time thinking about how they arose1 and if/how they bias your data.\n\n\n\nThe best package for really exploring your NAs is naniar, which provides tidyverse-style syntax for summarizing, visualizing, and manipulating missing data.\n\nIt provides the following for missing data:\n\n\na special data structure\nshorthand and numerical summaries (in variables and cases)\nvisualizations\n\n\n\n\n\n\n\n\n\n\nMissing Completely at Random? Missing at Random? Missing Not at Random? Read more about the differences here.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#naniar-examples",
    "href": "Lectures/CSSS508_Lecture6.html#naniar-examples",
    "title": "CSSS 508",
    "section": "naniar examples",
    "text": "naniar examples\n\n\n\n\n\n\n\n\n\nSee more here.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#visdat-example",
    "href": "Lectures/CSSS508_Lecture6.html#visdat-example",
    "title": "CSSS 508",
    "section": "visdat example",
    "text": "visdat example\n\nlibrary(visdat)\nvis_dat(airquality)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can read more about this package and its functionality here. For an tidy-style approach for imputing missing values check out the simputation package.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#making-vectors",
    "href": "Lectures/CSSS508_Lecture6.html#making-vectors",
    "title": "CSSS 508",
    "section": "Making Vectors",
    "text": "Making Vectors\nIn R, we call a set of values of the same type a vector. We can create vectors using the c() function (“c” for combine or concatenate).\n\nc(1, 3, 7, -0.5)\n\n&gt; [1]  1.0  3.0  7.0 -0.5\n\n\n\nVectors have one dimension: length\n\nlength(c(1, 3, 7, -0.5))\n\n&gt; [1] 4\n\n\n\n\nAll elements of a vector are the same type (e.g. numeric or character)!\n\n\nCharacter data is the lowest denomination so anything mixed with it will be converted to a character.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#generating-numeric-vectors",
    "href": "Lectures/CSSS508_Lecture6.html#generating-numeric-vectors",
    "title": "CSSS 508",
    "section": "Generating Numeric Vectors",
    "text": "Generating Numeric Vectors\nThere are shortcuts for generating numeric vectors:\n\n1:10\n\n&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n1seq(-3, 6, by = 1.75)\n\n\n1\n\nSequence from -3 to 6, increments of 1.75\n\n\n\n\n&gt; [1] -3.00 -1.25  0.50  2.25  4.00  5.75\n\n\n\n\n\n2rep(c(0, 1), times = 3)\n3rep(c(0, 1), each = 3)\n4rep(c(0, 1), length.out = 3)\n\n\n2\n\nRepeat c(0, 1) 3 times.\n\n3\n\nRepeat each element 3 times.\n\n4\n\nRepeat c(0, 1) until the length of the final vector is 3.\n\n\n\n\n&gt; [1] 0 1 0 1 0 1\n&gt; [1] 0 0 0 1 1 1\n&gt; [1] 0 1 0\n\n\n\n\nYou can also assign values to a vector using Base R indexing rules.\n\n\n\nx &lt;- c(3, 6, 2, 9, 5)\nx[6] &lt;- 8\nx\n\n&gt; [1] 3 6 2 9 5 8\n\nx[c(7, 8)] &lt;- c(9, 9)\nx\n\n&gt; [1] 3 6 2 9 5 8 9 9",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#element-wise-vector-math",
    "href": "Lectures/CSSS508_Lecture6.html#element-wise-vector-math",
    "title": "CSSS 508",
    "section": "Element-wise Vector Math",
    "text": "Element-wise Vector Math\nWhen doing arithmetic operations on vectors, R handles these element-wise:\n\nc(1, 2, 3) + c(4, 5, 6)\n\n&gt; [1] 5 7 9\n\n\n\n5c(1, 2, 3, 4)^3\n\n\n5\n\nExponentiation is carried out using the ^ operator.\n\n\n\n\n&gt; [1]  1  8 27 64\n\n\n\nOther common operations: *, /, exp() = \\(e^x\\), log() = \\(\\log_e(x)\\)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#recycling-rules",
    "href": "Lectures/CSSS508_Lecture6.html#recycling-rules",
    "title": "CSSS 508",
    "section": "Recycling Rules",
    "text": "Recycling Rules\nR handles mismatched lengths of vectors by recycling, or repeating, the short vector.\n\n\nx &lt;- c(1, 2, 10, 20)\n6x / 5\n\n\n6\n\nThis is shorthand for: x / c(5, 5, 5, 5)\n\n\n\n\n&gt; [1] 0.2 0.4 2.0 4.0\n\n\n\n\nYou generally only want to recycle scalars, or vectors of length 1. Technically, however, R will recycle any vector that’s shorter in length (and it won’t always give you a warning that that’s what it’s doing, i.e. if the longer vector is not a multiple of the shorter vector).\n\n\n\nx * c(1, 2)\n\n&gt; [1]  1  4 10 40\n\nx * c(1, 2, 3)\n\n&gt; Warning in x * c(1, 2, 3): longer object length is not a multiple of shorter\n&gt; object length\n\n\n&gt; [1]  1  4 30 20",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#recycling-with-logicals",
    "href": "Lectures/CSSS508_Lecture6.html#recycling-with-logicals",
    "title": "CSSS 508",
    "section": "Recycling with Logicals",
    "text": "Recycling with Logicals\nThe same rules apply to logical operations which can lead to unexpected results without warning.\n\nFor example, take this code which attempts to find all flights in January and February:\n\nflights |&gt; \n  mutate(rowID = 1:nrow(flights)) |&gt; \n  relocate(rowID) |&gt;\n7  filter(month == c(1, 2))\n\n\n7\n\nA common mistake is to mix up == with %in%. This code will actually find flights in odd numbered rows that departed in January and flights in even numbered rows that departed in February. Unfortunately there’s no warning because flights has an even number of rows.\n\n\n\n\n&gt; # A tibble: 25,977 × 20\n&gt;    rowID  year month   day dep_time sched_dep_time dep_delay arr_time\n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n&gt;  1     1  2013     1     1      517            515         2      830\n&gt;  2     3  2013     1     1      542            540         2      923\n&gt;  3     5  2013     1     1      554            600        -6      812\n&gt;  4     7  2013     1     1      555            600        -5      913\n&gt;  5     9  2013     1     1      557            600        -3      838\n&gt;  6    11  2013     1     1      558            600        -2      849\n&gt;  7    13  2013     1     1      558            600        -2      924\n&gt;  8    15  2013     1     1      559            600        -1      941\n&gt;  9    17  2013     1     1      559            600        -1      854\n&gt; 10    19  2013     1     1      600            600         0      837\n&gt; # ℹ 25,967 more rows\n&gt; # ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n&gt; #   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n&gt; #   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nTo protect you from this type of silent failure, most tidyverse functions use a stricter form of recycling that only recycles single values. However, when using base R functions like ==, this protection is not built in.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#example-standardizing-data",
    "href": "Lectures/CSSS508_Lecture6.html#example-standardizing-data",
    "title": "CSSS 508",
    "section": "Example: Standardizing Data",
    "text": "Example: Standardizing Data\nLet’s say we had some test scores and we wanted to put these on a standardized scale:\n\\[z_i = \\frac{x_i - \\text{mean}(x)}{\\text{SD}(x)}\\]\n\n\nx &lt;- c(97, 68, 75, 77, 69, 81)\nz &lt;- (x - mean(x)) / sd(x)\nround(z, 2)\n\n&gt; [1]  1.81 -0.93 -0.27 -0.08 -0.83  0.30",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#math-with-missing-values",
    "href": "Lectures/CSSS508_Lecture6.html#math-with-missing-values",
    "title": "CSSS 508",
    "section": "Math with Missing Values",
    "text": "Math with Missing Values\nEven one NA “poisons the well”: You’ll get NA out of your calculations unless you add the extra argument na.rm = TRUE (available in some functions):\n\n\nvector_w_missing &lt;- c(1, 2, NA, 4, 5, 6, NA)\nmean(vector_w_missing)\n\n&gt; [1] NA\n\nmean(vector_w_missing, na.rm = TRUE)\n\n&gt; [1] 3.6",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#subsetting-vectors",
    "href": "Lectures/CSSS508_Lecture6.html#subsetting-vectors",
    "title": "CSSS 508",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nRecall, we can subset a vector in a number of ways:\n\nPassing a single index or vector of entries to keep:\n\n\nfirst_names &lt;- c(\"Andre\", \"Brady\", \"Cecilia\", \"Danni\", \"Edgar\", \"Francie\")\nfirst_names[c(1, 2)]\n\n&gt; [1] \"Andre\" \"Brady\"\n\n\n\n\nPassing a single index or vector of entries to drop:\n\n\nfirst_names[-3]\n\n&gt; [1] \"Andre\"   \"Brady\"   \"Danni\"   \"Edgar\"   \"Francie\"\n\n\n\n\n\nPassing a logical condition:\n\n\n8first_names[nchar(first_names) == 7]\n\n\n8\n\nnchar() counts the number of characters in a character string.\n\n\n\n\n&gt; [1] \"Cecilia\" \"Francie\"\n\n\n\n\n\nPassing a named vector:\n\n\npet_names &lt;- c(dog = \"Lemon\", cat = \"Seamus\")\npet_names[\"cat\"]\n\n&gt;      cat \n&gt; \"Seamus\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrices-two-dimensions",
    "href": "Lectures/CSSS508_Lecture6.html#matrices-two-dimensions",
    "title": "CSSS 508",
    "section": "Matrices: Two Dimensions",
    "text": "Matrices: Two Dimensions\nMatrices extend vectors to two dimensions: rows and columns. We can construct them directly using matrix().\n\nR fills in a matrix column-by-column (not row-by-row!)\n\na_matrix &lt;- matrix(first_names, nrow = 2, ncol = 3)\na_matrix\n\n&gt;      [,1]    [,2]      [,3]     \n&gt; [1,] \"Andre\" \"Cecilia\" \"Edgar\"  \n&gt; [2,] \"Brady\" \"Danni\"   \"Francie\"\n\n\n\n\nSimilar to vectors, you can make assignments using Base R indexing methods.\n\n\n\na_matrix[1, c(1:3)] &lt;- c(\"Hakim\", \"Tony\", \"Eduardo\")\na_matrix\n\n&gt;      [,1]    [,2]    [,3]     \n&gt; [1,] \"Hakim\" \"Tony\"  \"Eduardo\"\n&gt; [2,] \"Brady\" \"Danni\" \"Francie\"\n\n\n\n\nHowever, you can’t add rows or columns to a matrix in this way. You can only reassign already-existing cell values.\n\na_matrix[3, c(1:3)] &lt;- c(\"Lucille\", \"Hanif\", \"June\")\n\n&gt; Error in `[&lt;-`(`*tmp*`, 3, c(1:3), value = c(\"Lucille\", \"Hanif\", \"June\": subscript out of bounds",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#binding-vectors",
    "href": "Lectures/CSSS508_Lecture6.html#binding-vectors",
    "title": "CSSS 508",
    "section": "Binding Vectors",
    "text": "Binding Vectors\nWe can also make matrices by binding vectors together with rbind() (row bind) and cbind() (column bind).\n\n\nb_matrix &lt;- rbind(c(1, 2, 3), c(4, 5, 6))\nb_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    2    3\n&gt; [2,]    4    5    6\n\nc_matrix &lt;- cbind(c(1, 2), c(3, 4), c(5, 6))\nc_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    3    5\n&gt; [2,]    2    4    6",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#subsetting-matrices",
    "href": "Lectures/CSSS508_Lecture6.html#subsetting-matrices",
    "title": "CSSS 508",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nWe subset matrices using the same methods as with vectors, except we index them with [rows, columns]1:\n\na_matrix\n\n&gt;      [,1]    [,2]    [,3]     \n&gt; [1,] \"Hakim\" \"Tony\"  \"Eduardo\"\n&gt; [2,] \"Brady\" \"Danni\" \"Francie\"\n\n\n\n\n9a_matrix[1, 2]\n\n\n9\n\nRow 1, Column 2.\n\n\n\n\n&gt; [1] \"Tony\"\n\n\n\n10a_matrix[1, c(2,3)]\n\n\n10\n\nRow 1, Columns 2 and 3.\n\n\n\n\n&gt; [1] \"Tony\"    \"Eduardo\"\n\n\n\n\nWe can obtain the dimensions of a matrix using dim().\n\ndim(a_matrix)\n\n&gt; [1] 2 3\n\n\n\nLike we learned how to do with dataframes in week 3.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "href": "Lectures/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "title": "CSSS 508",
    "section": "Matrices Becoming Vectors",
    "text": "Matrices Becoming Vectors\nIf a matrix ends up having just one row or column after subsetting, by default R will make it into a vector.\n\n\na_matrix[, 1] \n\n&gt; [1] \"Hakim\" \"Brady\"\n\n\n\n\nYou can prevent this behavior using drop = FALSE.\n\na_matrix[, 1, drop = FALSE] \n\n&gt;      [,1]   \n&gt; [1,] \"Hakim\"\n&gt; [2,] \"Brady\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrix-data-type-warning",
    "href": "Lectures/CSSS508_Lecture6.html#matrix-data-type-warning",
    "title": "CSSS 508",
    "section": "Matrix Data Type Warning",
    "text": "Matrix Data Type Warning\nMatrices can contain numeric, integer, factor, character, or logical. But just like vectors, all elements must be the same data type.\n\n\nbad_matrix &lt;- cbind(1:2, c(\"apple\", \"banana\"))\nbad_matrix\n\n&gt;      [,1] [,2]    \n&gt; [1,] \"1\"  \"apple\" \n&gt; [2,] \"2\"  \"banana\"\n\n\n\n\nIn this case, everything was converted to characters!",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrix-dimension-names",
    "href": "Lectures/CSSS508_Lecture6.html#matrix-dimension-names",
    "title": "CSSS 508",
    "section": "Matrix Dimension Names",
    "text": "Matrix Dimension Names\nWe can access dimension names or name them ourselves:\n\n\nrownames(bad_matrix) &lt;- c(\"First\", \"Last\")\ncolnames(bad_matrix) &lt;- c(\"Number\", \"Name\")\nbad_matrix\n\n&gt;       Number Name    \n&gt; First \"1\"    \"apple\" \n&gt; Last  \"2\"    \"banana\"\n\n\n\n11bad_matrix[ ,\"Name\", drop = FALSE]\n\n\n11\n\ndrop = FALSE maintains the matrix structure; when drop = TRUE (the default) it will be converted to a vector.\n\n\n\n\n&gt;       Name    \n&gt; First \"apple\" \n&gt; Last  \"banana\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrix-arithmetic",
    "href": "Lectures/CSSS508_Lecture6.html#matrix-arithmetic",
    "title": "CSSS 508",
    "section": "Matrix Arithmetic",
    "text": "Matrix Arithmetic\nMatrices of the same dimensions can have math performed element-wise with the usual arithmetic operators:\n\n\nmatrix(c(2, 4, 6, 8),nrow = 2, ncol = 2) / matrix(c(2, 1, 3, 1),nrow = 2, ncol = 2)\n\n&gt;      [,1] [,2]\n&gt; [1,]    1    2\n&gt; [2,]    4    8",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#proper-matrix-math",
    "href": "Lectures/CSSS508_Lecture6.html#proper-matrix-math",
    "title": "CSSS 508",
    "section": "“Proper” Matrix Math",
    "text": "“Proper” Matrix Math\nTo do matrix transpositions, use t().\n\n\nc_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    3    5\n&gt; [2,]    2    4    6\n\ne_matrix &lt;- t(c_matrix)\ne_matrix\n\n&gt;      [,1] [,2]\n&gt; [1,]    1    2\n&gt; [2,]    3    4\n&gt; [3,]    5    6\n\n\n\n\nTo do actual matrix multiplication1 (not element-wise), use %*%.\n\n\n\nf_matrix &lt;- c_matrix %*% e_matrix \nf_matrix\n\n&gt;      [,1] [,2]\n&gt; [1,]   35   44\n&gt; [2,]   44   56\n\n\n\n\n\n\n1. A reminder of how to do matrix multiplication :)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#proper-matrix-math-1",
    "href": "Lectures/CSSS508_Lecture6.html#proper-matrix-math-1",
    "title": "CSSS 508",
    "section": "“Proper” Matrix Math",
    "text": "“Proper” Matrix Math\nTo invert an invertible square matrix1, use solve().\n\n\ng_matrix &lt;- solve(f_matrix)\ng_matrix\n\n&gt;           [,1]      [,2]\n&gt; [1,]  2.333333 -1.833333\n&gt; [2,] -1.833333  1.458333\n\n\n\n\n\n\n\n\n\nA reminder of how to invert a 2x2 square matrix.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "href": "Lectures/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "title": "CSSS 508",
    "section": "Matrices vs. Data.frames and Tibbles",
    "text": "Matrices vs. Data.frames and Tibbles\nAll of these structures display data in two dimensions\n\n\n\n\nmatrix\n\nBase R\nSingle data type allowed\n\n\n\n\ndata.frame\n\nBase R\nStores multiple data types\nDefault for data storage\n\n\n\n\ntibbles\n\ntidyverse\nStores multiple data types\nDisplays nicely\n\n\n\n\n\nIn practice, data.frames and tibbles are very similar!",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#creating-data.frames-or-tibbles",
    "href": "Lectures/CSSS508_Lecture6.html#creating-data.frames-or-tibbles",
    "title": "CSSS 508",
    "section": "Creating data.frames or tibbles",
    "text": "Creating data.frames or tibbles\nWe can create a data.frame or tibble by specifying the columns separately, as individual vectors:\n\n\n\n\ndata.frame(Column1 = c(1, 2, 3),\n           Column2 = c(\"A\", \"B\", \"C\"))\n\n&gt;   Column1 Column2\n&gt; 1       1       A\n&gt; 2       2       B\n&gt; 3       3       C\n\n\n\n\ntibble(Column1 = c(1, 2, 3),\n       Column2 = c(\"A\", \"B\", \"C\"))\n\n&gt; # A tibble: 3 × 2\n&gt;   Column1 Column2\n&gt;     &lt;dbl&gt; &lt;chr&gt;  \n&gt; 1       1 A      \n&gt; 2       2 B      \n&gt; 3       3 C\n\n\n\n\n\nNote: data.frames and tibbles allow for mixed data types!\n\n\nThis distinction leads us to the final data type, of which data.frames and tibbles are a particular subset.\n\n\n\ntibble’s additional advantages are only displaying the first 10 rows and only the columns that will comfortably fit within the parameters of your console space when called (data.frame will display all columns and a certain number of rows depending upon your default max setting - usually this is an overwhelming amount of output, aesthetically confusing, and not very helpful).",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#what-are-lists",
    "href": "Lectures/CSSS508_Lecture6.html#what-are-lists",
    "title": "CSSS 508",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are objects that can store multiple types of data.\n\n\n\nmy_list &lt;- list(first_thing = 1:5,\n                second_thing = matrix(8:11, nrow = 2), \n                third_thing = fct(c(\"apple\", \"pear\", \"banana\", \"apple\", \"apple\")))\nmy_list\n\n&gt; $first_thing\n&gt; [1] 1 2 3 4 5\n&gt; \n&gt; $second_thing\n&gt;      [,1] [,2]\n&gt; [1,]    8   10\n&gt; [2,]    9   11\n&gt; \n&gt; $third_thing\n&gt; [1] apple  pear   banana apple  apple \n&gt; Levels: apple pear banana",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#accessing-list-elements",
    "href": "Lectures/CSSS508_Lecture6.html#accessing-list-elements",
    "title": "CSSS 508",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nYou can access a list element by its name or number in [[ ]], or a $ followed by its name:\n\n\nmy_list[[\"first_thing\"]]\n\n&gt; [1] 1 2 3 4 5\n\nmy_list[[1]]\n\n&gt; [1] 1 2 3 4 5\n\nmy_list$first_thing\n\n&gt; [1] 1 2 3 4 5",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#why-two-brackets",
    "href": "Lectures/CSSS508_Lecture6.html#why-two-brackets",
    "title": "CSSS 508",
    "section": "Why Two Brackets [[ ]]?",
    "text": "Why Two Brackets [[ ]]?\nDouble brackets get the actual element — as whatever data type it is stored as, in that location in the list.\n\n\nstr(my_list[[1]])\n\n&gt;  int [1:5] 1 2 3 4 5\n\n\n\n\nIf you use single brackets to access list elements, you get a list back.\n\nstr(my_list[1])\n\n&gt; List of 1\n&gt;  $ first_thing: int [1:5] 1 2 3 4 5",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#names-and-list-elements",
    "href": "Lectures/CSSS508_Lecture6.html#names-and-list-elements",
    "title": "CSSS 508",
    "section": "names() and List Elements",
    "text": "names() and List Elements\nYou can use names() to get a vector of list element names:\n\n\nnames(my_list)\n\n&gt; [1] \"first_thing\"  \"second_thing\" \"third_thing\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#pluck",
    "href": "Lectures/CSSS508_Lecture6.html#pluck",
    "title": "CSSS 508",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R’s [[ ]] is using pluck() from the tidyverse’s purrr package.\n\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\n\npluck(x, 1) \n\n&gt; [[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[2]]$elt\n&gt; [1] \"foo\"\n\n\n\nThis is the same as same as x[[1]].",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#pluck-1",
    "href": "Lectures/CSSS508_Lecture6.html#pluck-1",
    "title": "CSSS 508",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R’s [[ ]] is using pluck() from the tidyverse’s purrr package.\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\npluck(x, 1, 2) \n\n&gt; [[1]]\n&gt; [1] 1\n&gt; \n&gt; $elt\n&gt; [1] \"foo\"\n\n\n\nThis is the same as x[[1]][[2]].",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#pluck-2",
    "href": "Lectures/CSSS508_Lecture6.html#pluck-2",
    "title": "CSSS 508",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R’s [[ ]] is using pluck() from the tidyverse’s purrr package.\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\npluck(x, 1, 2, \"elt\") \n\n&gt; [1] \"foo\"\n\n\n\nYou can supply names as indices if the vectors are named. This is the same as calling x[[1]][[2]][[\"elt\"]].",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#example-regression-output",
    "href": "Lectures/CSSS508_Lecture6.html#example-regression-output",
    "title": "CSSS 508",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhen you perform linear regression in R, the output is a list!\n\n\nlm_output &lt;- lm(speed ~ dist, data = cars)\nis.list(lm_output)\n\n&gt; [1] TRUE\n\nnames(lm_output)\n\n&gt;  [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n&gt;  [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n&gt;  [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"\n\nlm_output$coefficients\n\n&gt; (Intercept)        dist \n&gt;   8.2839056   0.1655676\n\n\n\n\nWhat does a list object look like?\n\nstr(lm_output)\n\n\n\n&gt; List of 12\n&gt;  $ coefficients : Named num [1:2] 8.284 0.166\n&gt;   ..- attr(*, \"names\")= chr [1:2] \"(Intercept)\" \"dist\"\n&gt;  $ residuals    : Named num [1:50] -4.62 -5.94 -1.95 -4.93 -2.93 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;  $ effects      : Named num [1:50] -108.894 29.866 -0.501 -3.945 -1.797 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"(Intercept)\" \"dist\" \"\" \"\" ...\n&gt;  $ rank         : int 2\n&gt;  $ fitted.values: Named num [1:50] 8.62 9.94 8.95 11.93 10.93 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;  $ assign       : int [1:2] 0 1\n&gt;  $ qr           :List of 5\n&gt;   ..$ qr   : num [1:50, 1:2] -7.071 0.141 0.141 0.141 0.141 ...\n&gt;   .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. ..$ : chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;   .. .. ..$ : chr [1:2] \"(Intercept)\" \"dist\"\n&gt;   .. ..- attr(*, \"assign\")= int [1:2] 0 1\n&gt;   ..$ qraux: num [1:2] 1.14 1.15\n&gt;   ..$ pivot: int [1:2] 1 2\n&gt;   ..$ tol  : num 1e-07\n&gt;   ..$ rank : int 2\n&gt;   ..- attr(*, \"class\")= chr \"qr\"\n&gt;  $ df.residual  : int 48\n&gt;  $ xlevels      : Named list()\n&gt;  $ call         : language lm(formula = speed ~ dist, data = cars)\n&gt;  $ terms        :Classes 'terms', 'formula'  language speed ~ dist\n&gt;   .. ..- attr(*, \"variables\")= language list(speed, dist)\n&gt;   .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n&gt;   .. .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. .. ..$ : chr [1:2] \"speed\" \"dist\"\n&gt;   .. .. .. ..$ : chr \"dist\"\n&gt;   .. ..- attr(*, \"term.labels\")= chr \"dist\"\n&gt;   .. ..- attr(*, \"order\")= int 1\n&gt;   .. ..- attr(*, \"intercept\")= int 1\n&gt;   .. ..- attr(*, \"response\")= int 1\n&gt;   .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n&gt;   .. ..- attr(*, \"predvars\")= language list(speed, dist)\n&gt;   .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n&gt;   .. .. ..- attr(*, \"names\")= chr [1:2] \"speed\" \"dist\"\n&gt;  $ model        :'data.frame':    50 obs. of  2 variables:\n&gt;   ..$ speed: num [1:50] 4 4 7 7 8 9 10 10 10 11 ...\n&gt;   ..$ dist : num [1:50] 2 10 4 22 16 10 18 26 34 17 ...\n&gt;   ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language speed ~ dist\n&gt;   .. .. ..- attr(*, \"variables\")= language list(speed, dist)\n&gt;   .. .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n&gt;   .. .. .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. .. .. ..$ : chr [1:2] \"speed\" \"dist\"\n&gt;   .. .. .. .. ..$ : chr \"dist\"\n&gt;   .. .. ..- attr(*, \"term.labels\")= chr \"dist\"\n&gt;   .. .. ..- attr(*, \"order\")= int 1\n&gt;   .. .. ..- attr(*, \"intercept\")= int 1\n&gt;   .. .. ..- attr(*, \"response\")= int 1\n&gt;   .. .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n&gt;   .. .. ..- attr(*, \"predvars\")= language list(speed, dist)\n&gt;   .. .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n&gt;   .. .. .. ..- attr(*, \"names\")= chr [1:2] \"speed\" \"dist\"\n&gt;  - attr(*, \"class\")= chr \"lm\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-structures-in-r-overview",
    "href": "Lectures/CSSS508_Lecture6.html#data-structures-in-r-overview",
    "title": "CSSS 508",
    "section": "Data Structures in R Overview",
    "text": "Data Structures in R Overview",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#data-structures-in-r-overview-1",
    "href": "Lectures/CSSS508_Lecture6.html#data-structures-in-r-overview-1",
    "title": "CSSS 508",
    "section": "Data Structures in R Overview",
    "text": "Data Structures in R Overview",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#matrices-and-lists",
    "href": "Lectures/CSSS508_Lecture6.html#matrices-and-lists",
    "title": "CSSS 508",
    "section": "Matrices and Lists",
    "text": "Matrices and Lists\n\nWrite code to create the following matrix:\n\n\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,] \"A\"  \"B\"  \"C\" \n&gt; [2,] \"D\"  \"E\"  \"F\"\n\n\n\nWrite a line of code to extract the second column. Ensure the output is still a matrix.\n\n\n\n&gt;      [,1]\n&gt; [1,] \"B\" \n&gt; [2,] \"E\"\n\n\n\nComplete the following sentence: “Lists are to vectors, what data frames are to…”\nCreate a list that contains 3 elements:\n\nten_numbers (integers between 1 and 10)\nmy_name (your name as a character)\nbooleans (vector of TRUE and FALSE alternating three times)",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#answers",
    "href": "Lectures/CSSS508_Lecture6.html#answers",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n1. Write code to create the following matrix:\n\nmatrix_test &lt;- matrix(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), nrow = 2, byrow = TRUE)\nmatrix_test\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,] \"A\"  \"B\"  \"C\" \n&gt; [2,] \"D\"  \"E\"  \"F\"\n\n\n\n2. Write a line of code to extract the second column. Ensure the output is still a matrix.\n\nmatrix_test[ ,2, drop = FALSE]\n\n&gt;      [,1]\n&gt; [1,] \"B\" \n&gt; [2,] \"E\"",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture6.html#answers-1",
    "href": "Lectures/CSSS508_Lecture6.html#answers-1",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n3. Complete the following sentence: “Lists are to vectors, what data frames are to…Matrices!1”\n\n4. Create a list that contains 3 elements: So many ways to do this! Here’s one example.\n\nthings_I_like &lt;- list(\n  numbers = 8,\n  animals = c(\"birds\", \"frogs\", \"lizards\"),\n  foods = rep(\"pasta\", 10))\nthings_I_like\n\n&gt; $numbers\n&gt; [1] 8\n&gt; \n&gt; $animals\n&gt; [1] \"birds\"   \"frogs\"   \"lizards\"\n&gt; \n&gt; $foods\n&gt;  [1] \"pasta\" \"pasta\" \"pasta\" \"pasta\" \"pasta\" \"pasta\" \"pasta\" \"pasta\" \"pasta\"\n&gt; [10] \"pasta\"\n\n\n\nLists and data frames can contain mixed data types, while vectors and matrices can only contain one data type. Additionally, lists and vectors are technically one dimension while matrices and dataframes are two dimensions.",
    "crumbs": [
      "Lectures",
      "Lecture 6: Data structures and types"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#title-slide",
    "href": "Lectures/CSSS508_Lecture3.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Workflow & Reproducibility\nCS&SS 508 • Lecture 3\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#key-takeaways",
    "href": "Lectures/CSSS508_Lecture3.html#key-takeaways",
    "title": "CSSS 508",
    "section": "Key takeaways",
    "text": "Key takeaways\n\nHow you write code and how you organize your files affect how easy/hard it is to get your code working and understand it when you look back at it in 6 months\nThere’s no one right way, but there are better and worse ways\nBe kind to Future You and to others who read/use your code\nLearn along the way! You know enough, and you will never know it all",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#general-coding-vocab",
    "href": "Lectures/CSSS508_Lecture3.html#general-coding-vocab",
    "title": "CSSS 508",
    "section": "General coding vocab",
    "text": "General coding vocab\n\n\nR (coding language) vs Quarto (combines formatted text, code, outputs into documents) vs RStudio (application or IDE for viewing, editing and running R and Quarto files)\n\nMarkup language formats text in a structured way\n\nexamples: (confusingly) Markdown, YAML or HTML\nR Markdown and Quarto use markup languages to format the documents they make\nWhen you type text, headers, outlines, and the YAML header in a Quarto document, that’s all markup language\n\n\n\nPackage: code and/or data bundled together\n\nInstalling vs loading\nexamples: gapminder, dslabs, tidyverse (actually a suite of packages that allows you to load those packages all at once)\n\n\n\nFunction: takes inputs/arguments (inside parentheses), does something, and produces outputs\n\ninstructions/recipes/tools\nlooks like myfunction(argument1, argument2)\n\nexamples: mean(gapminder$fertility, na.rm = TRUE), sum(1:5), library(\"tidyverse\"), getwd()\n\n\n\n\nObject: named data/values in R\n\n“things” or data\nexamples: the code x = 1:5 creates an object called x with five elements; gapminder is a data.frame object in the gapminder package\n\n\n\nComment: any code after a comment character (# in R) on a given line is ignored by R\n\nUseful for commenting out code temporarily that you don’t want to run right now but you might want later\nUseful for writing notes/explanations to yourself and others",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#rstudio-vocab",
    "href": "Lectures/CSSS508_Lecture3.html#rstudio-vocab",
    "title": "CSSS 508",
    "section": "RStudio Vocab",
    "text": "RStudio Vocab\n\n\nConsole: where code is run in your RStudio window\n\nplace to interactively run code\nwhen you run code from a .R script or .qmd file, it might appear here (depends on settings)\n\ncommand-line interface with the command prompt &gt; to tell you it’s ready to receive code\na + tells you R is expecting more code before it runs what you typed (probably you forgot a parenthesis or entered incomplete code)\n\n\n\nEnvironment refers to two things:\n\nEnvironment panel where your objects show up\nA “session” or “instance” (a copy) of R with any packages, objects etc. that you’ve created or loaded since you opened that session\nThe console and environment and other RStudio panels reflect your working environment, the interactive session you’re working in\nWhen you render a .qmd document, it opens a fresh blank R session/environment in the background and runs your .qmd code there (this is why you need to load packages and data within the .qmd file, not just within RStudio, before you render the qwmd file)\n\n\n\nSource (recommended) vs Visual mode in RStudio",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#quarto-vocab",
    "href": "Lectures/CSSS508_Lecture3.html#quarto-vocab",
    "title": "CSSS 508",
    "section": "Quarto Vocab",
    "text": "Quarto Vocab\n\n\nCode chunks: sections of a Quarto document that will be interpreted as code when the document is rendered\n\nChunk options: YAML settings at the start of a code chunk that determine something about how the chunk runs or appears in the final rendered document\n\nInline R code: R code surrounded by backticks and nestled directly into the text of a Quarto document; it is interpreted (and run) as code instead of text when the document is rendered and replaced with its output value.\n\nOther vocabulary you’d like to review?",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#why-talk-about-style",
    "href": "Lectures/CSSS508_Lecture3.html#why-talk-about-style",
    "title": "CSSS 508",
    "section": "Why talk about style?",
    "text": "Why talk about style?\nThere are honestly no hard, fast rules about what is the correct code. You can produce all styles of code that will run and get you your desired results.\nHowever, style is like grammar. Using consistent and readable style makes it easier and faster…\n\nFor you to write and read your own code\nFor other people to read your code\nFor you and other people to troubleshoot problems with your code\n\nYou can read more about the specific style we’re using in this class here.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#an-example-lab-3.1",
    "href": "Lectures/CSSS508_Lecture3.html#an-example-lab-3.1",
    "title": "CSSS 508",
    "section": "An example (Lab 3.1)",
    "text": "An example (Lab 3.1)\nHere are two versions of the same code. Discuss with a partner: What are the differences? Which is easier to read, and why specifically? How could you further improve the code?\n\n\nVersion 1\nVersion 2\n\n\n\n\nlibrary(gapminder)\nlibrary(tidyverse)\n\nstr(gapminder)\n\nChina &lt;- filter(gapminder, country == \"China\")\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal(base_size = 18)\n\n\n\n\nlibrary(gapminder)\n\n\nlibrary( tidyverse )\nstr(gapminder )\ndat&lt;-filter(gapminder,country==\"China\")\nggplot(data=dat, \n    aes(x = year, y =lifeExp)) +    geom_point(color=\"red\",size=3) +\n\n  labs(x = \"Year\" , y= \"Life expectancy\", title = \"Life expectancy in China\" ) + theme_minimal(base_size = 18)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#naming-objects",
    "href": "Lectures/CSSS508_Lecture3.html#naming-objects",
    "title": "CSSS 508",
    "section": "Naming Objects",
    "text": "Naming Objects\nIt’s good practice to name objects (and oftentimes variables) using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#spacing",
    "href": "Lectures/CSSS508_Lecture3.html#spacing",
    "title": "CSSS 508",
    "section": "Spacing",
    "text": "Spacing\nFor readability you’ll want to put spaces around all mathematical operators1 (i.e. +, -, ==, &lt;, etc.) as well as the assignment operator (&lt;-).\n\n# Code goals: \nz &lt;- (a + b)^2 / d\nmean(x, na.rm = TRUE)\n\n# Code foul: \nz&lt;-( a+b ) ^ 2/d\nmean (x ,na.rm=TRUE)\n\n\nTo make code easier to skim quickly it’s alright to add extra space for better alignment.\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\nexcept for ^",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#pipes",
    "href": "Lectures/CSSS508_Lecture3.html#pipes",
    "title": "CSSS 508",
    "section": "Pipes",
    "text": "Pipes\nAs you begin to use more functions, sequentially, it can start to get unclear what’s happening when, and to what.\n\nmedian(sqrt(log(mean(gapminder$pop))))\n\n\nWith nested functions, like those above, you need to read the order of operations inside out, which is a bit awkward. It becomes even more confusing the more function calls you have, especially when they have multiple arguments each.\n\n\nEnter the pipe1: |&gt;\nPipes read “left to right” which is much more intuitive!\n\ngapminder$pop |&gt; mean() |&gt; log() |&gt; sqrt() |&gt; median()\n\n\n\nThe above code takes what’s on the left-hand side of |&gt; and gives it as the first unnamed argument to the first function (mean()).\nThe result of that function call is then “piped” to the first unnamed argument of the second function (log())…\n\n\n\nA component of programming which allows us to break a problem into a number of steps, each of which is straightforward and easy to understand.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#pipes-1",
    "href": "Lectures/CSSS508_Lecture3.html#pipes-1",
    "title": "CSSS 508",
    "section": "Pipes",
    "text": "Pipes\nAs you can see, pipes allow us to “chain” many function calls together easily.\n\nThe so-called “native pipe” (i.e. built into base R) is relatively new. Before this, the pipe was a function from the magrittr package that looks like this: %&gt;%.\n\n\nThis latter version continues to work but has a different functionality than the new, native pipe.\n\n\nMost importantly, while both the magrittr pipe and the native pipe take the LHS (left-hand side) and “pipe” it to the RHS (right-hand side), they operate differently when it comes to explicitly specifying which argument of the RHS to pipe the LHS into.\n\n\n\na &lt;- c(\"Z\", NA, \"C\", \"G\", \"A\")\n# magrittr pipe\na %&gt;% gsub('A', '-', x = .)\n\n# native pipe\na |&gt; gsub('A','-', x = _) # _ is the placeholder for |&gt; \na |&gt; gsub(pattern = 'A', replacement = '-') # leaving the \"piped\" argument as the only unnamed argument also works \na |&gt; (\\(placeholder) gsub('A', '-', x = placeholder))() # using an anonymous function call allows you to be explicit while specifying your own placeholder\n\n\n\n\nYou can read more about the differences between |&gt; and %&gt;% here and anonymous functions here. Code above comes from responses to this stackoverflow post.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#pipes-2",
    "href": "Lectures/CSSS508_Lecture3.html#pipes-2",
    "title": "CSSS 508",
    "section": "Pipes",
    "text": "Pipes\nSome good syntax practices:\n\n\nYou should always put a space before |&gt; and it should usually be the last thing on a line.\n\nNew functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you if you hit return after a pipe)\nNamed arguments within a function should also get their own line\n\n\n\n# code goals\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# code fouls\nflights |&gt; group_by(tailnum) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "href": "Lectures/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "title": "CSSS 508",
    "section": "Selecting the native pipe",
    "text": "Selecting the native pipe\nThe |&gt; is recommended over %&gt;% simply because it’s much simpler to use and it’s always available (%&gt;% relied on the magrittr package which was a dependency of tidyverse packages).\n\nYou’ll need to specify to R that you want to enable its usage by going to Tools &gt; Global Options &gt; Code. Within the “Editing” Tab there is an option to “Use native pipe operator, |&gt;”. Check it!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard Shortcut\n\n\nTo insert a pipe (with spaces) quickly: Ctrl+Shift+M (Windows & Linux OS) Shift+Command+M (Mac)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-1",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-1",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-2",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-2",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-3",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-3",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-4",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-4",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nCode highlight style",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-5",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-5",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nPane layout",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#other-formatting-options-6",
    "href": "Lectures/CSSS508_Lecture3.html#other-formatting-options-6",
    "title": "CSSS 508",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nMarkdown options\n\nOutput preview\nInline output",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#styling-existing-code",
    "href": "Lectures/CSSS508_Lecture3.html#styling-existing-code",
    "title": "CSSS 508",
    "section": "Styling existing code",
    "text": "Styling existing code\nImagine you’ve inherited a bunch of code from someone else and NOTHING is styled in the tidyverse way you’ve become accustomed. Or, you’ve dabbled in R before and you have some old code that is all over the place, with respect to styling.\n\nThanks to Lorenz Walthert there’s a package for that! Using the styler package you can automatically apply the tidyverse style guide standards to various filetypes (.R, .qmd, .Rmd, etc.) or even entire projects.\n\n\nHave a style or variation of the tidyverse style that you prefer? You can specify that in the package as well. Use the keyboard shortcut Cmd/Ctl + Shift + P and search for “styler” to see all the options available.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#r-scripts",
    "href": "Lectures/CSSS508_Lecture3.html#r-scripts",
    "title": "CSSS 508",
    "section": ".R scripts",
    "text": ".R scripts\nWe’ve been working with Quarto documents but you’ll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk.\n\n\n\nWhy would you prefer an .R file over a .qmd file?\nWhen might you use a .qmd file?\n\n\n\n\nYou just need to run code, without the need for accompanying text output and plots in the same document. Examples include:\n\nReading in and cleaning/manipulating your data before analysis\nWriting functions you’ll use throughout your project\nGetting descriptive statistics/making descriptive plots of data\nRunning models and generating tables/plots of their results\n\n\n\n\n\n\nHomework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e. tables, statistics, visualizations)\nAcademic articles\nPresentations for class, conferences, talks, etc.\nTheses/dissertations\nInteractive visualizations (i.e. widgets)\nBuilding your own website",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#file-naming",
    "href": "Lectures/CSSS508_Lecture3.html#file-naming",
    "title": "CSSS 508",
    "section": "File naming",
    "text": "File naming\nFile names should:\n\n\nbe machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\nbe human readable: use file names to describe what’s in the file.\nplay well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#organization-and-portability",
    "href": "Lectures/CSSS508_Lecture3.html#organization-and-portability",
    "title": "CSSS 508",
    "section": "Organization and Portability",
    "text": "Organization and Portability\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\n\n\nGood Example directory\nBad Example directory\n\n\n\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       data_processed.RData\n     raw/\n       data_core.csv\n       data_supplementary.csv\n   docs/\n     paper_asa.qmd\n     paper_journal.qmd\n   syntax/\n     01-functions.R\n     02-cleaning.R\n     03_merging.R\n     04-exploratory.R\n     05-models.R\n     06-visualizations.R\n   visuals/ \n     descriptive.png\n     heatmap.png\n     predicted_probabilities.png\n\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\nVisualizations are in visuals\n\nThe readme.md describes the project\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive\nNumbering scripts makes it clear in which order they should be run.\n\n\n\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#working-directory",
    "href": "Lectures/CSSS508_Lecture3.html#working-directory",
    "title": "CSSS 508",
    "section": "Working directory",
    "text": "Working directory\nYour working directory is where R will look for any files that you ask it to load and where it’ll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you’re working within.\n\nYou can ask R what your current working directory is by running getwd() (get working directory).\n\n\n\ngetwd()\n\n\n\n[1] \"/Users/jessicakunke/Documents/UW/UW_Year5_Q3_Spring2025/CSSS508-Spring2025/Lectures\"\n\n\nYou can see above that this lecture was created in a “Lectures” folder within a folder for this class, which is in a folder for this quarter, and so on.\n\n\nWhile you can technically set your working directory using setwd() (set working directory) and giving R a filepath, in the name of reproducible research DO NOT DO THIS! I strongly advise an alternative: RStudio Projects.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#projects",
    "href": "Lectures/CSSS508_Lecture3.html#projects",
    "title": "CSSS 508",
    "section": "Projects",
    "text": "Projects\nA “project” is RStudio’s built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e. you can send a project folder to someone and they will be able to run it on their local machine\n\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "href": "Lectures/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "title": "CSSS 508",
    "section": "Creating an RStudio Project",
    "text": "Creating an RStudio Project\n\n\n\n\n\n\n\nYou can create a project by clicking\n\n\nFile &gt; New Project…\n\n\n    in the upper-left corner of RStudio\nthe dropdown menu in the upper-right corner of RStudio and selecting New Project…",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#workflow-versus-product",
    "href": "Lectures/CSSS508_Lecture3.html#workflow-versus-product",
    "title": "CSSS 508",
    "section": "Workflow versus Product",
    "text": "Workflow versus Product\nTo summarize Jenny Bryan, one should separate workflow (i.e. your personal tastes and habits) from product (i.e. the logic and output that is the essence of your project).\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. R/RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProduct\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\nEach data analysis (or course using R) should be organized as a project.\n\nProjects should NOT modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#portability",
    "href": "Lectures/CSSS508_Lecture3.html#portability",
    "title": "CSSS 508",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow.\n\n\nDo NOT:\nDo:\n\n\n\n\nUse setwd().\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() anywhere but in your console.\nUse rm(list=ls()) anywhere but in your console.\n\n\n\n\n\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "href": "Lectures/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "title": "CSSS 508",
    "section": "PSA: setwd() and rm(list=ls())\n",
    "text": "PSA: setwd() and rm(list=ls())\n\n\n\n\n\n\n\n\n\nsetwd()\n\n\nSetting your working directory using setwd() makes it impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\n\n\n\n\n\n\n\n\n\n\n\nrm(list=ls())\n\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e. loaded packages, options set to non-defaults, the working directory) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#file-paths",
    "href": "Lectures/CSSS508_Lecture3.html#file-paths",
    "title": "CSSS 508",
    "section": "File paths",
    "text": "File paths\nA file path specifies the location of a file in a computer’s file system structure. They can be used to locate files and web resources. Some important things to note:\n\n\nFor file systems, each level in the hierarchy is a directory\n\nFor URLs, each level in the hierarchy is a page.\n\n\nA path is a string of characters which specifies a unique location in a directory or page hierarchy.\nDifferent sections of the path are separated by a path separator, such as a forward slash (/).\n\nThese different sections represent the separate directories or pages in the hierarchy.\n\n\nIn Unix-based operating systems, such as Linux or macOS, the path separator is a forward slash (/).\n\nIn Windows, the path separator is a back slash (\\).\nURLs follow a standard format that always uses a forward slash (/) as the path separator regardless of the operating system.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "href": "Lectures/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "title": "CSSS 508",
    "section": "Absolute Versus Relative Paths",
    "text": "Absolute Versus Relative Paths\n\n\nAbsolute\nRelative\n\n\n\nSpecifies the location of a file from the root directory in the file system structure. They are also called “full file paths” or “full paths.”\n\n\"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\nIn Linux, the ~ is commonly used to represent a user’s home directory, i.e.:\n\n\"~/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\n\nSpecifies the location of a file in the same folder or on the same server. In other words, a relative file path specifies a location of a file that is relative to the current directory.\n\n\"./CSSS508_Lecture3.qmd\"` or `\"CSSS508_Lecture3.qmd\"\n\n\n\nRelative file paths use a dot notation at the start of the path, followed by a path separator and the location of the file.\n\nA single dot (.) indicates the current directory (as shown above)\nA double dot (..) indicates the parent directory.\n\n\n\nFor example, if I wanted to reference the syllabus (which is in the main project folder CSSS508) from my current folder Lecture3 I would write:\n\n\"../../syllabus.qmd\"",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#paths-and-projects",
    "href": "Lectures/CSSS508_Lecture3.html#paths-and-projects",
    "title": "CSSS 508",
    "section": "Paths and Projects",
    "text": "Paths and Projects\nWhen you work in an RStudio Project your working directory is the project folder.\n\nIf you are working on a R script or qmd file in a subfolder of this project, the working directory of that file will be its subfolder (not the project folder.\n\n\nKeep this in mind when you’re writing code and testing it interactively! Your current working directory will be the project folder when running code interactively even if you’re writing code for a qmd that has a subfolder as the working directory.\n\n\n\nThis is only relevant when using file paths (obviously). The most common uses of file paths in an R script or qmd is to read in or write data, and to save plots and tables.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#divide-and-conquer",
    "href": "Lectures/CSSS508_Lecture3.html#divide-and-conquer",
    "title": "CSSS 508",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren’t impractically slow.\nAlso good for loading project-specific functions.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#the-way-of-many-files",
    "href": "Lectures/CSSS508_Lecture3.html#the-way-of-many-files",
    "title": "CSSS 508",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\n\nIf you need to make changes, you don’t need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g. converted to an appendix of an article)\nIt is the only way to build a proper pipeline for a project.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#pipelines",
    "href": "Lectures/CSSS508_Lecture3.html#pipelines",
    "title": "CSSS 508",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline…\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means…\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#example-pipeline",
    "href": "Lectures/CSSS508_Lecture3.html#example-pipeline",
    "title": "CSSS 508",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency — something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#section",
    "href": "Lectures/CSSS508_Lecture3.html#section",
    "title": "CSSS 508",
    "section": "",
    "text": "If you haven’t already, go to Tools &gt; Global Options and adjust your settings (i.e. General, Code &gt; Editing, and Code &gt; Display) to those recommended in the lecture and any others that you’d like to change (i.e. Appearance, Pane Layout, or R Markdown)\nRestyle the following pipelines following the guidelines discussed in lecture:\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens? How can you get to the same place using the menus?\nTweak each of the following R commands so that they run correctly:\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\nWhat might be a good way to organize your homework assignments for this class?",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nClear .RData, Never save",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-1",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-1",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nNative pipe",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-2",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-2",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nHighlight function calls; preview colors; rainbow parentheses",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-3",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-3",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nCode appearance",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-4",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-4",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nPane Layout",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-5",
    "href": "Lectures/CSSS508_Lecture3.html#solution-1.-adjust-settings-5",
    "title": "CSSS 508",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nMarkdown Preferences",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-2.-readable-code-style",
    "href": "Lectures/CSSS508_Lecture3.html#solution-2.-readable-code-style",
    "title": "CSSS 508",
    "section": "Solution: 2. Readable code style",
    "text": "Solution: 2. Readable code style\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  group_by(year, month, day) |&gt; \n  summarize(\n    n = n(),\n    delay = mean(arr_delay, na.rm = TRUE)\n    ) |&gt; \n  filter(n &gt; 10)\n\nflights |&gt; \n  filter(carrier == \"UA\", dest %in% c(\"IAH\", \"HOU\"), \n         sched_dep_time &gt; 0900, sched_arr_time &lt; 2000) |&gt;\n  group_by(flight) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE), \n    cancelled = sum(is.na(arr_delay)), \n    n = n() \n    ) |&gt; \n  filter(n &gt; 10)",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-3.-option-shift-k-alt-shift-k",
    "href": "Lectures/CSSS508_Lecture3.html#solution-3.-option-shift-k-alt-shift-k",
    "title": "CSSS 508",
    "section": "Solution: 3. Option + Shift + K / Alt + Shift + K\n",
    "text": "Solution: 3. Option + Shift + K / Alt + Shift + K\n\n\n\n\n\n\n\nYou can find the same quick reference pop-up by clicking Tools &gt; Keyboard Shortcuts Help.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-4.-keyboard-shortcut",
    "href": "Lectures/CSSS508_Lecture3.html#solution-4.-keyboard-shortcut",
    "title": "CSSS 508",
    "section": "Solution: 4. Keyboard shortcut",
    "text": "Solution: 4. Keyboard shortcut\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\n\n\nlibary(tidyverse)\n\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#solution-5.-organizing-a-class",
    "href": "Lectures/CSSS508_Lecture3.html#solution-5.-organizing-a-class",
    "title": "CSSS 508",
    "section": "Solution: 5. Organizing a class",
    "text": "Solution: 5. Organizing a class\n\n\n\n\n\nCreate a folder for this class on a computer/system that gets backed up regularly\nEither the class itself is an RStudio project or each homework assignment subfolder is a separate project\nEverything within each homework assignment project gets saved into that specific folder (or a subfolder of that folder)\nAnything required for each homework assignment (e.g. downloaded data) is saved into its project-specific folder\n\n\n\n\n\nCSSS508/\n   Homeworks/\n     HW1/\n       homework1.qmd\n       homework1.html\n     HW2/\n       homework2.qmd\n       homework2.html\n     HW3/\n       homework3.qmd\n       homework3.html\n     HW4/\n       homework4.qmd\n       homework4.html\n       data.csv\n     HW5/\n       homework5.qmd\n       homework5.html\n         data/\n           data_raw.csv\n           data_processed.Rdata\n     HW6/\n     HW7/\n     HW8/\n     HW9/",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#why-reproducibility",
    "href": "Lectures/CSSS508_Lecture3.html#why-reproducibility",
    "title": "CSSS 508",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\n\nReplication is running a new study to show if and how results of a prior study hold.\n\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong… and in fact reproducibility makes proving a study wrong much easier.\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn’t reproducible can only be trusted on faith.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#reproducibility-definitions",
    "href": "Lectures/CSSS508_Lecture3.html#reproducibility-definitions",
    "title": "CSSS 508",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\n\n\nEmpirical: Repeatability in data collection.\n\nStatistical: Verification with alternate methods of inference.\n\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#computational-reproducibility",
    "href": "Lectures/CSSS508_Lecture3.html#computational-reproducibility",
    "title": "CSSS 508",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\n\n\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\n\nVersion Control1\n\nDocuments the research process.\nPrevents losing work and facilitates sharing.\n\n\n\n\nWe’ll come back to this on the last week of class.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#levels-of-reproducibility",
    "href": "Lectures/CSSS508_Lecture3.html#levels-of-reproducibility",
    "title": "CSSS 508",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n\n“Read the article”\nShared data with documentation\nShared data and all code\nInteractive document\nResearch compendium\nDocker compendium: Self-contained ecosystem\n\n\n\n\nWe’ll briefly discuss research compendiums, such as Docker, during the last lecture of class as well.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#interactive-documents",
    "href": "Lectures/CSSS508_Lecture3.html#interactive-documents",
    "title": "CSSS 508",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents — like Quarto docs — combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\n\nR: Quarto\n\nPython: Jupyter Notebooks",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "href": "Lectures/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "title": "CSSS 508",
    "section": "Selecting from vectors with [\n",
    "text": "Selecting from vectors with [\n\n\n\nGiven a vector of values:\n\nx &lt;- c(a = \"one\", \n       b = NA, \n       c = \"two\", \n       d = \"three\", \n       e = \"four\", \n       f = NA, \n       g = NA, \n       h = \"five\")\n\n\nYou can select from the vector\n\n\n# with positive integers\nx[c(3, 1, 5)]\n\n\n\n     c      a      e \n \"two\"  \"one\" \"four\" \n\n\n\n\n\n# even repeated values\nx[c(3, 1, 1, 5, 3)]\n\n\n\n     c      a      a      e      c \n \"two\"  \"one\"  \"one\" \"four\"  \"two\" \n\n\n\n\n\n# with negative integers\nx[c(-2, -6, -7)]\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n# with a logical vector\nx[!is.na(x)]\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n# or with a named vector\nx[c(\"c\", \"h\")]\n\n\n\n     c      h \n \"two\" \"five\"",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "href": "Lectures/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "title": "CSSS 508",
    "section": "Selecting from dataframes with [\n",
    "text": "Selecting from dataframes with [\n\nYou can select rows and columns from dataframes with df[rows, cols].\n\n\n\ndf &lt;- tibble(\n  x = 1:3, \n  y = c(\"a\", \"e\", \"f\"), \n  z = runif(3) # defaults: min = 0, max = 1\n)\n\ndf\n\n\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 a     0.278\n2     2 e     0.265\n3     3 f     0.138\n\n\n\n\n\n# Select first row and second column\ndf[1, 2]\n\n\n\n# A tibble: 1 × 1\n  y    \n  &lt;chr&gt;\n1 a    \n\n\n\n\n\n# Select all rows and columns x and y\ndf[, c(\"x\" , \"y\")]\n\n\n\n# A tibble: 3 × 2\n      x y    \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 e    \n3     3 f    \n\n\n\n\n\n# Select rows where `x` is greater than 1 and all columns\ndf[df$x &gt; 1, ]\n\n\n\n# A tibble: 2 × 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     2 e     0.265\n2     3 f     0.138",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "href": "Lectures/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "title": "CSSS 508",
    "section": "\ndata.frame() vs. tibble()\n",
    "text": "data.frame() vs. tibble()\n\nTibbles are the tidyverse version of a base R dataframe. Usually you can use them interchangably without issue but they have slightly different behavior that’s important to know about when indexing in this way.\n\nIf df is a data.frame, then df[, cols] will return a vector if col selects a single column and a data frame if it selects more than one column.\n\ndf1 &lt;- data.frame(x = 1:3)\ndf1[, \"x\"]\n\n\n\n[1] 1 2 3\n\n\n\n\nIf df is a tibble, then [ will always return a tibble.\n\ndf2 &lt;- tibble(x = 1:3)\ndf2[, \"x\"]\n\n\n\n# A tibble: 3 × 1\n      x\n  &lt;int&gt;\n1     1\n2     2\n3     3\n\n\n\n\nOne way to avoid this ambiguity with data.frames is to explicitly specify drop = FALSE:\n\ndf1[, \"x\" , drop = FALSE]\n\n\n\n  x\n1 1\n2 2\n3 3",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "href": "Lectures/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "title": "CSSS 508",
    "section": "Selecting from dataframes with [[ and $\n",
    "text": "Selecting from dataframes with [[ and $\n\n[, which selects many elements, is paired with [[ and $, which extract a single element.\n\n\n\ntb &lt;- tibble(\n  x = 1:4,\n  y = c(10, 4, 1, 21)\n)\n\ntb\n\n\n\n# A tibble: 4 × 2\n      x     y\n  &lt;int&gt; &lt;dbl&gt;\n1     1    10\n2     2     4\n3     3     1\n4     4    21\n\n\n\n\n[[ can access by position or by name:\n\n# by position\ntb[[1]]\n\n\n\n[1] 1 2 3 4\n\n\n\n\n\n# by name\ntb[[\"x\"]]\n\n\n\n[1] 1 2 3 4\n\n\n\n\n$ is specialized for access by name:\n\ntb$x\n\n\n\n[1] 1 2 3 4\n\n\n\n\nThey can also be used to create new columns.\n\ntb$z &lt;- tb$x + tb$y\ntb\n\n\n\n# A tibble: 4 × 3\n      x     y     z\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    10    11\n2     2     4     6\n3     3     1     4\n4     4    21    25",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture3.html#getting-help",
    "href": "Lectures/CSSS508_Lecture3.html#getting-help",
    "title": "CSSS 508",
    "section": "Getting Help",
    "text": "Getting Help\nOne of the most difficult things as a beginner in R (or any language tbh) is not always knowing what to ask to solve your issue. Being in this class is a great first step! Some other useful tools:\n\n\n\nGoogle\n\nAdding R to your query is basic but useful and often overlooked. Including the package name, if you’re using one, is another. Finally, what is it you want to do? For example “R dplyr create new variable based on value of another.”\nCopy and pasting error messages is also helpful!\n\n\n\nStackOverflow\n\nMany of your Google queries will take you here anyways so you might try going directly to the source! Filter by R and make sure to include a reprex so people can actually understand what your issue is.\n\n\n\nReprex\n\nShort for minimal reproducible example this is a version of your code that someone could copy and run on their own machine, making it possible for them to help you troubleshoot your problem.\nYou want to strip away everything not pertinent to the issue you’re having so that it’s simple and straightforward.\nYou can use the reprex package for assistance with this!1\n\n\n\n\nPutting in the work up front\n\nIt’s cliché, but investing in your learning right now will pay off down the road.\nLearning how to do something, why R works in a certain way, and developing practices that keep you organized will make you more efficient and help prevent minor and major frustrations going forward.\n\n\n\n\ndput() is also a useful function for quickly creating a snippet of your data to share with others to illustrate your issue.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Workflow"
    ]
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Lecture schedule",
    "section": "",
    "text": "Please note that this schedule is subject to change.\n\n\n\nLecture\nDate\nTopic\nRecommended Readings\n\n\n\n\n1\n01 Apr 2025\nIntroduction to R, R Studio, and Quarto\nR for Data Science: Introduction, Ch 28 (Quarto)\n\n\n2\n08 Apr 2025\nData Visualization and Debugging\nR for Data Science: Chapters 1, 9-11; ggplot cheatsheet\n\n\n3\n15 Apr 2025\nWorkflow and Reproducibility\nR for Data Science: Chapters 2, 4, 6, 8 (workflow), 27\n\n\n4\n22 Apr 2025\nManipulating and Summarizing Data\nR for Data Science: Chapters 3, 12, 19\n\n\n5\n29 Apr 2025\nImporting, Exporting, and Cleaning Data\nR for Data Science: Chapters 5, 7, 16, 17; RStudio cheatsheets\n\n\n6\n06 May 2025\nData Structures & Types\nR for Data Science: Chapters 13, 18\n\n\n7\n13 May 2025\nWorking with Text Data\nR for Data Science: Chapters 14-15\n\n\n8\n20 May 2025\nWriting Functions\nR for Data Science: Chapter 25\n\n\n9\n27 May 2025\nIteration\nR for Data Science: Chapter 26\n\n\n10\n03 Jun 2025\nNext Steps",
    "crumbs": [
      "Lectures",
      "Lecture schedule"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Example.html",
    "href": "Homework/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I’m interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n6..145\n\n\n\n\n\n\n\n146\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nThe mean petal length is 3.76 but its median petal length is 4.35. It’s range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species…?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let’s look at some basic descriptives of the dataset.\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nMin. :4.300\nMin. :2.000\nMin. :1.000\nMin. :0.100\nsetosa :50\n\n\n1st Qu.:5.100\n1st Qu.:2.800\n1st Qu.:1.600\n1st Qu.:0.300\nversicolor:50\n\n\nMedian :5.800\nMedian :3.000\nMedian :4.350\nMedian :1.300\nvirginica :50\n\n\nMean :5.843\nMean :3.057\nMean :3.758\nMean :1.199\nNA\n\n\n3rd Qu.:6.400\n3rd Qu.:3.300\n3rd Qu.:5.100\n3rd Qu.:1.800\nNA\n\n\nMax. :7.900\nMax. :4.400\nMax. :6.900\nMax. :2.500\nNA\n\n\n\n\n\n\n\nIt’s interesting to note with the summary function that for numerical data it’ll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let’s see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there’s much more overlap. Overall, there’s tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments and peer reviews. For specific instructions and templates for individual assignments, click on that assignment listed on the left.\nAll assignments should be created using Quarto and uploaded to Canvas. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.\nThis is a one-credit pass/fail course intended to help you learn R. The focus is on learning and practice, not on points. Assignments and peer reviews will be graded for completion, but the points are not the point: they are key opportunities to practice R/RStudio/Quarto and to learn from each other. Feel free to work together, discussion questions on Ed Discussion, trade ideas and tips.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#peer-review",
    "href": "Homework/homework.html#peer-review",
    "title": "Overview",
    "section": "Peer Review",
    "text": "Peer Review\nYou are required to examine and provide feedback on a peer’s homework submission each week. Reading and evaluating others’ code gives you the chance to see how other people approached the problems and share how you do things differently. Please give constructive, polite, and insightful comments that encourage your classmate and help them learn from you. Try to mention each of the following: one or more things they did well, one or more tips you have to improve their work, and one or more things you learned from reading their work.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "href": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "title": "Overview",
    "section": "A Note About Rendering Your HTML documents",
    "text": "A Note About Rendering Your HTML documents\nYou need to include embed-resources: true in your YAML header in order for your HTML documents to include any plot output when you upload them to Canvas. It should look something like this:\n\nYou can read more about this option here but basically, whenever you render a .qmd file to HTML, all output created goes into a separate, associated folder, which is referenced when displaying the page in your web browser. However, when you upload the HTML file separately from that folder (e.g. to Canvas or through email), it doesn’t have the specific output images to reference, so they won’t appear. When you specify in your YAML header that you want to embed resources, you’re explicitly adding the output created by your code to the HTML file so that a separate output folder is longer created and you can send your HTML file with all its output as one entity.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#assignment-due-dates",
    "href": "Homework/homework.html#assignment-due-dates",
    "title": "Overview",
    "section": "Assignment Due Dates",
    "text": "Assignment Due Dates\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n08 April\n13 April\n\n\n2\n15 April\n20 April\n\n\n3\n22 April\n27 April\n\n\n4\n29 April\n03 May\n\n\n5\n06 May\n11 May\n\n\n6\n13 May\n18 May\n\n\n7\n20 May\n25 May\n\n\n8\n27 May\n01 June\n\n\n9\n03 June\n08 June",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework7.html",
    "href": "Homework/homework7.html",
    "title": "Homework 7",
    "section": "",
    "text": "Answer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\nUse the following code to read in the King County restaurant data for this assignment:\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))",
    "crumbs": [
      "Homework",
      "Homework 7"
    ]
  },
  {
    "objectID": "Homework/homework7.html#footnotes",
    "href": "Homework/homework7.html#footnotes",
    "title": "Homework 7",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n↩︎\nAnything that is separated by spaces counts as a word for this problem.↩︎\nNote: To accurately reflect the true average you’ll want to weight this by restaurant: i.e. get the average grade by restaurant first, then get the average of those averages by zip code.↩︎\nThere are a few ways to do this. Use the method that makes most sense to you!↩︎",
    "crumbs": [
      "Homework",
      "Homework 7"
    ]
  },
  {
    "objectID": "Homework/homework1_fall.html",
    "href": "Homework/homework1_fall.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix inline R calculations, R output, and plots with text describing the relationships you see. Include at least two plots and at least one instance of inline R code (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()). You are encouraged to include more! You may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file"
  },
  {
    "objectID": "Homework/homework1.html",
    "href": "Homework/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least one plot and one table using the gt package. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Make sure to update headers, text, etc. to reflect this Homework 1 assignment. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file",
    "crumbs": [
      "Homework",
      "Homework 1"
    ]
  },
  {
    "objectID": "Homework/homework2.html",
    "href": "Homework/homework2.html",
    "title": "Homework 2",
    "section": "",
    "text": "For this and all assignments you submit on Canvas: Don’t forget to include embed-resources: true in your YAML header. This way your HTML document will include any plots you made when you upload the document to Canvas. Adding this line to your YAML header should look something like this:\n\nWhen you go to submit on Canvas, submit the .html and .qmd files that are already on your computer. When you render a Quarto (.qmd) file to HTML format and it opens a page in your browser, it looks like a webpage but it’s actually a file on your computer that has the extension .html. Instead of trying to print the HTML file from your browser, submit the .html and .qmd files already on your computer. Here’s a screenshot from an example in class today (Lecture 2): when I rendered the file testQuarto.qmd, it created a file called testQuarto.html in the same folder.",
    "crumbs": [
      "Homework",
      "Homework 2"
    ]
  },
  {
    "objectID": "Homework/homework2.html#footnotes",
    "href": "Homework/homework2.html#footnotes",
    "title": "Homework 2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRemember to install the package in your console first (not in your qmd file) and then load it with the library() function.↩︎",
    "crumbs": [
      "Homework",
      "Homework 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall Room 325\n\n\n\nThursdays 1-3pm in Savery Hall Room 121\nFridays 3-4pm on Zoom by request (email me through Canvas for a particular Friday)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall Room 325\n\n\n\nThursdays 1-3pm in Savery Hall Room 121\nFridays 3-4pm on Zoom by request (email me through Canvas for a particular Friday)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "Homework/homework3.html",
    "href": "Homework/homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "For this assignment, include all code and relevant output in your rendered html document1.",
    "crumbs": [
      "Homework",
      "Homework 3"
    ]
  },
  {
    "objectID": "Homework/homework3.html#footnotes",
    "href": "Homework/homework3.html#footnotes",
    "title": "Homework 3",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can set the echo: true (and other) code chunk option(s) globally (will set it as the document default) by specifying it in your YAML header like so:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n↩︎\nYou’ll notice that the upper-right hand corner of your RStudio IDE now displays the name of that new project. This is your current working directory. Whatever files you create will have a working directory of the folder/subfolder of the project they’re saved within.↩︎\nYou can embed output-looking text like this example by using a code chunk without the {r} (just three backticks above and below) like so:\n```\nCSSS 508\n  Homework1/\n  ...etc...\n```\n↩︎",
    "crumbs": [
      "Homework",
      "Homework 3"
    ]
  },
  {
    "objectID": "Homework/homework4.html",
    "href": "Homework/homework4.html",
    "title": "Homework 4",
    "section": "",
    "text": "Answer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\nRemember, the package nycflights13 contains data on flights originating in NYC during the year 2013. There are three airports servicing NYC: JFK, LGA (“LaGuardia”), and EWR (“Newark”). You can look at the slides or use ?nycflights13 in your console to review/learn more about the data. (Don’t include the ?nycflights13 command in your .qmd file though; it’s meant only for interactive use, like in the console, not in documents or scripts.)",
    "crumbs": [
      "Homework",
      "Homework 4"
    ]
  },
  {
    "objectID": "Homework/homework4.html#footnotes",
    "href": "Homework/homework4.html#footnotes",
    "title": "Homework 4",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n↩︎\nHint: Read about geom_smooth() and consider how you might use it with the argument method = \"lm\" to plot a relationship between these two variables.↩︎",
    "crumbs": [
      "Homework",
      "Homework 4"
    ]
  },
  {
    "objectID": "Homework/homework5.html",
    "href": "Homework/homework5.html",
    "title": "Homework 5",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout). You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n    title: \"Homework 5\"\n    execute:\n      echo: true\n      warning: false\nDownload the billboard data set introduced in lecture to the same folder where you’re saving your qmd for this homework, or set the file path in read_csv to the correct location.\n\n\nExercises\n\nRead in the data, clean up the names, and pivot it in a way so the first few rows look like this:\n\n\n\n&gt; # A tibble: 5,307 × 6\n&gt;    artist  track                   time   date_entered  week  rank\n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt;\n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92\n&gt; # ℹ 5,297 more rows\n\n\n\nCreate a variable named date that corresponds to the week based on the date_entered. For instance, if the date_entered is 1-13-2000 and week is 1, then when week is 2 date will have a value of 1-20-2000. (Hint: Try using if_else() here). The first few rows should look something like this:\n\n\nbillboard_tidy_date\n\n&gt; # A tibble: 5,307 × 7\n&gt;    artist  track                   time   date_entered  week  rank date      \n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt; &lt;date&gt;    \n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87 2000-02-26\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82 2000-03-04\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72 2000-03-11\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77 2000-03-18\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87 2000-03-25\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94 2000-04-01\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99 2000-04-08\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91 2000-09-02\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87 2000-09-09\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92 2000-09-16\n&gt; # ℹ 5,297 more rows\n\n\nIf you get stuck on Problem 2, feel free to share in your submitted homework what you figured out and where you got stuck. You are also welcome to create a different column using any of the skills we have learned; describe what column you are creating and how you did it. You do not need Problem 2 in order to do the rest of the homework.\n\nCreate a dataset of the song(s) with the most weeks in the top 3 by month for the year 2000. The final dataset for Problem 3 should look like this, though you can call the columns whatever you want:\n\n\n\n&gt; # A tibble: 19 × 4\n&gt;    month artist              track                   peak_weeks\n&gt;    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;                        &lt;dbl&gt;\n&gt;  1     1 Aguilera, Christina What A Girl Wants                3\n&gt;  2     2 Savage Garden       I Knew I Loved You               4\n&gt;  3     3 Lonestar            Amazed                           4\n&gt;  4     4 Hill, Faith         Breathe                          5\n&gt;  5     4 Santana             Maria, Maria                     5\n&gt;  6     5 Hill, Faith         Breathe                          4\n&gt;  7     5 Santana             Maria, Maria                     4\n&gt;  8     6 Aaliyah             Try Again                        2\n&gt;  9     6 Anthony, Marc       You Sang To Me                   2\n&gt; 10     6 Hill, Faith         Breathe                          2\n&gt; 11     6 Santana             Maria, Maria                     2\n&gt; 12     6 Vertical Horizon    Everything You Want              2\n&gt; 13     7 Aaliyah             Try Again                        4\n&gt; 14     8 Sisqo               Incomplete                       4\n&gt; 15     8 matchbox twenty     Bent                             4\n&gt; 16     9 Janet               Doesn't Really Matte...          5\n&gt; 17    10 Madonna             Music                            4\n&gt; 18    11 Creed               With Arms Wide Open              4\n&gt; 19    12 Destiny's Child     Independent Women Pa...          5\n\n\n\nPick one month of 2000 and visualize the entire charting trajectory of the songs that spent at least 1 week in the top 3 during that month. Hint: Start with the data set created in question 3. An example of what this could look like for April is provided below. Your plot does not have to look just like this one; your plot should look polished and be easy to interpret, but it does not have to be fancy.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick for skeleton code you can fill in\n\n\n\n\n\nNote: This is one way to do this problem but there are many approaches to every coding puzzle in R. If this skeleton code is useful, use it. If not, I’m happy to chat through your approach in office hours 🤓\nReplace all instances of function, variable, and value with what you think the correct answer should be. Additional hints provided by hovering over the code annotation.\n\nbillboard_top3_month_viz &lt;- billboard_tidy_date |&gt; \n1  mutate(month = function(variable),\n2         year = function(variable),\n3         top3 = if_else(variable &lt;= value & variable == value, 1, 0)) |&gt;\n4  mutate(month_peak = ifelse(variable &gt; 0, variable, NA),\n         .by = c(month, artist, track)) |&gt; \n5  filter(function(month_peak == \"value\"),\n         .by = c(track, artist)) \n\n6library(ggrepel)\nggplot(billboard_top3_month_viz, \n7       aes(variable, variable, group = variable, color = variable)) +\n8  function +\n9  geom_label_repel(data = billboard_top3_month_viz |&gt; function(variable, by = track),\n10                   mapping = aes(label = variable))\n\n\n1\n\nWhat month is associated with each row’s chart position?\n\n2\n\nAre there multiple years in this dataset?! Given that we’re interested in the Billboard Top 100 for 2000 it might be useful to have a variable that allows us to discriminate between years.\n\n3\n\nTo create some indicator of top 3 status you’ll need to provide two conditions (one variable needs to be less than or equal to a certain value and another needs to equal a certain value)\n\n4\n\nNeed to create a variable that reflects when a particular song charted in the top 3 and NA otherwise\n\n5\n\nIn order to get the entire trajectory of a song we can’t simply filter for the month when it peaked. Then we’d only be able to plot that snippet of its trajectory. Hint: Which function returns TRUE if even 1 element it’s given is TRUE?\n\n6\n\nLoad if you want to add labels\n\n7\n\nYou want to visualize the ranking trajectory of a song over time. Hint: group is the variable you want to visualize.\n\n8\n\nWhat geometry would be appropriate here?\n\n9\n\nTo properly label this plot you’ll need to subset the data, otherwise it will try to plot a label for every date available.\n\n10\n\nWhich variable’s text are you trying to label?\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?",
    "crumbs": [
      "Homework",
      "Homework 5"
    ]
  },
  {
    "objectID": "Homework/homework6.html",
    "href": "Homework/homework6.html",
    "title": "Homework 6",
    "section": "",
    "text": "Answer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).",
    "crumbs": [
      "Homework",
      "Homework 6"
    ]
  },
  {
    "objectID": "Homework/homework6.html#footnotes",
    "href": "Homework/homework6.html#footnotes",
    "title": "Homework 6",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\nembed-resources: true\n---\n\n↩︎\nUse typeof() to find this.↩︎\nUsing rnorm().↩︎",
    "crumbs": [
      "Homework",
      "Homework 6"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html",
    "href": "Homework/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")\n\n\n\n\n\n\n\n\nUnless you include the chunk option #| echo: false, your code chunk will be displayed in your final document."
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome! I look forward to working with you this quarter.\nThis syllabus is subject to change. All changes will be announced in class and via email announcements from Ed Discussion.\n\nOverview\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career.\nThis course has no prerequisites; we do not assume you have any prior programming experience with R or any other language. We will also cover almost no statistics, but this course should help prepare you for CSSS, STAT, or other departments’ methods courses so that you can focus on the methods they cover more than the coding itself. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nLearning objectives\nBy the end of the course, students will be able to…\n\nDevelop more confidence in their programming skills and their understanding of computation more broadly\nBe familiar with the RStudio application and the syntax of the R language\nOrganize and document coding projects for reproducibility and efficient workflow\nRead in data from a file and explore the data\nManipulate and reformat data for quality control, summary statistics, and other purposes\nCombine multiple data sets from different sources and of different types\nCreate beautiful, clear, and informative data visualizations\nCombine text, code, and output into reports using Quarto\nGain confidence troubleshooting, debugging, and learning how to do new things in R\n\n\n\nInstalling R, RStudio, Quarto\nIf you do not have both R and RStudio on your computer, or if it has been over a year or so since you updated them, please follow these two-part instructions to install/update them. (If you have concerns about updating your current versions for research compatibility or other reasons, please feel free to email me first to see how best to proceed.)\nFirst, download and install R for your particular operating system by going to this website and following these instructions.\nThen, download RStudio here by clicking the blue button at the top if you have macOS 10.15+ (64-bit) or clicking the appropriate link below that for your operating system.\nIf you just downloaded or already had a recent version of RStudio, Quarto comes with it and you don’t need to do anything further to install it but you can check out this intro to Quarto. I highly recommend having an updated version of R and RStudio. If for some reason you need to download Quarto directly, you can do so here.\n\n\nStructure\nThis course consists of a two-hour hands-on lecture and an optional two-hour hands-on office hour.\nIn person or remote? This course is intended to be primarily in person, but I recognize that life happens, so I will plan to hold lectures in a hybrid fashion in case you need to join remotely sometimes. This way we can also post lecture recordings in case you want to review something from class.\n\nLectures\nFor a schedule of lecture topics, please see the Lectures page. Note that the course will not meet during final exam week.\nPlease bring a laptop to class each week so that you can follow along with examples, practice problems, and live coding in class. If you do not have a laptop you can bring to class and are not sure how to borrow one, please let me know in advance.\n\n\nOffice hours\nOffice hours are optional and are a great space for asking questions, getting more practice, working on homework, and continuing discussions from class.\n\n\n\nResources\nThis course has no required text. I will guide you through content during lecture, and the lecture notes will all be here on this website. There are also many helpful resources available for free online if you would like further references along the way or after this class ends. In particular, if you’d like an extra reference, you can check out R for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund.\n\n\nClass communication\n\nCourse content (lecture notes) and homework instructions will be posted here on the course website.\nSubmit your assignments and peer reviews through Canvas.\nI will send out homework clarifications, schedule changes, and other important information through Ed Discussion announcements which will send you an email.\nPlease use Ed Discussion to post your questions to peers and answer others’ questions! I will also keep an eye on the discussions and reply as needed.\nFor administrative emails, please send them through Ed Discussion as a private thread, which will send only to me.\nPlease make good use of my office hours to address your questions, work through homework, and get extra practice with the material.\nWhen asking questions, please provide the code you ran and the error you gave, be specific and concrete, and try to provide a minimal reproducible example. This helps me and your fellow students give you the most helpful feedback!\n\n\n\nAnonymous feedback\nThroughout the course, I welcome your feedback through this short anonymous feedback survey on what’s working for you about the class environment or format, what’s not, and any suggestions or ideas you have.\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments, assigned weekly for the first 9 weeks of instruction. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be submitted as both .html and .qmd documents; we will go over how to create these. I will grade these assignments for completion (3 points if submitted, 0 otherwise) and peers will provide feedback on your work through peer review assignments. These homework assignments are designed first and foremost to develop skills rather than “prove” you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work.\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to provide constructive feedback on another student’s submission. Reading others’ code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be graded for completion.\nSchedule: Homework assignments will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. You can see a list of due dates on the Homework page.\nLate assignments: No late assignments will be accepted. The reason for this is to ensure you are getting feedback at regular intervals and staying on track. The grading is lenient, so submit whatever you have by each deadline, and your grade will be fine if you miss submitting an assignment or two due to illness or emergencies.\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. Learning is a collaborative and creative process, and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before or after class, attending office hours, and/or reaching out on Ed Discussion. As much as possible, I encourage you to use my office hours.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#title-slide",
    "href": "Lectures/CSSS508_Lecture1.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/CSSS508_Lecture1.html#welcome",
    "title": "CSSS 508",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/CSSS508_Lecture1.html#introductions",
    "title": "CSSS 508",
    "section": "Introductions",
    "text": "Introductions\nLet’s start by getting to know each other a bit better. Share the following with your neighbor:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or more generally)\nOne word that best describes your feelings about taking this class\nIf you could have any superpower, what would you choose?\n\n\nPair up with someone nearby and introduce yourself to one another (~ 5 min).",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#some-reasons-i-love-r-rstudio-and-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#some-reasons-i-love-r-rstudio-and-quarto",
    "title": "CSSS 508",
    "section": "Some reasons I love R, RStudio, and Quarto",
    "text": "Some reasons I love R, RStudio, and Quarto\nMy research:\n\nMaking pretty maps, doing analysesTeaching materials (these slides and the website are made with Quarto!)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#syllabus-and-course-goals",
    "href": "Lectures/CSSS508_Lecture1.html#syllabus-and-course-goals",
    "title": "CSSS 508",
    "section": "Syllabus and course goals",
    "text": "Syllabus and course goals\nThe syllabus (as well as lots of other information) can be found on our course website\nFeel free to follow along online as I run through the syllabus!\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\n\nDeveloping intermediate data management and visualization skills\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\n\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#logistics-general",
    "href": "Lectures/CSSS508_Lecture1.html#logistics-general",
    "title": "CSSS 508",
    "section": "Logistics: General",
    "text": "Logistics: General\nLecture: Tuesdays 4:30-6:20pm, Thomson Hall Room 325\nOffice Hours: Wednesdays 4-6pm, Savery Hall Room 117 (CSSCR Lab)\n\n\n\nHow to Contact Me\n\n\nPlease post your questions on Ed Discussion (accessible through Canvas) rather than emailing me. This helps ensure I won’t miss them!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "href": "Lectures/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "title": "CSSS 508",
    "section": "Logistics: Three Tools for Class",
    "text": "Logistics: Three Tools for Class\n\n\n\n\nCommunication\n\n\nLearning is collaborative! In addition to being the place to communicate with me, please use Ed Discussion to ask each other questions, share resources, etc.\n\n\n\n\n\n\n\nHomework & Peer-Reviews\n\n\nWe will be using Canvas only for homework & peer review submissions and to house lecture recordings and Zoom links.\n\n\n\n\n\n\n\n\nCourse Content\n\n\nAll course content (lecture slides and homework instructions) will be accessible on our course website.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#prerequisites",
    "href": "Lectures/CSSS508_Lecture1.html#prerequisites",
    "title": "CSSS 508",
    "section": "Prerequisites",
    "text": "Prerequisites\n\n\nNone 😎",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#computers",
    "href": "Lectures/CSSS508_Lecture1.html#computers",
    "title": "CSSS 508",
    "section": "Computers",
    "text": "Computers\nI recommend bringing a laptop to class so you can follow along and practice during class.\n\n\n\nKeep In Mind\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will not necessarily be the same/up to date if you do your work on different computers. My advice is to consistently use the same device for homework assignments or to make sure to download the latest versions of R, RStudio, and Quarto when using a new machine.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#readings",
    "href": "Lectures/CSSS508_Lecture1.html#readings",
    "title": "CSSS 508",
    "section": "Readings",
    "text": "Readings\n\n\n\nTextbooks: This course has no textbook. However, I will be suggesting selections from R for Data Science to pair with each week’s topic. While not required, I strongly suggest reading those selections before doing the homework for that week.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#course-assessment",
    "href": "Lectures/CSSS508_Lecture1.html#course-assessment",
    "title": "CSSS 508",
    "section": "Course Assessment",
    "text": "Course Assessment\nFinal grade\nCredit/No Credit (C/NC); You need at least 60% to get Credit\n\n\nHomework (75%; assessed by peers)\n9 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lecture sessions and due a week later.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nNot submitted.\n0\n\n\nTurned in but low effort, ignoring many directions.\n1\n\n\nDecent effort, followed directions with some minor issues.\n2\n\n\nSubmitted\n3\n\n\n\n\n\n\n\nPeer Grading (25%; assessed by me)\nOne per homework, assessed on a binary satisfactory/unsatisfactory scale. Due 5 days after homework due date.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nDidn’t follow all peer-review instructions.\n0\n\n\nPeer review is at least several sentences long,  mentions any and all key issues from the assignment,  and points out at least one positive thing in your  peer’s work (and hopefully more!).\n1",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "href": "Lectures/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "title": "CSSS 508",
    "section": "Due Dates and Late Policy",
    "text": "Due Dates and Late Policy\nHomework/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas by 4:30pm the day it is due.\nNo late assignments will be accepted to ensure you receive feedback at regular intervals and stay on track. The grading is lenient, so submit whatever you have by each deadline, and your grade will be fine if you miss submitting an assignment or two due to illness or emergencies.\nPeer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework, you will not be given a peer’s homework to review and vice versa.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "CSSS 508",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternative approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least several sentences that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\n\n\nSend me a private message on Ed Discussion if you would like your assignment to be regraded or for me to provide feedback if no peer review was given.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/CSSS508_Lecture1.html#academic-integrity",
    "title": "CSSS 508",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n\n\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/CSSS508_Lecture1.html#classroom-environment",
    "title": "CSSS 508",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#classroom-environment-1",
    "href": "Lectures/CSSS508_Lecture1.html#classroom-environment-1",
    "title": "CSSS 508",
    "section": "Classroom Environment…",
    "text": "Classroom Environment…\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\n\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#accommodations",
    "href": "Lectures/CSSS508_Lecture1.html#accommodations",
    "title": "CSSS 508",
    "section": "Accommodations",
    "text": "Accommodations\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website.\n\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help-and-feedback",
    "href": "Lectures/CSSS508_Lecture1.html#help-and-feedback",
    "title": "CSSS 508",
    "section": "Help and Feedback",
    "text": "Help and Feedback\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before or after class, attending office hours, and/or reaching out on Ed Discussion. As much as possible, I encourage you to use my office hours.\n\nAlso, help one another as you navigate this course! Use Ed Discussion to discuss questions with each other, and feel free to form study/practice groups.\n\n\n\n\n\nFeedback\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can submit anonymous feedback here. I will also send out a mid-quarter feedback survey.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/CSSS508_Lecture1.html#asking-questions",
    "title": "CSSS 508",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\n\n\n\nFYI\n\n\nIf you ask me a question directly on Ed Discussion or in office hours, I may send out your question (anonymously) along with my answer to the whole course.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "CSSS 508",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\nCode represents R code or keyboard shortcuts you can use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "title": "CSSS 508",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\nCode represents R code you could use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49 \n# Sometimes important stuff is highlighted!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "href": "Lectures/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "title": "CSSS 508",
    "section": "A Note on How to Use These Slides",
    "text": "A Note on How to Use These Slides\nSince the lectures for this class were created using Quarto, there are numerous built-in features meant to facilitate your learning, particularly of R.\n\n\nThe bars in the bottom left-hand corner will show you a table of contents for the entire slideshow, allowing you to find what you’re looking for more easily.\nIf you hover over any chunk of R code embedded in the slides you will see a clipboard which you can click to copy the code. You can then paste it in your own Quarto document or R script to run it in your session of RStudio.\nTo get a PDF version of these slides click File &gt; Print from your internet browser, select Save as PDF as the Destination or Printer, and make sure the Layout is set to Landscape. (Note: the PDF Export Mode in Tools actually cuts off content which is why I’m not recommending it)\nClicking on the paintbrush in the bottom left-hand corner allows you to draw directly on the slides, in a very Microsoft Paint kind of way. See if it’s useful but I make no promises!\nType ? at any time to see all the available key-board shortcuts.\nSome pages are scrollable.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/CSSS508_Lecture1.html#why-r",
    "title": "CSSS 508",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n\n\nR is free.\n\n\n\n\nR has a very large community.\n\n\n\n\nR can handle virtually any data format.\n\n\n\n\nR makes replication easy.\n\n\n\n\nR is a language so it can do everything.\n\n\n\n\nR skills transfer to other languages like Python and Julia.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/CSSS508_Lecture1.html#r-studio",
    "title": "CSSS 508",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a “front-end” or integrated development environment (IDE) for R that can make your life easier.\n\nWe’ll show RStudio can…\n\n\nOrganize your code, output, and plots\nAuto-complete code and highlight syntax\nHelp view data and objects\nEnable easy integration of R code into documents with Quarto\n\n\n\n\n\nIt can also…\n\nManage git repositories (version control)\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "CSSS 508",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "CSSS 508",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\n\n\nWorks with LaTeX and HTML for math and more formatting control",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "CSSS 508",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so! Follow the instructions in the syllabus.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/CSSS508_Lecture1.html#getting-started",
    "title": "CSSS 508",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "CSSS 508",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\n\nHighlight lines in the editor window and click     Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "CSSS 508",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click     Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ⌘+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n\n\nType individual lines in the console and press Enter.\n\n\n\n\nIn quarto documents, click within a code chunk and click the green arrow     to run the chunk. The button beside that (   ) runs all prior chunks.\n\n\n\nThe console will show the lines you ran followed by any printed output.\n\nThis thing is the caret: |",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/CSSS508_Lecture1.html#incomplete-code",
    "title": "CSSS 508",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "CSSS 508",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n\n\n123 + 456 + 789\n\n[1] 1368\n\n\n\n\nThe [1] in the output indicates the numeric index of the first element on that line.\n\n\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ⌘+Enter.\n\n\n\nsqrt(400)\n\n[1] 20",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#functions",
    "href": "Lectures/CSSS508_Lecture1.html#functions",
    "title": "CSSS 508",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R.\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\n\n\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n\n\n\n\n\nSomething to Note\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it’s therefore a required specification.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help",
    "href": "Lectures/CSSS508_Lecture1.html#help",
    "title": "CSSS 508",
    "section": "Help",
    "text": "Help\n\n\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the bottom right.\n\n?sqrt\n\n\nIf you’re trying to look up the help page for a function and can’t remember its name you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#help-1",
    "href": "Lectures/CSSS508_Lecture1.html#help-1",
    "title": "CSSS 508",
    "section": "Help",
    "text": "Help\nHelp files provide documentation on how to use functions and what functions produce. They will generally consist of the following sections:\n\n\nDescription - What does it do?\n\n\nUsage - How do you write it?\n\n\nArguments - What arguments does it take; which are required; what are the defaults?\n\n\nDetails - A more in-depth description\n\n\nValue - What does the function return?\n\n\nSee Also - Related R functions\n\n\nExamples - Example (& reproducible) code",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#objects",
    "href": "Lectures/CSSS508_Lecture1.html#objects",
    "title": "CSSS 508",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n\nCreating an object can be done using the assignment operators &lt;- or =: . . .\n\nnew.object &lt;- 144\nx = 5\n\n\n\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside () like in sqrt(x).\n\n\nWe do math with operators, e.g., x + y.\n+ is the addition operator!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/CSSS508_Lecture1.html#calling-objects",
    "title": "CSSS 508",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nnew.object\n\n[1] 144",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#naming-objects",
    "href": "Lectures/CSSS508_Lecture1.html#naming-objects",
    "title": "CSSS 508",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio auto-complete means long, descriptive names are better than short, vague ones! Good names save confusion later!\n\n\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods\nAnd_some.People_ARETRUErebels\n\n\n\n\nRemember that object names are CaSe SeNsItIvE!!\nAlso, TYPOS MATTER!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/CSSS508_Lecture1.html#using-objects",
    "title": "CSSS 508",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. . . .\n\nnew.object + 10\n\n[1] 154\n\nnew.object + new.object\n\n[1] 288\n\nsqrt(new.object)\n\n[1] 12",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#comments",
    "href": "Lectures/CSSS508_Lecture1.html#comments",
    "title": "CSSS 508",
    "section": "Comments",
    "text": "Comments\nAnything written after #1 will be ignored by R.\n\n# create vector of ages of students\nages &lt;- c(45, 21, 27, 34, 23, 24, 24)\n\n# get average age of students\nmean(ages)\n\n[1] 28.28571\n\n\n\nComments help collaborators and future-you understand what, and more importantly, why you are doing what you’re doing with that specific line/chunk of code.\n\n\nAdditionally, comments allow you to explain your overall coding plan and record anything important that you’ve discovered along the way.\n\nIn Quarto documents, comments only work in code chunks. Outside of a chunk, # creates headers like “comments” at the top of this slide.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/CSSS508_Lecture1.html#vectors",
    "title": "CSSS 508",
    "section": "Vectors",
    "text": "Vectors\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e. TRUE, FALSE).\n\nYou can create a vector using the function c() which stands for “combine” or “concatenate”. . . .\n\nnew.object &lt;- c(4, 9, 16, 25, 36)\nnew.object\n\n[1]  4  9 16 25 36\n\n\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\n\n\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new.object)\n\n[1] 2 3 4 5 6",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/CSSS508_Lecture1.html#more-complex-objects",
    "title": "CSSS 508",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#creating-a-quarto-document",
    "href": "Lectures/CSSS508_Lecture1.html#creating-a-quarto-document",
    "title": "CSSS 508",
    "section": "Creating a Quarto Document",
    "text": "Creating a Quarto Document\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\n\nMake sure HTML Output is selected\nIn the Title box call this test document “My First Qmd” and click Create\n\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking     towards the top left of the source pane).\nLastly, click     Render at the top of the source pan to “knit” your document into an html file. This will produce a minimal webpage since we only have a title. We need to add more content!\n\n\nIf you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "href": "Lectures/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "title": "CSSS 508",
    "section": "Anatomy of a Quarto Document",
    "text": "Anatomy of a Quarto Document\n\n\n\n\nQuarto file\nRendered html document\n\n\n\n\n\n---\ntitle: \"ggplot2 demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 4\n    code-fold: true\n---\n\n## Air Quality\n\n@fig-airquality further explores the impact of temperature on ozone level.\n\n```{r}\n#| label: fig-airquality\n#| fig-cap: \"Temperature and ozone level.\"\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n\n\n\n\n\n\n\n\nThe rendered output of the qmd file shown on the previous tab.\n\n\n\n\n\n\n\nElements of a Quarto document include:\n\n\nAn (optional) YAML header (surrounded by ---s).\n\n\n\n\nPlain text and any associated formatting.\n\n\n\n\nChunks of code (surrounded by ``` s) and/or their output.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-headers",
    "title": "CSSS 508",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of a .qmd file is a YAML1code block, and everything else is part of the main document. Try adding some of these other fields to your YAML and re-render it to see what it looks like.\n\n---\ntitle: \"My Report\"\nauthor: \"Jess Kunke\"\ndate: \"April 1, 2025\"\noutput: html_document\n---\n\n\nTo mess with global formatting, you can modify the header2.\n\noutput:\n  html_document:\n    theme: readable\n\n\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.Be careful though, YAML is space-sensitive; indents matter!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-syntax",
    "title": "CSSS 508",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\nOutput\nbold/strong emphasis italic/normal emphasis \nHeader\n\n\nSubheader\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\nQuarto Syntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "CSSS 508",
    "section": "Quarto Syntax Continued",
    "text": "Quarto Syntax Continued\nThis is all basic markdown syntax which you can learn about here.\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "CSSS 508",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r squared}\ny &lt;- 1:5\nz &lt;- y^2\n```\n\n\n\nTry copying any of the code chunks from the previous three slides to add some formatted text to your own qmd.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "CSSS 508",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\n\nWays to modify the overall document appearance\nWays to format parts of your document\nLearn about the visual editor here",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "CSSS 508",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code…\n```{r cars}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nAdd this code chunk to your document!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/CSSS508_Lecture1.html#chunk-options",
    "title": "CSSS 508",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r barchart}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/CSSS508_Lecture1.html#chunk-options-1",
    "title": "CSSS 508",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "CSSS 508",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options for the chunk in my_first_Rmd.qmd and re-render your document to see what happens.\n\n```{r fenced}\n#| eval: false\nsummary(cars)\n```",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/CSSS508_Lecture1.html#in-line-r-code",
    "title": "CSSS 508",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n\n\nFour score and seven years ago is the same as 87 years.\n\n\n\nMaybe we’ve saved a variable in a code chunk that we want to reference in the text:\n\nx &lt;- sqrt(77)\n\n\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n\n\nThe value of x rounded to the nearest two decimals is 8.77.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/CSSS508_Lecture1.html#this-is-amazing",
    "title": "CSSS 508",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\n\n\n\n\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\n\n\n\n\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "CSSS 508",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\n\ndate: \"March 26, 2024\"\nto\ndate: \"`r Sys.time()`\"",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r",
    "href": "Lectures/CSSS508_Lecture1.html#base-r",
    "title": "CSSS 508",
    "section": "Base R\n",
    "text": "Base R\n\nSimply by downloading R you have access to what is referred to as Base R. That is, the built-in functions and datasets that R comes equipped with, right out of the box.\n\nExamples that we’ve already seen include &lt;-, sqrt(), +, Sys.time(), and summary() but there are obviously many many more.\n\n\nYou can see a whole list of what Base R contains by running library(help = \"base\") in the console.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nIn the sample Quarto document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer tab in the source pane (“interactive” use only, don’t put in Quarto document!).\n\n\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "href": "Lectures/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "title": "CSSS 508",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nNote R is object-oriented which means summary() provides different information for different types of objects!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nhist() generates a histogram of a vector. Note that you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\n\n\n\nhist(cars$dist)",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can try and make this histogram a bit more appealing by adding more arguments and their specifications.\n\n\nCode\nPlot\n\n\n\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line (y-value)\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line (x-value)\n\n\n\n\n\nNote\n\n\ndist ~ speed is a formula of the type y ~ x. The first element (dist) gets plotted on the y-axis and the second (speed) goes on the x-axis. Regression formulae follow this convention as well!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "href": "Lectures/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "title": "CSSS 508",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\", # add y-axis label\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "href": "Lectures/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "title": "CSSS 508",
    "section": "Another Base R Dataset: swiss\n",
    "text": "Another Base R Dataset: swiss\n\nLet’s look at another built-in dataset.\n\nFirst, run ?swiss in the console to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "CSSS 508",
    "section": "Looking at swiss\n",
    "text": "Looking at swiss\n\n\n\nCode\nPlot\n\n\n\n\npairs(swiss, \n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets with numerical/continuous data, but mostly useless for larger data.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#packages",
    "href": "Lectures/CSSS508_Lecture1.html#packages",
    "title": "CSSS 508",
    "section": "Packages",
    "text": "Packages\nWhat makes R so powerful though is it’s extensive library of packages. Due to it’s open-source nature, anyone (even you!) can write a package that others can use.\n\nPackages contain pre-made functions and/or data that can be used to extend Base R’s capabilities.\n\n\n\n\n\nBase R/Package Analogy\n\n\nBase R is like creating a recipe from scratch: going to the store and buying all the ingredients and cooking it by yourself. Using a package is more akin to using a meal-kit service: you still have to cook but you’re provided with the ingredients and step-by-step instructions for making the recipe.\n\n\n\n\n\nAs of this writing there are 22,254 available packages!",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-1",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-1",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nYou never want to include this line of code in a Quarto document or an R Script",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-2",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-2",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package2!\nYou never want to include this line of code in a Quarto document or an R ScriptYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#installing-packages-3",
    "href": "Lectures/CSSS508_Lecture1.html#installing-packages-3",
    "title": "CSSS 508",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console1:\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package2!\n\nOnce a package is installed, you need to load it into the current session of R so you can use it. You’ll do this by putting the following in an R Script or embedded in a code chunk in a Quarto file:\n\n\nlibrary(package_name)\n\nYou never want to include this line of code in a Quarto document or an R ScriptYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#gt-package",
    "href": "Lectures/CSSS508_Lecture1.html#gt-package",
    "title": "CSSS 508",
    "section": "\ngt Package",
    "text": "gt Package\nLet’s make a table that’s more polished than the code-y output R automatically gives us. To do this, we’ll want to install our first package called gt. In the console, run: install.packages(\"gt\").\n\n\n\nDifferent Syntax\n\n\nNotice that unlike the library() command, the name of a package to be installed must be in quotes? This is because the name here is a search term (text, not an object!) while for library() it is an actual R object.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#making-cleaner-tables",
    "href": "Lectures/CSSS508_Lecture1.html#making-cleaner-tables",
    "title": "CSSS 508",
    "section": "Making cleaner tables",
    "text": "Making cleaner tables\n\n\nCode\nTable\n\n\n\n\nlibrary(gt) # loads gt, do once in your session\ngt(as.data.frame.matrix(summary(swiss))) \n\n\n\n\n\nNesting Functions\n\n\nNote that we put the summary(swiss) function call inside the as.data.frame.matrix() call which all went into the gt() function. This is called nesting functions and is very common. I’ll introduce a method next week to avoid confusion from nesting too many functions inside each other.\n\n\n\n\n\n\n\n\nWhat’s as.data.frame.matrix() Doing?\n\n\ngt() takes as its first argument a data.frame-type object, while summary() produces a table-type object. Therefore, as.data.frame.matrix() was additionally needed to turn the table into a data.frame.\n\n\n\n\n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nMin. :35.00\nMin. : 1.20\nMin. : 3.00\nMin. : 1.00\nMin. : 2.150\nMin. :10.80\n\n\n1st Qu.:64.70\n1st Qu.:35.90\n1st Qu.:12.00\n1st Qu.: 6.00\n1st Qu.: 5.195\n1st Qu.:18.15\n\n\nMedian :70.40\nMedian :54.10\nMedian :16.00\nMedian : 8.00\nMedian : 15.140\nMedian :20.00\n\n\nMean :70.14\nMean :50.66\nMean :16.49\nMean :10.98\nMean : 41.144\nMean :19.94\n\n\n3rd Qu.:78.45\n3rd Qu.:67.65\n3rd Qu.:22.00\n3rd Qu.:12.00\n3rd Qu.: 93.125\n3rd Qu.:21.70\n\n\nMax. :92.50\nMax. :89.70\nMax. :37.00\nMax. :53.00\nMax. :100.000\nMax. :26.60",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "href": "Lectures/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "title": "CSSS 508",
    "section": "\ngt’s Version of head() and tail()\n",
    "text": "gt’s Version of head() and tail()\n\n\n\nhead()\ngt_preview() alternative\n\n\n\n\nhead(swiss)\n\n             Fertility Agriculture Examination Education Catholic\nCourtelary        80.2        17.0          15        12     9.96\nDelemont          83.1        45.1           6         9    84.84\nFranches-Mnt      92.5        39.7           5         5    93.40\nMoutier           85.8        36.5          12         7    33.77\nNeuveville        76.9        43.5          17        15     5.16\nPorrentruy        76.1        35.3           9         7    90.57\n             Infant.Mortality\nCourtelary               22.2\nDelemont                 22.2\nFranches-Mnt             20.2\nMoutier                  20.3\nNeuveville               20.6\nPorrentruy               26.6\n\n\n\n\n\ngt_preview(swiss, \n           top_n = 3, # default is 5\n           bottom_n = 3) # default is 1 \n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\n1\n80.2\n17.0\n15\n12\n9.96\n22.2\n\n\n2\n83.1\n45.1\n6\n9\n84.84\n22.2\n\n\n3\n92.5\n39.7\n5\n5\n93.40\n20.2\n\n\n4..44\n\n\n\n\n\n\n\n\n45\n35.0\n1.2\n37\n53\n42.34\n18.0\n\n\n46\n44.7\n46.6\n16\n29\n50.43\n18.2\n\n\n47\n42.8\n27.7\n22\n29\n58.33\n19.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n👋 Bye Bye as.data.frame.matrix()\n\n\nWe no longer need as.data.frame.matrix() since we’re no longer using summary(). Both head() and gt_preview() take a data.frame-type object as their first argument which is the same data type as swiss.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#title-slide",
    "href": "Lectures/CSSS508_Lecture2.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Visualizing Data\nCS&SS 508 • Lecture 2\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#file-types",
    "href": "Lectures/CSSS508_Lecture2.html#file-types",
    "title": "CSSS 508",
    "section": "File Types",
    "text": "File Types\nWe mainly work with three types of files in this class:\n\n\n.qmd1: These are markdown syntax files, where you write code and plain or formatted text to make documents.\n.R: These are R syntax files, where you write code to process and analyze data without making an output document2.\n.html (or .pdf, .docx, etc.): These are the output documents created when you Render a quarto markdown document.\n\n\n\nMake sure you understand the difference between the uses of these file types! Please ask for clarification if needed!\n\nQuarto builds on a decade of developments with R Markdown documents. .Rmd files operate very similarly to Quarto documents but there are minor differences that you can read more about here.You can use the source() function to run a .R script file inside a .qmd or .R file. Using this you can break a large project up into multiple files but still run it all at once!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#packages",
    "href": "Lectures/CSSS508_Lecture2.html#packages",
    "title": "CSSS 508",
    "section": "Packages",
    "text": "Packages\nLast week we discussed Base R and the fact that what makes R extremely powerful and flexible is the large number of diverse user-created packages.\n\n\n\n\nWhat are packages again?\n\n\nRecall that packages are simply collections of functions and tools others have already created, that will make your life easier!\n\n\n\n\n\n\n\n\nThe package 2-step\n\n\nRemember that to install a new package you use install.packages(\"package_name\") in the console. You only need to do this once per machine (unless you want to update to a newer version of a package).\nTo load a package into your current session of R you use library(package_name), preferably at the beginning of your R script or Quarto document. Every time you open RStudio it’s a new session and you’ll have to call library() on the packages you want to use.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#packages-1",
    "href": "Lectures/CSSS508_Lecture2.html#packages-1",
    "title": "CSSS 508",
    "section": "Packages",
    "text": "Packages\nThe Packages tab in the bottom-right pane of RStudio lists your installed packages.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#the-tidyverse",
    "href": "Lectures/CSSS508_Lecture2.html#the-tidyverse",
    "title": "CSSS 508",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe tidyverse refers to two things:\n\n\na specific package in R that loads several core packages within the tidyverse.\n\na specific design philosophy, grammar, and focus on “tidy” data structures developed by Hadley Wickham1 and his team at RStudio (now named Posit).\n\n\nYou can read the official manifesto here.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#the-tidyverse-package",
    "href": "Lectures/CSSS508_Lecture2.html#the-tidyverse-package",
    "title": "CSSS 508",
    "section": "The tidyverse package",
    "text": "The tidyverse package\n\n\nThe core packages within the tidyverse include:\n\n\nggplot2 (visualizations)\ndplyr (data manipulation)\ntidyr (data reshaping)\nreadr (data import/export)\npurrr (iteration)\ntibble (modern dataframe)\nstringr (text data)\nforcats (factors)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "href": "Lectures/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "title": "CSSS 508",
    "section": "The tidyverse philosophy",
    "text": "The tidyverse philosophy\n\n\nThe principles underlying the tidyverse are:\n\n\nReuse existing data structures.\nCompose simple functions with the pipe.\nEmbrace functional programming.\nDesign for humans.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#gapminder-data",
    "href": "Lectures/CSSS508_Lecture2.html#gapminder-data",
    "title": "CSSS 508",
    "section": "Gapminder Data",
    "text": "Gapminder Data\nWe’ll be working with data from Hans Rosling’s Gapminder project. An excerpt of these data can be accessed through an R package called gapminder1. Check the packages tab to see if gapminder appears (unchecked) in your computer’s list of downloaded packages.\n\nIf it doesn’t, run install.packages(\"gapminder\") in the console.\n\n\nNow, load the gapminder package as well as the tidyverse package:\n\nlibrary(gapminder)\n1library(tidyverse)\n\n\n1\n\nEvery time you library (i.e. load) tidyverse it will tell you which individual packages it is loading, as well as all function conflicts it has with other packages loaded in the current session. This is useful information but you can suppress seeing/printing this output by adding the message: false chunk option to your code chunk.\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nCleaned and assembled by Jenny Bryan at UBC.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#check-out-gapminder",
    "href": "Lectures/CSSS508_Lecture2.html#check-out-gapminder",
    "title": "CSSS 508",
    "section": "Check Out Gapminder",
    "text": "Check Out Gapminder\nThe data frame we will work with is called gapminder, available once you have loaded the package. Let’s see its structure:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\n\n\nWhat’s Notable Here?\n\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe’ll spend a lot of time on factors later!\n\nMany observations: \\(n=1704\\) rows\nFor each observation, a few variables: \\(p=6\\) columns\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#base-r-plot",
    "href": "Lectures/CSSS508_Lecture2.html#base-r-plot",
    "title": "CSSS 508",
    "section": "Base R plot",
    "text": "Base R plot\n\n\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\nplot(lifeExp ~ year, \n     data = China, \n     xlab = \"Year\", \n     ylab = \"Life expectancy\",\n     main = \"Life expectancy in China\", \n     col = \"red\", \n     pch = 16)\n\n\nThis plot is made with one function and many arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Don’t worry about the code used to create the object China. We’ll explore data manipulation in a couple weeks!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#fancier-ggplot",
    "href": "Lectures/CSSS508_Lecture2.html#fancier-ggplot",
    "title": "CSSS 508",
    "section": "Fancier: ggplot",
    "text": "Fancier: ggplot\n\n\n\nggplot(data = China, \n       mapping = aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(title = \"Life expectancy in China\", \n       x = \"Year\", \n       y = \"Life expectancy\") +\n  theme_minimal(base_size = 18)\n\n\nThis ggplot is made with many functions and fewer arguments in each.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#ggplot2",
    "href": "Lectures/CSSS508_Lecture2.html#ggplot2",
    "title": "CSSS 508",
    "section": "ggplot2",
    "text": "ggplot2\nThe ggplot2 package provides an alternative toolbox for plotting.\n\nThe core idea underlying this package is the layered grammar of graphics: i.e. that we can break up elements of a plot into pieces and combine them.\n\n\nggplots take a bit more work to create than Base R plots, but are usually:\n\nprettier\nmore professional\nmuch more customizable",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "href": "Lectures/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "title": "CSSS 508",
    "section": "Layered grammar of graphics",
    "text": "Layered grammar of graphics\n\n\n\n\n\n\n\nThis is based on Leland Wilkinson’s book The Grammar of Graphics and extended by Hadley Wickham in his paper “A layered grammar of graphics”.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "href": "Lectures/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "title": "CSSS 508",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n\n\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g. color = \"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers.\n\n\n\n\n\nAesthetic Vignette\n\n\nLearn more about all possible aesthetic mappings here.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#layers",
    "href": "Lectures/CSSS508_Lecture2.html#layers",
    "title": "CSSS 508",
    "section": "Layers",
    "text": "Layers\nLayers are the components of the graph, such as:\n\n\nggplot(): initializes basic plotting object, specifies input data\ngeom_point(): layer of scatterplot points\ngeom_line(): layer of lines\ngeom_histogram(): layer of a histogram\nlabs (or to specify individually: ggtitle(), xlab(), ylab()): layers of labels\nfacet_wrap(): layer creating multiple plot panels\ntheme_bw(): layer replacing default gray background with black-and-white\n\n\n\nLayers are separated by a + sign. For clarity, I usually put each layer on a new line.\n\n\n\nSyntax Warning\n\n\nBe sure to end each line with the +. The code will not run if a new line begins with a +.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#aesthetics",
    "href": "Lectures/CSSS508_Lecture2.html#aesthetics",
    "title": "CSSS 508",
    "section": "Aesthetics",
    "text": "Aesthetics\nAesthetics control the appearance of the layers:\n\nx, y: \\(x\\) and \\(y\\) coordinate values to use\ncolor: set color of elements based on some data value\ngroup: describe which points are conceptually grouped together for the plot (often used with lines)\nsize: set size of points/lines based on some data value (greater than 0)\nalpha: set transparency based on some data value (between 0 and 1)\n\n\n\n\nMapping data inside aes() vs. creating plot-wise settings outside aes()\n\n\nWhen aesthetic arguments are called within aes() they specify a variable of the data and therefore map said value of the data by that aesthetic. Called outside aes(), these are only settings that can be given a specific value but will not display a dimension of the data.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#ggplot-templates",
    "href": "Lectures/CSSS508_Lecture2.html#ggplot-templates",
    "title": "CSSS 508",
    "section": "ggplot Templates",
    "text": "ggplot Templates\n\n\nAll layers have:\nan initializing ggplot call and at least one geom function.\n\n\nsame data & aestheticssame data, diff aestheticsdiff data & aesthetics\n\n\n\nggplot(data = my_dataset, \n       mapping = aes(x = my_x_variable, y = my_y_variable)) +\n  geom_xxx() +\n  other options\n\n\n\n\nggplot(data = my_dataset, \n       mapping = aes(x = my_x_variable, y = my_y_variable)) +\n  geom_xxx() +\n  geom_yyy(mapping = aes(x = my_x_variable, y = my_y_variable)) +\n  other options\n\n\n\n\nggplot() +\n  geom_xxx(data = my_dataset,\n           mapping = aes(x = my_x_variable, y = my_y_variable)) +\n  geom_yyy(data = [dataset2],\n           mapping = aes(x = my_x_variable, y = my_y_variable)) +\n  other options",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nBase ggplot\n\n\n\nggplot(data = China,  \n       aes(x = year, y = lifeExp)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize the plot with ggplot() and x and y aesthetics mapped to variables. These aesthetics will be accessible to any future layers since they’re in the primary layer.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nScatterplot\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a scatterplot layer.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nPoint Color and Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet aesthetics to make the points larger and red. Notice that these “aesthetics” are not inside the aes call the way x and y are on line 2. These are therefore global settings rather than mapping aesthetics.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nX-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to capitalize the x-axis label.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nY-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\", \n       y = \"Life expectancy\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to clean up the y-axis label.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nTitle\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a title layer.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nTheme\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPick a nicer theme with a new layer.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "href": "Lectures/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "title": "CSSS 508",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nText Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncrease the base text size.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nWe have a plot we like for China…\n\n… but what if we want all the countries?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-1",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-1",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nA Mess!\n\n\n\nggplot(data = gapminder,\n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can’t tell countries apart! Maybe we could follow lines?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-2",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-2",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nLines\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) +\n  geom_line(color = \"red\", size = 3) + \n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 doesn’t know how to connect the lines!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-3",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-3",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nGrouping\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat looks more reasonable… but the lines are too thick!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-4",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-4",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nSize\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\") +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMuch better… but what if we highlight regional differences?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-5",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-5",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nColor\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatterns are obvious… but it might be even more impactful if we separate continents completely.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-6",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-6",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nFacets\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow the text is too big!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-7",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-7",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nText Size\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBetter. Do we even need the legend anymore?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-8",
    "href": "Lectures/CSSS508_Lecture2.html#plotting-all-countries-8",
    "title": "CSSS 508",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nNo Legend\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking pretty good!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#make-a-histogram",
    "href": "Lectures/CSSS508_Lecture2.html#make-a-histogram",
    "title": "CSSS 508",
    "section": "Make a histogram",
    "text": "Make a histogram\nIn pairs, create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title.\nAdd the color “salmon” to the entire plot (hint: use the fill argument, not color).\nChange this fill setting to an aesthetic and map continent onto it.\nChange the geom to geom_freqpoly. What happened and how might you fix it?\nAdd facets for continent (create only 1 column).\nAdd one of the built-in themes from ggplot2.\nRemove the legend from the plot.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-1.-set-base-layer",
    "href": "Lectures/CSSS508_Lecture2.html#solution-1.-set-base-layer",
    "title": "CSSS 508",
    "section": "Solution: 1. Set Base Layer",
    "text": "Solution: 1. Set Base Layer\n\nggplot(gapminder, aes(x = lifeExp))",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-2.-add-histogram-layer",
    "href": "Lectures/CSSS508_Lecture2.html#solution-2.-add-histogram-layer",
    "title": "CSSS 508",
    "section": "Solution: 2. Add Histogram Layer",
    "text": "Solution: 2. Add Histogram Layer\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\n\nSetting the bins aesthetic tells ggplot how many values to bin by (lower is more fine-grained, higher is less descriptive).",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-3.-add-label-layers",
    "href": "Lectures/CSSS508_Lecture2.html#solution-3.-add-label-layers",
    "title": "CSSS 508",
    "section": "Solution: 3. Add Label Layers",
    "text": "Solution: 3. Add Label Layers\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-4.-add-fill-setting",
    "href": "Lectures/CSSS508_Lecture2.html#solution-4.-add-fill-setting",
    "title": "CSSS 508",
    "section": "Solution: 4. Add fill setting",
    "text": "Solution: 4. Add fill setting\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30, fill = \"salmon\") +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-5.-add-fill-aesthetic",
    "href": "Lectures/CSSS508_Lecture2.html#solution-5.-add-fill-aesthetic",
    "title": "CSSS 508",
    "section": "Solution: 5. Add fill aesthetic",
    "text": "Solution: 5. Add fill aesthetic\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-6.-change-geometry",
    "href": "Lectures/CSSS508_Lecture2.html#solution-6.-change-geometry",
    "title": "CSSS 508",
    "section": "Solution: 6. Change geometry",
    "text": "Solution: 6. Change geometry\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-6.-change-geometry-1",
    "href": "Lectures/CSSS508_Lecture2.html#solution-6.-change-geometry-1",
    "title": "CSSS 508",
    "section": "Solution: 6. Change geometry",
    "text": "Solution: 6. Change geometry\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-7.-add-facets",
    "href": "Lectures/CSSS508_Lecture2.html#solution-7.-add-facets",
    "title": "CSSS 508",
    "section": "Solution: 7. Add facets",
    "text": "Solution: 7. Add facets\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-8.-add-nicer-theme",
    "href": "Lectures/CSSS508_Lecture2.html#solution-8.-add-nicer-theme",
    "title": "CSSS 508",
    "section": "Solution: 8. Add nicer theme",
    "text": "Solution: 8. Add nicer theme\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") +\n  theme_minimal()",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#solution-9.-remove-legend",
    "href": "Lectures/CSSS508_Lecture2.html#solution-9.-remove-legend",
    "title": "CSSS 508",
    "section": "Solution: 9. Remove legend",
    "text": "Solution: 9. Remove legend\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme_minimal() + \n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#further-customization",
    "href": "Lectures/CSSS508_Lecture2.html#further-customization",
    "title": "CSSS 508",
    "section": "Further customization",
    "text": "Further customization\nNext, we’ll discuss:\n\nStoring, modifying, and saving ggplots\nAdvanced axis changes (scales, text, ticks)\nLegend changes (scales, colors, locations)\nUsing multiple geoms\nAdding annotation for emphasis",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#storing-plots",
    "href": "Lectures/CSSS508_Lecture2.html#storing-plots",
    "title": "CSSS 508",
    "section": "Storing Plots",
    "text": "Storing Plots\nWe can assign a ggplot object to a name:\n\nlifeExp_by_year &lt;- \n  ggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() + \n  facet_wrap(vars(continent)) +\n  theme(legend.position = \"none\")\n\nAfterwards, you can display or modify ggplots…",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#showing-a-stored-graph",
    "href": "Lectures/CSSS508_Lecture2.html#showing-a-stored-graph",
    "title": "CSSS 508",
    "section": "Showing a Stored Graph",
    "text": "Showing a Stored Graph\n\nlifeExp_by_year",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#overriding-previous-specifications",
    "href": "Lectures/CSSS508_Lecture2.html#overriding-previous-specifications",
    "title": "CSSS 508",
    "section": "Overriding previous specifications",
    "text": "Overriding previous specifications\n\nlifeExp_by_year + \n  facet_grid(cols = vars(continent))",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#adding-more-layers",
    "href": "Lectures/CSSS508_Lecture2.html#adding-more-layers",
    "title": "CSSS 508",
    "section": "Adding More Layers",
    "text": "Adding More Layers\n\nlifeExp_by_year +\n  facet_grid(cols = vars(continent)) + \n    theme(legend.position = \"bottom\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#saving-ggplot-plots",
    "href": "Lectures/CSSS508_Lecture2.html#saving-ggplot-plots",
    "title": "CSSS 508",
    "section": "Saving ggplot Plots",
    "text": "Saving ggplot Plots\nIf you want to save a ggplot, use ggsave():\n\nggsave(filename = \"I_saved_a_file.pdf\", \n       plot = lifeExp_by_year,\n       height = 3, width = 5, units = \"in\")\n\nIf you didn’t manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#changing-the-axes",
    "href": "Lectures/CSSS508_Lecture2.html#changing-the-axes",
    "title": "CSSS 508",
    "section": "Changing the Axes",
    "text": "Changing the Axes\nWe can modify the axes in a variety of ways, such as:\n\nChange the \\(x\\) or \\(y\\) range using xlim() or ylim() layers\nChange to a logarithmic or square-root scale on either axis: scale_x_log10(), scale_y_sqrt()\nChange where the major/minor breaks are: scale_x_continuous(breaks =, minor_breaks = )",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#axis-changes",
    "href": "Lectures/CSSS508_Lecture2.html#axis-changes",
    "title": "CSSS 508",
    "section": "Axis Changes",
    "text": "Axis Changes\n\nggplot(data = China, aes(x = year, y = gdpPercap)) +\n    geom_line() +\n    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + \n    xlim(1940, 2010) + ggtitle(\"Chinese GDP per capita\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#precise-legend-position",
    "href": "Lectures/CSSS508_Lecture2.html#precise-legend-position",
    "title": "CSSS 508",
    "section": "Precise Legend Position",
    "text": "Precise Legend Position\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) \n\n\nInstead of coordinates, you could also use “top”, “bottom”, “left”, or “right”.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "href": "Lectures/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "title": "CSSS 508",
    "section": "Scales for Color, Shape, etc.",
    "text": "Scales for Color, Shape, etc.\nScales are layers that control how the mapped aesthetics appear.\nYou can modify these with a scale_[aesthetic]_[option]() layer:\n\n\n[aesthetic] is x, y, color, shape, linetype, alpha, size, fill, etc.\n[option] is something like manual, continuous, binned or discrete (depending on nature of the variable).\n\n\n\nExamples:\n\nscale_alpha_ordinal(): scales alpha transparency for ordinal categorical variable\nscale_x_log10(): maps a log10 transformation of the x-axis variable\nscale_color_manual(): allows manual specification of color aesthetic",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "href": "Lectures/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "title": "CSSS 508",
    "section": "Legend Name and Manual Colors",
    "text": "Legend Name and Manual Colors\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) +\n  scale_color_manual(\n    name = \"Which continent are\\nwe looking at?\", # \\n adds a line break \n    values = c(\"Africa\" = \"#4e79a7\", \"Americas\" = \"#f28e2c\", \n               \"Asia\" = \"#e15759\", \"Europe\" = \"#76b7b2\", \"Oceania\" = \"#59a14f\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis scale argument knows to “map” onto continent because it is specified as the aesthetic for color in our original ggplot object.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "href": "Lectures/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "title": "CSSS 508",
    "section": "Fixed versus Free Scales",
    "text": "Fixed versus Free Scales\n\nUntransformedFixedFree xFree yFree x & y\n\n\n\n\nCode\ngapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) # create subset with only 3 years\n  \nscales_plot &lt;- ggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap, fill = continent)) + \n  geom_jitter(alpha = 0.5, # alpha of points halfway transparent\n              pch = 21, # shape is a circle with fill\n              size = 3, # increase size\n              color = \"black\") + # outline of circle is black \n  scale_fill_viridis_d(option = \"D\") + # circle is filled by colors perceptable for various forms of color-blindness\n  facet_grid(rows = vars(year), # facet by years in the row\n             cols = vars(continent)) + # facet by continent in the columns\n  ggthemes::theme_tufte(base_size = 20) # increase base text size\nscales_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) # transform the y axis to the logarithm to gain better visualization\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_x\") # make the x axis vary by data \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_y\") # make the y axis vary by data \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free\") # make both axes vary by data",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms",
    "href": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms",
    "title": "CSSS 508",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\")",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "href": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "title": "CSSS 508",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n  geom_point(alpha = 0.25)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "href": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "title": "CSSS 508",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n  geom_jitter(alpha = 0.25)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-3",
    "href": "Lectures/CSSS508_Lecture2.html#using-multiple-geoms-3",
    "title": "CSSS 508",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 0.25)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#annotating-specific-datapoints-for-emphasis",
    "href": "Lectures/CSSS508_Lecture2.html#annotating-specific-datapoints-for-emphasis",
    "title": "CSSS 508",
    "section": "Annotating specific datapoints for emphasis",
    "text": "Annotating specific datapoints for emphasis\n\nBasic annotationOffset annotationCode: outliersCode: no outliers\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\", outlier.size = 3) +\n  geom_jitter(data = no_outliers, position = position_jitter(width = 0.1, height = 0), alpha = 0.25, size = 3) + \n  geom_text(data = outliers, aes(label = country), color = \"maroon\", size = 8) + \n  theme_minimal(base_size = 18)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggrepel)\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\", outlier.size = 3) +\n  geom_jitter(data = no_outliers, position = position_jitter(width = 0.1, height = 0), alpha = 0.25, size = 3) + \n  geom_label_repel(data = outliers, aes(label = country), color = \"maroon\", alpha = 0.7, size = 8, max.overlaps = 13) + \n  theme_minimal(base_size = 18)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\noutliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\", # anything lower than the 1st quartile - 1.5*IQR \n                             quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\", # anything higher than the 3rd quartile + 1.5*IQR\n                             .default = NA)) |&gt; \n  filter(!is.na(outlier)) |&gt; # remove non-outliers\n  ungroup() |&gt; group_by(country) |&gt; # regroup by country\n  filter(lifeExp == min(lifeExp)) # filter just the min for each country\n\noutliers\n\n\n# A tibble: 13 × 7\n# Groups:   country [13]\n   country                continent  year lifeExp      pop gdpPercap outlier\n   &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1 Albania                Europe     1952    55.2  1282697     1601. outlier\n 2 Bosnia and Herzegovina Europe     1952    53.8  2791000      974. outlier\n 3 Bulgaria               Europe     1952    59.6  7274900     2444. outlier\n 4 Haiti                  Americas   1952    37.6  3201488     1840. outlier\n 5 Libya                  Africa     2002    72.7  5368585     9535. outlier\n 6 Mauritius              Africa     2007    72.8  1250882    10957. outlier\n 7 Montenegro             Europe     1952    59.2   413834     2648. outlier\n 8 Portugal               Europe     1952    59.8  8526050     3068. outlier\n 9 Reunion                Africa     1992    73.6   622191     6101. outlier\n10 Rwanda                 Africa     1992    23.6  7290203      737. outlier\n11 Serbia                 Europe     1952    58.0  6860147     3581. outlier\n12 Tunisia                Africa     2002    73.0  9770575     5723. outlier\n13 Turkey                 Europe     1952    43.6 22235677     1969. outlier\n\n\n\n\n\n\nCode\nno_outliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\",\n                             quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\", \n                             .default = NA)) |&gt; \n  filter(is.na(outlier)) # remove outliers\n\nno_outliers\n\n\n# A tibble: 1,679 × 7\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap outlier\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1 Afghanistan Asia       1952    28.8  8425333      779. &lt;NA&gt;   \n 2 Afghanistan Asia       1957    30.3  9240934      821. &lt;NA&gt;   \n 3 Afghanistan Asia       1962    32.0 10267083      853. &lt;NA&gt;   \n 4 Afghanistan Asia       1967    34.0 11537966      836. &lt;NA&gt;   \n 5 Afghanistan Asia       1972    36.1 13079460      740. &lt;NA&gt;   \n 6 Afghanistan Asia       1977    38.4 14880372      786. &lt;NA&gt;   \n 7 Afghanistan Asia       1982    39.9 12881816      978. &lt;NA&gt;   \n 8 Afghanistan Asia       1987    40.8 13867957      852. &lt;NA&gt;   \n 9 Afghanistan Asia       1992    41.7 16317921      649. &lt;NA&gt;   \n10 Afghanistan Asia       1997    41.8 22227415      635. &lt;NA&gt;   \n# ℹ 1,669 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#end-result",
    "href": "Lectures/CSSS508_Lecture2.html#end-result",
    "title": "CSSS 508",
    "section": "End Result",
    "text": "End Result\nWe’re going to slowly build up a really detailed plot now!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#base-ggplot-1",
    "href": "Lectures/CSSS508_Lecture2.html#base-ggplot-1",
    "title": "CSSS 508",
    "section": "Base ggplot",
    "text": "Base ggplot\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#lines-1",
    "href": "Lectures/CSSS508_Lecture2.html#lines-1",
    "title": "CSSS 508",
    "section": "Lines",
    "text": "Lines\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s also add a continent-specific average so we can visualize country-deviations from the regional average.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#continent-average",
    "href": "Lectures/CSSS508_Lecture2.html#continent-average",
    "title": "CSSS 508",
    "section": "Continent Average",
    "text": "Continent Average\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA loess curve is something like a moving average.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#facets-1",
    "href": "Lectures/CSSS508_Lecture2.html#facets-1",
    "title": "CSSS 508",
    "section": "Facets",
    "text": "Facets\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFacets allow us to gain a clearer understanding of the regional patterns. We want to differentiate the continent-average line from the country-specific lines though so let’s change its color.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#color-scale",
    "href": "Lectures/CSSS508_Lecture2.html#color-scale",
    "title": "CSSS 508",
    "section": "Color Scale",
    "text": "Color Scale\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHmm, can’t quite see the blue line yet. Let’s make it bigger?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#size-scale",
    "href": "Lectures/CSSS508_Lecture2.html#size-scale",
    "title": "CSSS 508",
    "section": "Size Scale",
    "text": "Size Scale\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt doesn’t look like our color and size scales are actually mapping onto our variables. Why is that?",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#mapping-color-size",
    "href": "Lectures/CSSS508_Lecture2.html#mapping-color-size",
    "title": "CSSS 508",
    "section": "Mapping Color & Size",
    "text": "Mapping Color & Size\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line(aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\")) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHuzzah! Let’s change the transparency on these lines a touch so we can see all our data more easily.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#alpha-transparency",
    "href": "Lectures/CSSS508_Lecture2.html#alpha-transparency",
    "title": "CSSS 508",
    "section": "Alpha (Transparency)",
    "text": "Alpha (Transparency)\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line(alpha = 0.5, \n            aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\"), \n            alpha = 0.5) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we’re getting somewhere! We can also add useful labels and clean up the theme.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#theme-and-labels",
    "href": "Lectures/CSSS508_Lecture2.html#theme-and-labels",
    "title": "CSSS 508",
    "section": "Theme and Labels",
    "text": "Theme and Labels\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat’s our plot showing? We should be explicit about that.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#title-and-subtitle",
    "href": "Lectures/CSSS508_Lecture2.html#title-and-subtitle",
    "title": "CSSS 508",
    "section": "Title and Subtitle",
    "text": "Title and Subtitle\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe x-axis feels a little busy right now…",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#angled-tick-values",
    "href": "Lectures/CSSS508_Lecture2.html#angled-tick-values",
    "title": "CSSS 508",
    "section": "Angled Tick Values",
    "text": "Angled Tick Values\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n  theme(axis.text.x = element_text(angle = 45)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Fewer values might be better than angled labels! Finally, let’s move our legend so it isn’t wasting space.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#legend-position",
    "href": "Lectures/CSSS508_Lecture2.html#legend-position",
    "title": "CSSS 508",
    "section": "Legend Position",
    "text": "Legend Position\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n  theme(legend.position = c(0.82, 0.15), \n        axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVoilà!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "href": "Lectures/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "title": "CSSS 508",
    "section": "tidyverse extended universe",
    "text": "tidyverse extended universe\nggplot2 can obviously do a lot on its own. But because R allows for anyone and everyone to expand the functionality of what already exists, numerous extensions1 to ggplot2 have been created.\n\nWe’ve already seen one example with ggrepel. But let’s look at a few others…\n\nThe full list can be found here.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#geomtextpath",
    "href": "Lectures/CSSS508_Lecture2.html#geomtextpath",
    "title": "CSSS 508",
    "section": "geomtextpath",
    "text": "geomtextpath\nIf you want your labels to follow along the path of your plot (and maintain proper angles and spacing) try using geomtextpath.\n\n\nCode\n# install.packages(\"geomtextpath\") &lt;- run in console first\nlibrary(geomtextpath)\ngapminder |&gt; \n  filter(country %in% c(\"Cuba\", \"Haiti\", \"Dominican Republic\")) |&gt; # restricting data to 3 regionally-specific countries\n  ggplot(aes(x = year, \n             y = lifeExp, \n             color = country, \n             label = country)) + # specify label with text to appear\n  geom_textpath() + # adding textpath geom to put labels within lines\n  theme(legend.position = \"none\") # removing legend",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#ggridges",
    "href": "Lectures/CSSS508_Lecture2.html#ggridges",
    "title": "CSSS 508",
    "section": "ggridges",
    "text": "ggridges\nWe can visualize the differing distributions of a continuous variable by levels of a categorical variable with ggridges!\n\n\nCode\n# install.packages(\"ggridges\") &lt;- run in console first\nlibrary(ggridges)\nggplot(gapminder, \n       aes(x = lifeExp, \n           y = continent, \n           fill = continent, \n           color = continent)) +\n  geom_density_ridges(alpha = 0.5, \n                      show.legend = FALSE) # add ridges, make all a bit transparent, remove legend",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#correlation-matricies",
    "href": "Lectures/CSSS508_Lecture2.html#correlation-matricies",
    "title": "CSSS 508",
    "section": "Correlation Matricies",
    "text": "Correlation Matricies\nMake visually appealing & informative correlation plots in GGally or ggcorrplot.\n\nGGallyggcorrplotBonus: ggpairs() from GGally\n\n\n\n\nCode\n# install.packages(\"GGally\") &lt;- run in console first\nlibrary(GGally)\n\nggcorr(swiss, \n       geom = \"circle\", \n       min_size = 25, # specify minimum size of shape \n       max_size = 25, # specify maximum size of shape \n       label = TRUE, # label circles with correlation coefficient\n       label_alpha = TRUE, # less strong correlations have lower alpha\n       label_round = 2, # round correlations coefficients to 2 decimal points\n       legend.position = c(0.15, 0.6), \n       legend.size = 12)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# install.packages(\"ggcorrplot\") &lt;- run in console first\nlibrary(ggcorrplot)\n\n# compute correlation matrix\ncorr &lt;- round(cor(swiss), 1)\n# computer matrix of correlation p-values\np_mat &lt;- cor_pmat(swiss)\n\nggcorrplot(corr,\n           hc.order = TRUE, # use hierarchical clustering to group like-correlations together\n           type = \"lower\", # only show lower half of correlation matrix\n           p.mat = p_mat, # give corresponding p-values for correlation matrix\n           insig = \"pch\", # add default shape (an X) to correlations that are insignificant\n           outline.color = \"black\", # outline cells in white\n           ggtheme = ggthemes::theme_tufte(), # using a specific theme I like from ggthemes package \n           colors = c(\"#4e79a7\", \"white\", \"#e15759\")) + # specify custom colors \n  theme(legend.position = c(0.15, 0.67))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggpairs(swiss, \n        lower = list(continuous = wrap(\"smooth\", # specify a smoothing line added to scatterplots\n                                       alpha = 0.5, \n                                       size=0.2))) + \n  ggthemes::theme_tufte() # add nice theme from ggthemes",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#patchwork",
    "href": "Lectures/CSSS508_Lecture2.html#patchwork",
    "title": "CSSS 508",
    "section": "patchwork",
    "text": "patchwork\nCombine separate plots into the same graphic using patchwork.\n\n\nCode\n# install.packages(\"patchwork\") &lt;- run in console first\nlibrary(patchwork)\n\n# Create first plot object\nplot_lifeExp &lt;- ggplot(gapminder, \n                       aes(x = lifeExp, y = continent, fill = continent, color = continent)) +\n  geom_density_ridges(alpha = 0.5, show.legend = FALSE)\n\n# Create second plot object\nplot_boxplot &lt;- ggplot(gapminder, \n                       aes(x = continent, y = lifeExp, color = continent), \n                       alpha = 0.5) +\n  geom_boxplot(outlier.colour = \"black\", varwidth = TRUE) + # change outlier color and make width of boxes relative to N\n  coord_flip() + # flip the coordinates (x & y) to align with first plot\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), # add datapoints to boxplot\n              alpha = 0.25) + \n  geom_label_repel(data = outliers, # mapping new dataset with the outliers\n                   aes(label = country), \n                   color = \"black\", \n                   alpha = 0.7, \n                   max.overlaps = 13) +\n  theme(axis.text.y = element_blank(), # remove y axis text \n        axis.ticks.y = element_blank(), # remove y axis ticks \n        axis.title.y = element_blank(), # remove y axis title \n        legend.position = \"none\")\n\nplot_lifeExp + plot_boxplot # simply add two objects together to place side by side",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#themes-in-ggplot2",
    "href": "Lectures/CSSS508_Lecture2.html#themes-in-ggplot2",
    "title": "CSSS 508",
    "section": "themes in ggplot2",
    "text": "themes in ggplot2\nThere are several built-in themes within ggplot2.\n\nbwlightclassiclinedrawdarkminimalgrayvoid\n\n\n\n\nCode\nplot_lifeExp + theme_bw() # reusing plot_lifeExp from previous slide and changing theme\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_light()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_dark()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_void()",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#ggthemes",
    "href": "Lectures/CSSS508_Lecture2.html#ggthemes",
    "title": "CSSS 508",
    "section": "ggthemes",
    "text": "ggthemes\n\nexceleconomistfewfivethirtyeightgdocsstatatuftewsj\n\n\n\n\nCode\nlibrary(ggthemes)\nplot_lifeExp + theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_few()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gdocs()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_tufte()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_wsj()",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "href": "Lectures/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "title": "CSSS 508",
    "section": "Other theme packages and making your own!",
    "text": "Other theme packages and making your own!\nThese are just a handful of all the ready-made theme options available out there. Some other packages that might be useful/fun to check out:\n\n\nhrbrthemes - provides typography-centric themes and theme components for ggplot2\nurbnthemes a set of tools for creating Urban Institute-themed plots and maps in R\nbbplot - provides helpful functions for creating and exporting graphics made in ggplot in the style used by the BBC News data team\nggpomological - A ggplot2 theme based on the USDA Pomological Watercolor Collection\n\n\n\nYou are also able to design your own theme using the theme() function and really getting into the weeds with how to specify all the non-data ink in your plot. Once you come up with a theme you like you can save it as an object (i.e. my_theme) and add it to any ggplot you create to maintain your own unique and consistent style.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture2.html#summary-1",
    "href": "Lectures/CSSS508_Lecture2.html#summary-1",
    "title": "CSSS 508",
    "section": "Summary",
    "text": "Summary\nggplot2 can do a LOT! I don’t expect you to memorize all these tools, and neither should you! With time and practice, you’ll start to remember the key tools.\n\n\n\nWhen in doubt, Google it! (i.e. “R ggplot ‘whatever issue you need help with’”)\nThere are lots of great resources out there:\n\nThe ggplot2 reference page\nThe Cookbook for R website\nThe RStudio ggplot Cheatsheets.\nKieran Healy’s book Data Visualization: A Practical Introduction (right) is targeted at social scientists without technical backgrounds and uses the same tools we’ll be learning in this class.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data viz"
    ]
  },
  {
    "objectID": "Lectures/quarto_anatomy.html",
    "href": "Lectures/quarto_anatomy.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/quarto_anatomy.html#air-quality",
    "href": "Lectures/quarto_anatomy.html#air-quality",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#title-slide",
    "href": "Lectures/CSSS508_Lecture5.html#title-slide",
    "title": "CSSS 508",
    "section": "",
    "text": "Importing, Exporting, & Cleaning Data\nCS&SS 508 • Lecture 5\nJess Kunke (slides adapted from Victoria Sass)",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#data-packages",
    "href": "Lectures/CSSS508_Lecture5.html#data-packages",
    "title": "CSSS 508",
    "section": "Data Packages",
    "text": "Data Packages\nR has a big user base. If you are working with a popular data source, it will often have a devoted R package on CRAN or Github.\nExamples:\n\nWDI: World Development Indicators (World Bank)\ntidycensus: Census and American Community Survey\nquantmod: financial data from Yahoo, FRED, Google\ngssr: The General Social Survey Cumulative Data (1972-2021)\npsidR: Panel Study of Income Dynamics (basic & public datasets)\n\nIf you have an actual data file, you’ll have to import it yourself…",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#delimited-text-files",
    "href": "Lectures/CSSS508_Lecture5.html#delimited-text-files",
    "title": "CSSS 508",
    "section": "Delimited Text Files",
    "text": "Delimited Text Files\nBesides a package, it’s easiest when data is stored in a text file. The most commonly encountered delimited file is a .csv.\nA comma-separated values (.csv) file looks like the following:\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#readr",
    "href": "Lectures/CSSS508_Lecture5.html#readr",
    "title": "CSSS 508",
    "section": "readr",
    "text": "readr\nR has some built-in functions for importing data, such as read.table() and read.csv().\nThe readr package provides similar functions, like read_csv(), that have slightly better features:\n\nFaster!\nBetter defaults (e.g. doesn’t automatically convert characters to factors)\nA bit smarter about dates and times\nLoading progress bars for large files\n\nreadr is one of the core tidyverse packages so loading tidyverse will load it too:\n\nlibrary(tidyverse)\n\nAlternatively, you can just load readr like so:\n\nlibrary(readr)",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#readr-importing-example",
    "href": "Lectures/CSSS508_Lecture5.html#readr-importing-example",
    "title": "CSSS 508",
    "section": "readr Importing Example",
    "text": "readr Importing Example\nLet’s import some data about song ranks on the Billboard Hot 100 in 2000:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\")\n\nHow do we know it loaded?\nLet’s look at it!\n\nglimpse(billboard_2000_raw)\n\n&gt; Rows: 317\n&gt; Columns: 80\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 …\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr…\n&gt; $ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:…\n&gt; $ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-…\n&gt; $ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7…\n&gt; $ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6…\n&gt; $ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5…\n&gt; $ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4…\n&gt; $ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, …\n&gt; $ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3…\n&gt; $ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34…\n&gt; $ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, …\n&gt; $ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, …\n&gt; $ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,…\n&gt; $ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N…\n&gt; $ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N…\n&gt; $ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N…\n&gt; $ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N…\n&gt; $ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,…\n&gt; $ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,…\n&gt; $ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65…\n&gt; $ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68…\n&gt; $ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79…\n&gt; $ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86…\n&gt; $ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA…\n&gt; $ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,…\n&gt; $ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,…\n&gt; $ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,…\n&gt; $ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA…\n&gt; $ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA…\n&gt; $ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA…\n&gt; $ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA…\n&gt; $ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA…\n&gt; $ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA…\n&gt; $ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA…\n&gt; $ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA…\n&gt; $ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#alternate-solution",
    "href": "Lectures/CSSS508_Lecture5.html#alternate-solution",
    "title": "CSSS 508",
    "section": "Alternate Solution",
    "text": "Alternate Solution\nWhen you import data from an external file you’ll also see it in the Global Environment tab in the upper-right pane of RStudio:\n\n\nYou can also import the data manually!\nIn the upper right-hand pane of RStudio (make sure you’re in the Environment tab), select:\nImport Dataset &gt; From Text (readr) and browse to the file on your computer1.\nOnce you’ve imported the data, you can copy/paste the import code from the console into your file!!\nThis makes the process reproducible!\n\n\n\nIdeally you’ve saved it in your project folder! 😌",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#manual-data-import",
    "href": "Lectures/CSSS508_Lecture5.html#manual-data-import",
    "title": "CSSS 508",
    "section": "Manual Data Import",
    "text": "Manual Data Import",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#specifying-nas",
    "href": "Lectures/CSSS508_Lecture5.html#specifying-nas",
    "title": "CSSS 508",
    "section": "Specifying NAs",
    "text": "Specifying NAs\nNAs are technically logical (boolean) variables that indicate a missing value.\nSometimes a particular dataset or file read from a different software will code NAs differently than R. If that’s the case, you can add additional specifications to read_csv for what to read in as NA.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               na = c(\"N/A\", \"999\"))",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#skipping-lines",
    "href": "Lectures/CSSS508_Lecture5.html#skipping-lines",
    "title": "CSSS 508",
    "section": "Skipping lines",
    "text": "Skipping lines\nDepending on how the data were input, there may be several lines that precede the beginning of the data table you’re interested in importing. You can skip these lines of metadata with the skip argument:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               skip = 1)",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#variable-names",
    "href": "Lectures/CSSS508_Lecture5.html#variable-names",
    "title": "CSSS 508",
    "section": "Variable names",
    "text": "Variable names\nread_csv will automatically take the first row as column names. If you want to rename them you can save yourself some time recoding later on if you specify your preferred variable names upfront with the col_names argument.\nIt takes a character vector to be used as column names (in their order of appearance).\n\nbillboard_renamed &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_names = c(\"year\", \"artist\", \"track\", \"time\", \"date_entered\", \n1                                             paste(\"wk\", 1:76, sep = \"_\")))\n\n2billboard_renamed |&gt; names() |&gt; head(10)\n\n\n1\n\npaste “pastes” together the first argument to the second argument (separated by whatever is specified in the sep argument) as character strings. Since the first argument here is a singular value, it is repeated for the entire length of the vector in the second argument. The first several values of paste(\"wk\", 1:76, sep = \"_\") are: wk_1, wk_2, wk_3, wk_4, wk_5, wk_6\n\n2\n\nnames here returns the column names of our data frame.\n\n\n\n\n&gt;  [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date_entered\"\n&gt;  [6] \"wk_1\"         \"wk_2\"         \"wk_3\"         \"wk_4\"         \"wk_5\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#no-variable-names",
    "href": "Lectures/CSSS508_Lecture5.html#no-variable-names",
    "title": "CSSS 508",
    "section": "No variable names",
    "text": "No variable names\nIf you don’t have any variable names you can specify that instead.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_names = FALSE)",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#snake-case",
    "href": "Lectures/CSSS508_Lecture5.html#snake-case",
    "title": "CSSS 508",
    "section": "Snake Case",
    "text": "Snake Case\nIf you simply want to change your variables to snake case (all lower case; words separated by _), you can use the function clean_names() from the janitor package which replaces other punctuation separators with _.\n\n# Download pacakge first\n1# install.packages(\"janitor\")\n\n# Create new object for renamed data\nbillboard_renamed &lt;- billboard_2000_raw |&gt; \n2  janitor::clean_names(numerals = \"right\")\n\nbillboard_renamed |&gt;  names() |&gt; head(10)\n\n\n1\n\nRun in the console first.\n\n2\n\nYou can call a function without loading its package by specifying its package name followed by :: before it;  The numerals argument specifies if you additionally want to put a separator before a number.\n\n\n\n\n&gt;  [1] \"artist\"       \"track\"        \"time\"         \"date_entered\" \"wk_1\"        \n&gt;  [6] \"wk_2\"         \"wk_3\"         \"wk_4\"         \"wk_5\"         \"wk_6\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#other-data-file-types-with-readr",
    "href": "Lectures/CSSS508_Lecture5.html#other-data-file-types-with-readr",
    "title": "CSSS 508",
    "section": "Other Data File Types with readr",
    "text": "Other Data File Types with readr\nThe other functions in readr employ a similar approach to read_csv so the trick is just knowing which to use for what data type.\n\nread_csv2 is separated by semicolons (instead of commas)\nread_tsv is separated by tabs\nread_delim guesses the delimiter\nread_fwf reads in fixed-width-files\nread_table is a variation of fwf where columns are separated by white space\nread_log reads in Apache-style log files",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data",
    "href": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data",
    "title": "CSSS 508",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-1",
    "href": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-1",
    "title": "CSSS 508",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-2",
    "href": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-2",
    "title": "CSSS 508",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\nFor Google Docs Spreadsheets, use package googlesheets42\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells.Very similar to readxl with some slight variations you can read about here.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-3",
    "href": "Lectures/CSSS508_Lecture5.html#other-packages-to-read-in-data-3",
    "title": "CSSS 508",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\nFor Google Docs Spreadsheets, use package googlesheets42\nFor Stata, SPSS, and SAS files, use package haven3\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells.Very similar to readxl with some slight variations you can read about here.SAS, SPSS, and Stata have so-called “labelled” vectors for which haven provides a class to represent in R. Alternatively, you can get rid of them with these functions.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types",
    "href": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types",
    "title": "CSSS 508",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-1",
    "href": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-1",
    "title": "CSSS 508",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#ffa07a,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-2",
    "href": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-2",
    "title": "CSSS 508",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#ffa07a,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-3",
    "href": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-3",
    "title": "CSSS 508",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#ffa07a,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-4",
    "href": "Lectures/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-4",
    "title": "CSSS 508",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#ffa07a,color:#000000,stroke:#000000",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#a-common-issue-with-reading-in-data",
    "href": "Lectures/CSSS508_Lecture5.html#a-common-issue-with-reading-in-data",
    "title": "CSSS 508",
    "section": "A Common Issue with Reading in Data",
    "text": "A Common Issue with Reading in Data\nOne of the most common problems when reading in data: reading in the wrong data type. Most often, given the heuristic provided in the last slide, readr will parse a variable as a character string to preserve whatever it contains.\nLet’s actually look at how the billboard data was read in:\n\nglimpse(billboard_2000_raw) \n\n&gt; Rows: 317\n&gt; Columns: 80\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 …\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr…\n&gt; $ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:…\n&gt; $ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-…\n&gt; $ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7…\n&gt; $ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6…\n&gt; $ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5…\n&gt; $ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4…\n&gt; $ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, …\n&gt; $ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3…\n&gt; $ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34…\n&gt; $ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, …\n&gt; $ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, …\n&gt; $ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,…\n&gt; $ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N…\n&gt; $ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N…\n&gt; $ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N…\n&gt; $ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N…\n&gt; $ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,…\n&gt; $ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,…\n&gt; $ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65…\n&gt; $ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68…\n&gt; $ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79…\n&gt; $ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86…\n&gt; $ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA…\n&gt; $ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,…\n&gt; $ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,…\n&gt; $ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,…\n&gt; $ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA…\n&gt; $ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA…\n&gt; $ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA…\n&gt; $ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA…\n&gt; $ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA…\n&gt; $ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA…\n&gt; $ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA…\n&gt; $ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA…\n&gt; $ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n&gt; $ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n&gt; $ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#what-went-wrong",
    "href": "Lectures/CSSS508_Lecture5.html#what-went-wrong",
    "title": "CSSS 508",
    "section": "What Went Wrong?",
    "text": "What Went Wrong?\nSince readr uses the values in the first 1000 rows to guess the type of the column (logical, numeric, date/date-time, character), if the first 1000 rows don’t have any data, they will be coded as logical variables.\nThere are not many songs in the data that charted for 60+ weeks—and none in the first 1000 that charted for 66+ weeks!\n\n\n\nNA is logical?\n\n\n\nclass(c(T, F, NA, FALSE, TRUE))\n1class(c(1, NA, 17.5, 5.3, NA))\n2class(as.Date(c(NA, \"2023-10-31\", \"1986-06-21\", \"1997-01-15\"), tz = \"America/Los_Angeles\"))\nclass(c(\"apple\", NA, \"mango\", \"blackberry\", \"plum\")) \nclass(c(NA, NA, NA, NA, NA))\n\n\n1\n\nclass returns the data type of its first argument.\n\n2\n\nas.Date turns a character string of dates into an official date class in Base R. If we had an accompanying time stamp we would need to use as.POSIXct which turns a character string of dates and times into an official date-time class in Base R.\n\n\n\n\n&gt; [1] \"logical\"\n&gt; [1] \"numeric\"\n&gt; [1] \"Date\"\n&gt; [1] \"character\"\n&gt; [1] \"logical\"\n\n\n\n\n\n\n\nTechnically, NAs can be any data type depending upon what they are grouped with. However, by themselves they are a logical indicator of missing data, so their class is logical.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#column-types",
    "href": "Lectures/CSSS508_Lecture5.html#column-types",
    "title": "CSSS 508",
    "section": "Column types",
    "text": "Column types\nSince the wk* variables should all be read in as integers, we can specify this explicitly with the col_types argument.\n\n# Create character string of shortcode column types\n1bb_types &lt;- paste(c(\"cctD\", rep(\"i\", 76)), collapse=\"\")\nbb_types \n\n\n1\n\nYou can short-code column types with c = character, t = time, D = date, i = integer.  The collapse argument collapses the first two arguments into one complete character string.\n\n\n\n\n&gt; [1] \"cctDiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"\n\n\n\n# re-read in data with column types specified\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n2                               col_types = bb_types)\n3billboard_2000_raw |&gt; select(wk66:wk76)\n\n\n2\n\nThis string now specifies the data type for each column of our data frame. Visit this reference page to see all available column types and their short codes.\n\n3\n\nChecking the previously incorrectly parsed variables\n\n\n\n\n&gt; # A tibble: 317 × 11\n&gt;     wk66  wk67  wk68  wk69  wk70  wk71  wk72  wk73  wk74  wk75  wk76\n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n&gt;  1    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  2    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  3    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  4    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  5    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  6    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  7    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  8    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  9    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt; 10    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt; # ℹ 307 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#column-types-1",
    "href": "Lectures/CSSS508_Lecture5.html#column-types-1",
    "title": "CSSS 508",
    "section": "Column types",
    "text": "Column types\nTo specify a default column type you can use .default like so:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_types = cols(.default = col_character())) \n\n\nAnother useful helper is cols_only() for when you only want to read in a subset of all available variables.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_types = cols_only(x = col_character)) \n\n\nIn summary, the col_types argument gives you greater control over how your data are read in and can save you recoding time down the road and/or point out where your data are behaving differently than you expect.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#reading-in-multiple-files",
    "href": "Lectures/CSSS508_Lecture5.html#reading-in-multiple-files",
    "title": "CSSS 508",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf your data are split across multiple files you can read them in all at once by specifying the id argument.\n\n# Create list of files manually\nsales_files &lt;- c(\"data/01_sales.csv\", \"data/02_sales.csv\", \"data/03_sales.csv\")\nread_csv(sales_files, id = \"file\")\n\n&gt; # A tibble: 19 × 6\n&gt;    file              month     year brand  item     n\n&gt;    &lt;chr&gt;             &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt;  1 data/01_sales.csv January   2019     1  1234     3\n&gt;  2 data/01_sales.csv January   2019     1  8721     9\n&gt;  3 data/01_sales.csv January   2019     1  1822     2\n&gt;  4 data/01_sales.csv January   2019     2  3333     1\n&gt;  5 data/01_sales.csv January   2019     2  2156     9\n&gt;  6 data/01_sales.csv January   2019     2  3987     6\n&gt;  7 data/01_sales.csv January   2019     2  3827     6\n&gt;  8 data/02_sales.csv February  2019     1  1234     8\n&gt;  9 data/02_sales.csv February  2019     1  8721     2\n&gt; 10 data/02_sales.csv February  2019     1  1822     3\n&gt; 11 data/02_sales.csv February  2019     2  3333     1\n&gt; 12 data/02_sales.csv February  2019     2  2156     3\n&gt; 13 data/02_sales.csv February  2019     2  3987     6\n&gt; 14 data/03_sales.csv March     2019     1  1234     3\n&gt; 15 data/03_sales.csv March     2019     1  3627     1\n&gt; 16 data/03_sales.csv March     2019     1  8820     3\n&gt; 17 data/03_sales.csv March     2019     2  7253     1\n&gt; 18 data/03_sales.csv March     2019     2  8766     3\n&gt; 19 data/03_sales.csv March     2019     2  8288     6",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#reading-in-multiple-files-1",
    "href": "Lectures/CSSS508_Lecture5.html#reading-in-multiple-files-1",
    "title": "CSSS 508",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf you have too many files to reasonably type out all their names you can also use the base r function list.files to list the files for you.\n\n# Create list of files with pattern-matching\n1sales_files &lt;- list.files(\"data\", pattern = \"sales\\\\.csv$\", full.names = TRUE)\nsales_files\n\n\n1\n\nWe will discuss pattern-matching more in a couple of weeks; if all your data was in one folder without anything else in it, you wouldn’t need to specify this argument. Sometimes, however, you may be searching through larger directories that you did not organize and that’s when pattern-matching is really powerful.\n\n\n\n\n&gt; [1] \"data/01_sales.csv\" \"data/02_sales.csv\" \"data/03_sales.csv\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#data-entry",
    "href": "Lectures/CSSS508_Lecture5.html#data-entry",
    "title": "CSSS 508",
    "section": "Data Entry",
    "text": "Data Entry\nSometimes you’ll need to create a data set in your code. You can do this two ways:\n\ntibble()tribble()\n\n\nTibbles lay out the data by columns (i.e. a dataframe transposed).\n\n# Creating data with tibble\ntibble( \n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n\n&gt; # A tibble: 3 × 3\n&gt;       x y         z\n&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n&gt; 1     1 h      0.08\n&gt; 2     2 m      0.83\n&gt; 3     5 g      0.6\n\n\n\n\ntribble() (transposed tibble) allows you to lay out the data by rows, the way a dataframe looks.\n\n# Creating data with tribble\ntribble( \n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n&gt; # A tibble: 3 × 3\n&gt;       x y         z\n&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n&gt; 1     1 h      0.08\n&gt; 2     2 m      0.83\n&gt; 3     5 g      0.6",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#writing-delimited-files",
    "href": "Lectures/CSSS508_Lecture5.html#writing-delimited-files",
    "title": "CSSS 508",
    "section": "Writing Delimited Files",
    "text": "Writing Delimited Files\nGetting data out of R into a delimited file is very similar to getting it into R:\n\nwrite_csv(billboard_2000_raw, path = \"data/billboard_data.csv\")\n\nThis saved the data we pulled off the web in a file called billboard_data.csv in the data folder of my working directory.\nHowever, saving data in this way will not preserve R data types since delimited files code everything as a character string.\nTo save R objects and all associated metadata you have two options:\n\n.Rds format:.Rdata or .Rda format:\n\n\n\nUsed for single objects, doesn’t save the original object name\nSave: write_rds(old_object_name, \"path.Rds\")\nLoad: new_object_name &lt;- read_rds(\"path.Rds\")\n\n\n\n\nUsed for saving multiple files where the original object names are preserved\nSave: save(object1, object2, ... , file = \"path.Rdata\")\nLoad: load(\"path.Rdata\") without assignment operator",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#writing-other-file-types",
    "href": "Lectures/CSSS508_Lecture5.html#writing-other-file-types",
    "title": "CSSS 508",
    "section": "Writing Other File-Types",
    "text": "Writing Other File-Types\n\nwritexlgooglesheets4haven\n\n\n\n\n\nwrite_xlsx() writes to an xlsx file\n\n\n\n\n\n\n\n\n\nsheet_write() or write_sheet() (over)writes new data into a Sheet\ngs4_create() creates a new Sheet\nsheet_append() appends rows to a sheet\nrange_write() (over)writes new data into a range\nrange_flood() floods a range of cells\n`range_clear() clears a range of cells\n\n\n\n\n\n\n\n\n\nwrite_dta() writes Stata DTA files\nwrite_sav() writes SPSS files\nwrite_xpt() writes SAS transport files",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#importing-tidying-data",
    "href": "Lectures/CSSS508_Lecture5.html#importing-tidying-data",
    "title": "CSSS 508",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the CSSS 508 Canvas page &gt; Files.\nDownload the data folder or open the folder and download the individual data files.\nMove this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\n\nR Script or .qmd",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#initial-spot-checks",
    "href": "Lectures/CSSS508_Lecture5.html#initial-spot-checks",
    "title": "CSSS 508",
    "section": "Initial Spot Checks",
    "text": "Initial Spot Checks\nFirst things to check after loading new data:\n\nDid all the rows/columns from the original file make it in?\n\nCheck using dim() or str()\n\nAre the column names in good shape?\n\nUse names() to check; re-read in using col_names() or fix with rename()\n\nAre there “decorative” blank rows or columns to remove?\n\nfilter() or select() out those rows/columns\n\nHow are missing values represented: NA, \" \" (blank), . (period), 999?\n\nRead in the data again specifying NAs with the na argument\n\nAre there character data (e.g. ZIP codes with leading zeroes) being incorrectly represented as numeric or vice versa?\n\nRead in the data again specifying desired col_types",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#what-is-tidy-data",
    "href": "Lectures/CSSS508_Lecture5.html#what-is-tidy-data",
    "title": "CSSS 508",
    "section": "What is Tidy Data?",
    "text": "What is Tidy Data?\n1\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#why-do-we-want-tidy-data",
    "href": "Lectures/CSSS508_Lecture5.html#why-do-we-want-tidy-data",
    "title": "CSSS 508",
    "section": "Why do we Want Tidy Data?",
    "text": "Why do we Want Tidy Data?\n\nEasier to understand many rows than many columns1\nRequired for plotting in ggplot22\nRequired for many types of statistical procedures (e.g. hierarchical or mixed effects models)\nFewer issues with missing values and “imbalanced” repeated measures data\nHaving a consistent method for storing data means it’s easier to learn the tools to work with it since there’s an underlying uniformity.\n\nMost real-world data is not tidy because data are often organized for goals other than analysis (i.e. data entry) and most people aren’t familiar with the principles of tidy data.\nPlacing variables in columns also leverages R’s vectorized nature, i.e. most built-in R functions work with values of vectors.In fact, all tidyverse functions are designed to work with tidy data.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#why-do-we-want-tidy-data-1",
    "href": "Lectures/CSSS508_Lecture5.html#why-do-we-want-tidy-data-1",
    "title": "CSSS 508",
    "section": "Why do we Want Tidy Data?",
    "text": "Why do we Want Tidy Data?\n1\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#slightly-messy-data",
    "href": "Lectures/CSSS508_Lecture5.html#slightly-messy-data",
    "title": "CSSS 508",
    "section": "Slightly “Messy” Data",
    "text": "Slightly “Messy” Data\n\n\n\n\n\nProgram\nFirst Year\nSecond Year\n\n\n\n\nEvans School\n10\n6\n\n\nArts & Sciences\n5\n6\n\n\nPublic Health\n2\n3\n\n\nOther\n5\n1\n\n\n\n\n\nWhat is an observation?\n\nA group of students from a program of a given year\n\nWhat are the variables?\n\nProgram, Year\n\nWhat are the values?\n\nProgram: Evans School, Arts & Sciences, Public Health, Other\nYear: First, Second – in column headings. Bad!\nCount: spread over two columns!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#tidy-version",
    "href": "Lectures/CSSS508_Lecture5.html#tidy-version",
    "title": "CSSS 508",
    "section": "Tidy Version",
    "text": "Tidy Version\n\n\n\n\n\nProgram\nYear\nCount\n\n\n\n\nEvans School\nFirst\n10\n\n\nEvans School\nSecond\n6\n\n\nArts & Sciences\nFirst\n5\n\n\nArts & Sciences\nSecond\n6\n\n\nPublic Health\nFirst\n2\n\n\nPublic Health\nSecond\n3\n\n\nOther\nFirst\n5\n\n\nOther\nSecond\n1\n\n\n\n\n\nEach variable is a column.\nEach observation is a row.\nEach cell has a single value.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "href": "Lectures/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "title": "CSSS 508",
    "section": "Billboard is Just Ugly-Messy",
    "text": "Billboard is Just Ugly-Messy\n\n\n&gt; # A tibble: 10 × 80\n&gt;    artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7\n&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;tim&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n&gt;  1 2 Pac      Baby… 04:22 2000-02-26      87    82    72    77    87    94    99\n&gt;  2 2Ge+her    The … 03:15 2000-09-02      91    87    92    NA    NA    NA    NA\n&gt;  3 3 Doors D… Kryp… 03:53 2000-04-08      81    70    68    67    66    57    54\n&gt;  4 3 Doors D… Loser 04:24 2000-10-21      76    76    72    69    67    65    55\n&gt;  5 504 Boyz   Wobb… 03:35 2000-04-15      57    34    25    17    17    31    36\n&gt;  6 98^0       Give… 03:24 2000-08-19      51    39    34    26    26    19     2\n&gt;  7 A*Teens    Danc… 03:44 2000-07-08      97    97    96    95   100    NA    NA\n&gt;  8 Aaliyah    I Do… 04:15 2000-01-29      84    62    51    41    38    35    35\n&gt;  9 Aaliyah    Try … 04:03 2000-03-18      59    53    38    28    21    18    16\n&gt; 10 Adams, Yo… Open… 05:30 2000-08-26      76    76    74    69    68    67    61\n&gt; # ℹ 69 more variables: wk8 &lt;int&gt;, wk9 &lt;int&gt;, wk10 &lt;int&gt;, wk11 &lt;int&gt;,\n&gt; #   wk12 &lt;int&gt;, wk13 &lt;int&gt;, wk14 &lt;int&gt;, wk15 &lt;int&gt;, wk16 &lt;int&gt;, wk17 &lt;int&gt;,\n&gt; #   wk18 &lt;int&gt;, wk19 &lt;int&gt;, wk20 &lt;int&gt;, wk21 &lt;int&gt;, wk22 &lt;int&gt;, wk23 &lt;int&gt;,\n&gt; #   wk24 &lt;int&gt;, wk25 &lt;int&gt;, wk26 &lt;int&gt;, wk27 &lt;int&gt;, wk28 &lt;int&gt;, wk29 &lt;int&gt;,\n&gt; #   wk30 &lt;int&gt;, wk31 &lt;int&gt;, wk32 &lt;int&gt;, wk33 &lt;int&gt;, wk34 &lt;int&gt;, wk35 &lt;int&gt;,\n&gt; #   wk36 &lt;int&gt;, wk37 &lt;int&gt;, wk38 &lt;int&gt;, wk39 &lt;int&gt;, wk40 &lt;int&gt;, wk41 &lt;int&gt;,\n&gt; #   wk42 &lt;int&gt;, wk43 &lt;int&gt;, wk44 &lt;int&gt;, wk45 &lt;int&gt;, wk46 &lt;int&gt;, wk47 &lt;int&gt;, …\n\n\n\n\nWeek columns continue up to wk76!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#billboard",
    "href": "Lectures/CSSS508_Lecture5.html#billboard",
    "title": "CSSS 508",
    "section": "Billboard",
    "text": "Billboard\n\nWhat are the observations in the data?\n\nSong on the Billboard chart each week\n\nWhat are the variables in the data?\n\nYear, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (spread over many columns), rank during week (spread over many columns)\n\nWhat are the values in the data?\n\ne.g. 2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (stuck in column headings); rank 68 (spread over many columns)",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#reminder-why-do-we-want-tidy-data",
    "href": "Lectures/CSSS508_Lecture5.html#reminder-why-do-we-want-tidy-data",
    "title": "CSSS 508",
    "section": "Reminder: Why do we Want Tidy Data?",
    "text": "Reminder: Why do we Want Tidy Data?\n1\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#tidyr",
    "href": "Lectures/CSSS508_Lecture5.html#tidyr",
    "title": "CSSS 508",
    "section": "tidyr",
    "text": "tidyr\nThe tidyr package provides functions to tidy up data.\nKey functions:\n\npivot_longer(): takes a set of columns and pivots them down (“longer”) to make two new columns (which you can name yourself):\n\nA name column that stores the original column names\nA value with the values in those original columns\n\npivot_wider(): inverts pivot_longer() by taking two columns and pivoting them up and across (“wider”) into multiple columns",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_longer",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_longer",
    "title": "CSSS 508",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_longer-1",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_longer-1",
    "title": "CSSS 508",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_longer-2",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_longer-2",
    "title": "CSSS 508",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_longer-3",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_longer-3",
    "title": "CSSS 508",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_longer-example",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_longer-example",
    "title": "CSSS 508",
    "section": "pivot_longer() Example",
    "text": "pivot_longer() Example\n\n1billboard_2000 &lt;- billboard_renamed |&gt;\n2  pivot_longer(cols = starts_with(\"wk_\"),\n               names_to =\"week\",\n               values_to = \"rank\")\n\nbillboard_2000 |&gt; head(10)\n\n\n1\n\nbillboard_renamed here has snake_case variable names and correctly specified column types\n\n2\n\nstarts_with() is one of the helper functions from tidyselect that helps select certain common patterns. We could have also used cols = wk1:wk76.\n\n\n\n\n&gt; # A tibble: 10 × 6\n&gt;    artist track                   time   date_entered week   rank\n&gt;    &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;int&gt;\n&gt;  1 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_1     87\n&gt;  2 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_2     82\n&gt;  3 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_3     72\n&gt;  4 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_4     77\n&gt;  5 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_5     87\n&gt;  6 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_6     94\n&gt;  7 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_7     99\n&gt;  8 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_8     NA\n&gt;  9 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_9     NA\n&gt; 10 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_10    NA\n\n\nNow we have a single week column!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#lots-of-missing-values",
    "href": "Lectures/CSSS508_Lecture5.html#lots-of-missing-values",
    "title": "CSSS 508",
    "section": "Lots of Missing Values?!",
    "text": "Lots of Missing Values?!\n\nglimpse(billboard_2000)\n\n&gt; Rows: 24,092\n&gt; Columns: 6\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 …\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"Baby Don't Cry (Keep...\", \"Ba…\n&gt; $ time         &lt;time&gt; 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:…\n&gt; $ date_entered &lt;date&gt; 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-…\n&gt; $ week         &lt;chr&gt; \"wk_1\", \"wk_2\", \"wk_3\", \"wk_4\", \"wk_5\", \"wk_6\", \"wk_7\", \"…\n&gt; $ rank         &lt;int&gt; 87, 82, 72, 77, 87, 94, 99, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nIt looks like 2 Pac’s song “Baby Don’t Cry” was only on the Billboard Hot 100 for 7 weeks and then dropped off the charts.\n\nsummary(billboard_2000$rank)\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n&gt;    1.00   26.00   51.00   51.05   76.00  100.00   18785\n\n\nWe don’t want to keep the 18785 rows with missing ranks.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "href": "Lectures/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "title": "CSSS 508",
    "section": "Pivoting Better: values_drop_na",
    "text": "Pivoting Better: values_drop_na\nAdding the argument values_drop_na = TRUE to pivot_longer() will remove rows with missing ranks. Since these NAs don’t really represent unknown observations (i.e. they were forced to exist by the structure of the dataset) this is an appropriate approach here.\n\n#| code-line-numbers: \"|5\"\nbillboard_2000 &lt;- billboard_renamed |&gt; \n  pivot_longer(cols = wk_1:wk_76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n&gt;    1.00   26.00   51.00   51.05   76.00  100.00\n\n\nNo more NA values!\n\ndim(billboard_2000)\n\n&gt; [1] 5307    6\n\n\nAnd way fewer rows!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#parse_number",
    "href": "Lectures/CSSS508_Lecture5.html#parse_number",
    "title": "CSSS 508",
    "section": "parse_number()",
    "text": "parse_number()\nThe week column is of the type character, but it should be numeric.\n\nhead(billboard_2000$week)\n\n&gt; [1] \"wk_1\" \"wk_2\" \"wk_3\" \"wk_4\" \"wk_5\" \"wk_6\"\n\n\nparse_number() grabs just the numeric information from a character string:\n\nbillboard_2000 &lt;- billboard_2000 |&gt; \n3    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n\n\n3\n\nYou can use mutate() to overwrite existing columns.\n\n\n\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n&gt;    1.00    5.00   10.00   11.47   16.00   65.00\n\n\nMore sophisticated tools for character strings will be covered later in this course!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#use-pivot_longer-arguments",
    "href": "Lectures/CSSS508_Lecture5.html#use-pivot_longer-arguments",
    "title": "CSSS 508",
    "section": "Use pivot_longer arguments",
    "text": "Use pivot_longer arguments\nAlternatively (and more efficiently), there are a number of optional arguments for pivot_longer that are meant to help deal with naming issues.\n\nbillboard_2000 &lt;- billboard_renamed |&gt; \n  pivot_longer(starts_with(\"wk_\"), \n               names_to        = \"week\", \n               values_to       = \"rank\",\n               values_drop_na  = TRUE,\n4               names_prefix    = \"wk_\",\n5               names_transform = list(week = as.integer))\n\nhead(billboard_2000, 5)\n\n\n4\n\nnames_prefix is used to remove “wk_” from the values of week\n\n5\n\nnames_transform converts week into an integer number.\n\n\n\n\n&gt; # A tibble: 5 × 6\n&gt;   artist track                   time   date_entered  week  rank\n&gt;   &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt;\n&gt; 1 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n&gt; 2 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n&gt; 3 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n&gt; 4 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n&gt; 5 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       5    87",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names",
    "href": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names",
    "title": "CSSS 508",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables.\nThis dataset contains tuberculosis diagnoses collected by the World Health Organization.\n\nwho2\n\n&gt; # A tibble: 7,240 × 58\n&gt;    country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n&gt;    &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n&gt;  2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n&gt;  3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n&gt;  4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n&gt;  5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n&gt;  6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n&gt;  7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n&gt;  8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n&gt;  9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n&gt; 10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n&gt; # ℹ 7,230 more rows\n&gt; # ℹ 50 more variables: sp_m_65 &lt;dbl&gt;, sp_f_014 &lt;dbl&gt;, sp_f_1524 &lt;dbl&gt;,\n&gt; #   sp_f_2534 &lt;dbl&gt;, sp_f_3544 &lt;dbl&gt;, sp_f_4554 &lt;dbl&gt;, sp_f_5564 &lt;dbl&gt;,\n&gt; #   sp_f_65 &lt;dbl&gt;, sn_m_014 &lt;dbl&gt;, sn_m_1524 &lt;dbl&gt;, sn_m_2534 &lt;dbl&gt;,\n&gt; #   sn_m_3544 &lt;dbl&gt;, sn_m_4554 &lt;dbl&gt;, sn_m_5564 &lt;dbl&gt;, sn_m_65 &lt;dbl&gt;,\n&gt; #   sn_f_014 &lt;dbl&gt;, sn_f_1524 &lt;dbl&gt;, sn_f_2534 &lt;dbl&gt;, sn_f_3544 &lt;dbl&gt;,\n&gt; #   sn_f_4554 &lt;dbl&gt;, sn_f_5564 &lt;dbl&gt;, sn_f_65 &lt;dbl&gt;, ep_m_014 &lt;dbl&gt;, …\n\n\nThe first two columns are self explanatory but what’s going on with the rest?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names-1",
    "href": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names-1",
    "title": "CSSS 508",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nData documentation and some minor investigation would lead you to figure out that the three elements in each of these column names are actually data!\n\nThe first piece, sp/sn/rel/ep, describes the method used for the diagnosis\nThe second piece, m/f is the gender (coded as a binary variable in this dataset)\nThe third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example)\n\nTo organize the six pieces of information in this dataset into six separate columns, we use pivot_longer() with a vector of column names for names_to and instructions for splitting the original variable names into pieces for names_sep as well as a column name for values_to!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names-2",
    "href": "Lectures/CSSS508_Lecture5.html#multiple-variables-in-column-names-2",
    "title": "CSSS 508",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\n\nwho2 |&gt; \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n6    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n\n6\n\nYou can use names_pattern instead of names_sep to extract variables from more complicated naming scenarios once you’ve learned regular expressions in a few weeks.\n\n\n\n\n&gt; # A tibble: 405,440 × 6\n&gt;    country      year diagnosis gender age   count\n&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n&gt;  1 Afghanistan  1980 sp        m      014      NA\n&gt;  2 Afghanistan  1980 sp        m      1524     NA\n&gt;  3 Afghanistan  1980 sp        m      2534     NA\n&gt;  4 Afghanistan  1980 sp        m      3544     NA\n&gt;  5 Afghanistan  1980 sp        m      4554     NA\n&gt;  6 Afghanistan  1980 sp        m      5564     NA\n&gt;  7 Afghanistan  1980 sp        m      65       NA\n&gt;  8 Afghanistan  1980 sp        f      014      NA\n&gt;  9 Afghanistan  1980 sp        f      1524     NA\n&gt; 10 Afghanistan  1980 sp        f      2534     NA\n&gt; # ℹ 405,430 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#variable-values-in-column-names",
    "href": "Lectures/CSSS508_Lecture5.html#variable-values-in-column-names",
    "title": "CSSS 508",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\nThis dataset contains data about five families, with the names and dates of birth of up to two children.\n\nhousehold\n\n&gt; # A tibble: 5 × 5\n&gt;   family dob_child1 dob_child2 name_child1 name_child2\n&gt;    &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;      \n&gt; 1      1 1998-11-26 2000-01-29 Susan       Jose       \n&gt; 2      2 1996-06-22 NA         Mark        &lt;NA&gt;       \n&gt; 3      3 2002-07-11 2004-04-05 Sam         Seth       \n&gt; 4      4 2004-10-10 2009-08-27 Craig       Khai       \n&gt; 5      5 2000-12-05 2005-02-28 Parker      Gracie\n\n\nThe new challenge in this dataset is that the column names contain the names of two variables (dob, name) and the values of another (child, with values 1 or 2).",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#variable-values-in-column-names-1",
    "href": "Lectures/CSSS508_Lecture5.html#variable-values-in-column-names-1",
    "title": "CSSS 508",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n7    names_to = c(\".value\", \"child\"),\n    names_sep = \"_\", \n8    values_drop_na = TRUE\n  )\n\n\n7\n\n.value isn’t the name of a variable but a unique value that tells pivot_longer to use the first component of the pivoted column name as a variable name in the output.\n\n8\n\nUsing values_drop_na = TRUE again since not every family has 2 children.\n\n\n\n\n&gt; # A tibble: 9 × 4\n&gt;   family child  dob        name  \n&gt;    &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n&gt; 1      1 child1 1998-11-26 Susan \n&gt; 2      1 child2 2000-01-29 Jose  \n&gt; 3      2 child1 1996-06-22 Mark  \n&gt; 4      3 child1 2002-07-11 Sam   \n&gt; 5      3 child2 2004-04-05 Seth  \n&gt; 6      4 child1 2004-10-10 Craig \n&gt; 7      4 child2 2009-08-27 Khai  \n&gt; 8      5 child1 2000-12-05 Parker\n&gt; 9      5 child2 2005-02-28 Gracie",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_wider",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_wider",
    "title": "CSSS 508",
    "section": "pivot_wider",
    "text": "pivot_wider\npivot_wider() is the opposite of pivot_longer(), which you use if you have data for the same observation taking up multiple rows.\nHere’s an example of data that we probably want to pivot wider (unless we want to plot each statistic in its own facet):\n\n\n&gt; # A tibble: 6 × 3\n&gt;   Group Statistic Value\n&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n&gt; 1 A     Mean       1.28\n&gt; 2 A     Median     1   \n&gt; 3 A     SD         0.72\n&gt; 4 B     Mean       2.81\n&gt; 5 B     Median     2   \n&gt; 6 B     SD         1.33\n\n\nA common cue to use pivot_wider() is having measurements of different quantities in the same column.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#pivot_wider-example",
    "href": "Lectures/CSSS508_Lecture5.html#pivot_wider-example",
    "title": "CSSS 508",
    "section": "pivot_wider Example",
    "text": "pivot_wider Example\n\nwide_stats &lt;- long_stats |&gt; \n9  pivot_wider(id_cols = Group,\n10              names_from = Statistic,\n11              values_from = Value)\nwide_stats\n\n\n9\n\nid_cols is the column that uniquely identifies each row in the new dataset. Default is everything not in names_from and values_from.\n\n10\n\nnames_from provides the names that will be used for the new columns\n\n11\n\nvalues_from provides the values that will be used to populate the cells of the new columns.\n\n\n\n\n&gt; # A tibble: 2 × 4\n&gt;   Group  Mean Median    SD\n&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1 A      1.28      1  0.72\n&gt; 2 B      2.81      2  1.33\n\n\npivot_wider() also has a number of optional names_* and values_* arguments for more complicated transformations.\n\n\n\nNested Data\n\n\nIf there are multiple rows in the input that correspond to one cell in the output you’ll get a list-column. This means that you 1) need to fix something in your code/data because it shouldn’t be nested in this way or 2) need to use unnest_wider() or unnest_longer() in order to access this column of data. More on this here.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#importing-tidying-data-1",
    "href": "Lectures/CSSS508_Lecture5.html#importing-tidying-data-1",
    "title": "CSSS 508",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the CSSS 508 Canvas page &gt; Files.\nDownload the data folder or open the folder and download the individual data files.\nMove this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nPivot your data to make it tidy2.\n\nR Script or .qmdThere should be 3 columns in your final dataset",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#data-types-in-r",
    "href": "Lectures/CSSS508_Lecture5.html#data-types-in-r",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nGoing back to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#data-types-in-r-1",
    "href": "Lectures/CSSS508_Lecture5.html#data-types-in-r-1",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nGoing back to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#data-types-in-r-2",
    "href": "Lectures/CSSS508_Lecture5.html#data-types-in-r-2",
    "title": "CSSS 508",
    "section": "Data types in R",
    "text": "Data types in R\nGoing back to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#why-use-factors",
    "href": "Lectures/CSSS508_Lecture5.html#why-use-factors",
    "title": "CSSS 508",
    "section": "Why Use Factors?",
    "text": "Why Use Factors?\nFactors are a special class of data specifically for categorical variables1 which have a fixed, known, and mutually exclusive set of possible values2.\nImagine we have a variable that records the month that an event occurred.\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\nThe two main issues with coding this simply as a character string are that\n\nIt doesn’t help catch spelling errors and that\n\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n\n\nCharacters are sorted alphabetically, which is not necessarily intuitive or useful for your variable.\n\n\nsort(month)\n\n&gt; [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n\n\nFor categoricals; forcats is also an anagram of factors.Factors can also be created from character strings that you want to display in non-alphabetical order",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#factors",
    "href": "Lectures/CSSS508_Lecture5.html#factors",
    "title": "CSSS 508",
    "section": "Factors",
    "text": "Factors\nFactors have an additional specification called levels. These are the categories of the categorical variable. We can create a vector of the levels first:\n\nmonth_levels &lt;- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\nAnd then we can create a factor like so:\n\nmonth_factor &lt;- factor(month, levels = month_levels)\nmonth_factor\n\n&gt; [1] Dec Apr Jan Mar\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nWe can see that the levels specify in which order the categories should be displayed:\n\nsort(month_factor)\n\n&gt; [1] Jan Mar Apr Dec\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#creating-factors",
    "href": "Lectures/CSSS508_Lecture5.html#creating-factors",
    "title": "CSSS 508",
    "section": "Creating Factors",
    "text": "Creating Factors\nfactor is Base R’s function for creating factors while fct is forcats function for making factors. A couple of things to note about their differences:\n\n\nfactor\n\nAny values not specified as a level will be silently converted to NA\nWithout specified levels, they’ll be created from the data in alphabetical order1\n\n\nfct\n\nWill send a error message if a value exists outside the specified levels\nWithout specified levels, they’ll be created from the data in order of first appearance\n\n\nYou can create a factor by specifying col_factor() when reading in data with readr:\n\ndf &lt;- read_csv(csv, col_types = cols(month = col_factor(month_levels)))\n\nIf you need to access the levels directly you can use the Base R function levels().\n\nlevels(month_factor)\n\n&gt;  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\nThis is risky to rely on since not every computer will sort strings the same way.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels",
    "href": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nOne of the more common data manipulations you’ll want to do with factors is to change the ordering of the levels. This could be to put them in a more intuitive order but also to make a visualization clearer and more impactful.\nLet’s use a subset of the General Social Survey1 data to see what this might look like.\n\ngss_cat\n\n&gt; # A tibble: 21,483 × 9\n&gt;     year marital         age race  rincome        partyid    relig denom tvhours\n&gt;    &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n&gt;  1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n&gt;  2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n&gt;  3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n&gt;  4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n&gt;  5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n&gt;  6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n&gt;  7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n&gt;  8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n&gt;  9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n&gt; 10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n&gt; # ℹ 21,473 more rows\n\n\nOnce you’ve loaded forcats you can run ?gss_cat to learn more.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels-1",
    "href": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels-1",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nThere are four related functions to change the level ordering in forcats.\nfct_reorder()\n\n1fct_reorder(.f = factor,\n2            .x = ordering_vector,\n3            .fun = optional_function)\n\n\n1\n\nfactor is the factor to reorder (or a character string to be turned into a factor)\n\n2\n\nordering_vector specifies how to reorder factor\n\n3\n\noptional_function is applied if there are multiple values of ordering_vector for each value of factor (the default is to take the median)\n\n\n\n\nfct_relevel()\n\nfct_relevel(.f = factor, \n4            ... = value,\n5            after = placement)\n\n\n4\n\nvalue is either a function (i.e. sort) or a character level (default is to move it to the front of the vector)\n\n5\n\nplacement is an optional vector index where the level should be placed\n\n\n\n\nfct_reorder2()\n\nfct_reorder2(.f = factor, \n6            .x = vector1,\n            .y = vector2)\n\n\n6\n\nfct_reorder2 reorders factor by the values of vector2 associated with the largest values of vector1.\n\n\n\n\nfct_infreq()\n\n7fct_infreq(.f = factor)\n\n\n7\n\nfct_infreq reorders factor in decreasing frequency. See other variations here. Use with fct_rev() for increasing frequency.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels-2",
    "href": "Lectures/CSSS508_Lecture5.html#changing-the-order-of-levels-2",
    "title": "CSSS 508",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nThere are four related functions to change the level ordering in forcats.\n\nfct_reorder1fct_relevel2fct_reorder2fct_infreq\n\n\nWithout fct_reorder()\n\n\nCode\nrelig_summary &lt;- gss_cat |&gt;\n  summarize(\n    tvhours = mean(tvhours, na.rm = TRUE),\n    .by = relig\n  )\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\nWith fct_reorder()\n\n\nCode\nrelig_summary |&gt;\n  mutate(\n    relig = fct_reorder(relig, tvhours)\n  ) |&gt;\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nWithout fct_relevel()\n\n\nCode\nrincome_summary &lt;- gss_cat |&gt;\n  summarize(\n    age = mean(age, na.rm = TRUE),\n    .by = rincome\n  )\n\nggplot(rincome_summary, aes(x = age, y = rincome)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\nWith fct_relevel()\n\n\nCode\nggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, \"Not applicable\"))) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nWithout fct_reorder2()\n\n\nCode\nby_age &lt;- gss_cat |&gt;\n  filter(!is.na(age)) |&gt; \n  count(age, marital) |&gt;\n  mutate(\n    prop = n / sum(n), \n    .by = age\n  )\n\nggplot(by_age, aes(x = age, y = prop, color = marital)) +\n  geom_line(linewidth = 1) + \n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\n\n\nWith fct_reorder()\n\n\nCode\nggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set1\") + \n  labs(color = \"marital\") \n\n\n\n\n\n\n\n\n\n\n\nWithout fct_infreq()\n\n\nCode\ngss_cat |&gt;\n  ggplot(aes(x = marital)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nWith fct_infreq()\n\n\nCode\ngss_cat |&gt;\n  mutate(marital = marital |&gt; fct_infreq() |&gt; fct_rev()) |&gt;\n  ggplot(aes(x = marital)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nUse fct_reorder and fct_reorder2 for categorical variables where ordering is arbitary.Use fct_relevel for categorical variables that already have an inherent ordering.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-the-value-of-levels",
    "href": "Lectures/CSSS508_Lecture5.html#changing-the-value-of-levels",
    "title": "CSSS 508",
    "section": "Changing the Value of Levels",
    "text": "Changing the Value of Levels\nYou may also want to change the actual values of your factor levels. The main way to do this is fct_recode().\n\n8gss_cat |&gt; count(partyid)\n\n\n8\n\nYou can use count() to get the full list of levels for a variable and their respective counts.\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    partyid                n\n&gt;    &lt;fct&gt;              &lt;int&gt;\n&gt;  1 No answer            154\n&gt;  2 Don't know             1\n&gt;  3 Other party          393\n&gt;  4 Strong republican   2314\n&gt;  5 Not str republican  3032\n&gt;  6 Ind,near rep        1791\n&gt;  7 Independent         4119\n&gt;  8 Ind,near dem        2499\n&gt;  9 Not str democrat    3690\n&gt; 10 Strong democrat     3490",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#fct_recode",
    "href": "Lectures/CSSS508_Lecture5.html#fct_recode",
    "title": "CSSS 508",
    "section": "fct_recode()",
    "text": "fct_recode()\n\n\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_recode(partyid,\n      \"Republican, strong\" = \"Strong republican\",\n      \"Republican, weak\" = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\" = \"Not str democrat\",\n      \"Democrat, strong\" = \"Strong democrat\"\n    )\n  ) |&gt;\n  count(partyid)\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    partyid                   n\n&gt;    &lt;fct&gt;                 &lt;int&gt;\n&gt;  1 No answer               154\n&gt;  2 Don't know                1\n&gt;  3 Other party             393\n&gt;  4 Republican, strong     2314\n&gt;  5 Republican, weak       3032\n&gt;  6 Independent, near rep  1791\n&gt;  7 Independent            4119\n&gt;  8 Independent, near dem  2499\n&gt;  9 Democrat, weak         3690\n&gt; 10 Democrat, strong       3490\n\n\n\nSome features of fct_recode():\n\nWill leave the levels that aren’t explicitly mentioned, as is.\nWill warn you if you accidentally refer to a level that doesn’t exist.\nYou can combine groups by assigning multiple old levels to the same new level.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#fct_collapse",
    "href": "Lectures/CSSS508_Lecture5.html#fct_collapse",
    "title": "CSSS 508",
    "section": "fct_collapse()",
    "text": "fct_collapse()\nA useful variant of fct_recode() is fct_collapse() which will allow you to collapse a lot of levels at once.\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n    )\n  ) |&gt;\n  count(partyid)\n\n&gt; # A tibble: 4 × 2\n&gt;   partyid     n\n&gt;   &lt;fct&gt;   &lt;int&gt;\n&gt; 1 other     548\n&gt; 2 rep      5346\n&gt; 3 ind      8409\n&gt; 4 dem      7180",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#fct_lump_",
    "href": "Lectures/CSSS508_Lecture5.html#fct_lump_",
    "title": "CSSS 508",
    "section": "fct_lump_*",
    "text": "fct_lump_*\nSometimes you’ll have several levels of a variable that have a small enough N to warrant grouping them together into an other category. The family of fct_lump_* functions are designed to help with this.\n\ngss_cat |&gt;\n9  mutate(relig = fct_lump_n(relig, n = 10)) |&gt;\n  count(relig, sort = TRUE)\n\n\n9\n\nOther functions include: fct_lump_min(), fct_lump_prop(), fct_lump_lowfreq(). Read more about them here.\n\n\n\n\n&gt; # A tibble: 10 × 2\n&gt;    relig                       n\n&gt;    &lt;fct&gt;                   &lt;int&gt;\n&gt;  1 Protestant              10846\n&gt;  2 Catholic                 5124\n&gt;  3 None                     3523\n&gt;  4 Christian                 689\n&gt;  5 Other                     458\n&gt;  6 Jewish                    388\n&gt;  7 Buddhism                  147\n&gt;  8 Inter-nondenominational   109\n&gt;  9 Moslem/islam              104\n&gt; 10 Orthodox-christian         95",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#ordered-factors",
    "href": "Lectures/CSSS508_Lecture5.html#ordered-factors",
    "title": "CSSS 508",
    "section": "Ordered Factors",
    "text": "Ordered Factors\nSo far we’ve mostly been discussing how to code nominal variables, or categorical variables that have no inherent ordering.\nIf you want to specify that your factor has a strict order you can classify it as a ordered factor.\n\n10ordered(c(\"a\", \"b\", \"c\"))\n\n\n10\n\nOrdered factors imply a strict ordering and equal distance between levels: the first level is “less than” the second level by the same amount that the second level is “less than” the third level, and so on.\n\n\n\n\n&gt; [1] a b c\n&gt; Levels: a &lt; b &lt; c\n\n\n\nIn practice there are only two ways in which ordered factors are different than factors:\n\nscale_color_viridis()/scale_fill_viridis() will be used automatically when mapping an ordered factored in ggplot2 because it implies an ordered ranking\nIf you use an ordered function in a linear model, it will use “polygonal contrasts”. You can learn more about what this means here.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#importing-tidying-data-2",
    "href": "Lectures/CSSS508_Lecture5.html#importing-tidying-data-2",
    "title": "CSSS 508",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the CSSS 508 Canvas page &gt; Files.\nDownload the data folder or open the folder and download the individual data files.\nMove this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nPivot your data to make it tidy2.\nTurn two of the variables into factors3.\n\nR Script or .qmdThere should be 3 columns in your final datasetHint: Which two variables are categorical?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#date-and-date-time",
    "href": "Lectures/CSSS508_Lecture5.html#date-and-date-time",
    "title": "CSSS 508",
    "section": "Date and Date-Time",
    "text": "Date and Date-Time\nWhile they may look like character strings, Dates, Date-Times and Times1 are each separate classes of data.\n\n\nData Type\n\nDate\nDate\nDate-Time\nDate-Time\nTime\n\n\nPackage\n\nbase\nlubridate\nbase\nlubridate\nhms\n\n\nReference in R\n\nPOSIXct\ndate\nPOSIXlt\ndttm\ntime\n\n\nDates and times are challenging data types because there are physical properties but also additional geopolitical definitions that don’t always neatly align with physical reality.\nThe hms package can be used to deal with times but they’re not very common.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#creating-datesdate-times",
    "href": "Lectures/CSSS508_Lecture5.html#creating-datesdate-times",
    "title": "CSSS 508",
    "section": "Creating Dates/Date-Times",
    "text": "Creating Dates/Date-Times\n\nOn ImportStringIndividual ComponentsExisting Object\n\n\nIf your data is in ISO8601 date or date-time format1 readr will automatically recognize it and read it in as a date/date-time.\nIf you’re reading in a different date/date-time format you can use col_types plus col_date() or col_datetime() along with a date-time format.\n\n\n\nAll date formats understood by readr2\n\n\nType\nCode\nMeaning\nExample\n\n\n\n\nYear\n%Y\n4 digit year\n2021\n\n\n\n%y\n2 digit year\n21\n\n\nMonth\n%m\nNumber\n2\n\n\n\n%b\nAbbreviated name\nFeb\n\n\n\n%B3\nFull name\nFebruary\n\n\nDay\n%d\nTwo digits\n02\n\n\n\n%e\nOne or two digits\n2\n\n\nTime\n%H\n24-hour hour\n13\n\n\n\n%I\n12-hour hour\n1\n\n\n\n%p\nAM/PM\npm\n\n\n\n%M\nMinutes\n35\n\n\n\n%S\nSeconds\n45\n\n\n\n%OS\nSeconds with decimal component\n45.35\n\n\n\n%Z\nTime zone name\nAmerica/Chicago\n\n\n\n%z\nOffset from UTC\n+0800\n\n\nOther\n%.\nSkip one non-digit\n:\n\n\n\n%*\nSkip any number of non-digits\n\n\n\n\n\n\n\ncsv &lt;- \"\n  date\n  05/22/23\n\"\n\nread_csv(csv, col_types = cols(date = col_date(\"%m/%d/%y\")))\n\n&gt; # A tibble: 1 × 1\n&gt;   date      \n&gt;   &lt;date&gt;    \n&gt; 1 2023-05-22\n\n\n\n\n\nYou can also use lubridate’s helper functions to specify a date format automatically.\n\nymd(\"2017-01-31\")\n\n&gt; [1] \"2017-01-31\"\n\nmdy(\"January 31st, 2017\")\n\n&gt; [1] \"2017-01-31\"\n\ndmy(\"31-Jan-2017\")\n\n&gt; [1] \"2017-01-31\"\n\n\n\nIf you need to specify a date-time you can use these helper functions:\n\nymd_hms(\"2017-01-31 20:11:59\")\n\n&gt; [1] \"2017-01-31 20:11:59 UTC\"\n\nmdy_hm(\"01/31/2017 08:01\")\n\n&gt; [1] \"2017-01-31 08:01:00 UTC\"\n\n\n\nIf you provide a date object with a timezone it’ll automatically be converted to a date-time object.\n\nymd(\"2017-01-31\", tz = \"UTC\")\n\n&gt; [1] \"2017-01-31 UTC\"\n\n\n\n\n\nIf you have time elements in separate variables, like in the flights dataset…\n\nlibrary(nycflights13)\nflights |&gt; \n  select(year, month, day, hour, minute)\n\n&gt; # A tibble: 336,776 × 5\n&gt;     year month   day  hour minute\n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt;  1  2013     1     1     5     15\n&gt;  2  2013     1     1     5     29\n&gt;  3  2013     1     1     5     40\n&gt;  4  2013     1     1     5     45\n&gt;  5  2013     1     1     6      0\n&gt;  6  2013     1     1     5     58\n&gt;  7  2013     1     1     6      0\n&gt;  8  2013     1     1     6      0\n&gt;  9  2013     1     1     6      0\n&gt; 10  2013     1     1     6      0\n&gt; # ℹ 336,766 more rows\n\n\n…you can use make_date or make_datetime to create your date/time object.\n\nflights2 &lt;- flights |&gt; \n  select(year, month, day, hour, minute) |&gt; \n  mutate(departure = make_datetime(year, month, day, hour, minute))\nflights2\n\n&gt; # A tibble: 336,776 × 6\n&gt;     year month   day  hour minute departure          \n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dttm&gt;             \n&gt;  1  2013     1     1     5     15 2013-01-01 05:15:00\n&gt;  2  2013     1     1     5     29 2013-01-01 05:29:00\n&gt;  3  2013     1     1     5     40 2013-01-01 05:40:00\n&gt;  4  2013     1     1     5     45 2013-01-01 05:45:00\n&gt;  5  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  6  2013     1     1     5     58 2013-01-01 05:58:00\n&gt;  7  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  8  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  9  2013     1     1     6      0 2013-01-01 06:00:00\n&gt; 10  2013     1     1     6      0 2013-01-01 06:00:00\n&gt; # ℹ 336,766 more rows\n\n\n\nNote that when you use date-times in a numeric context (like in a histogram), 1 means 1 second, so a binwidth of 86400 means one day. For dates, 1 means 1 day.\n\nggplot(flights2, aes(x = departure)) + \n  geom_freqpoly(binwidth = 86400)\n\n\n\n\n\n\n\n\n\n\n\nas_datetime() and as_date() are used to coerce existing date/time objects into their counterpart.\n\nas_datetime(today())\n\n&gt; [1] \"2025-05-13 UTC\"\n\nas_date(now())\n\n&gt; [1] \"2025-05-13\"\n\n\n\nWhile ISO8601 format is read in as a string of human-readable date/times, another common date/time format, Unix time, is represented by the number of seconds that have elapsed since 1 January 1970 at 0:00:00 UTC.\nIf the offset is in seconds you’ll want to use as_datetime() and if it’s in days use as_date() for the conversion.\n\nas_datetime(1)\n\n&gt; [1] \"1970-01-01 00:00:01 UTC\"\n\nas_datetime(5057)\n\n&gt; [1] \"1970-01-01 01:24:17 UTC\"\n\nas_date(1)\n\n&gt; [1] \"1970-01-02\"\n\nas_date(5057)\n\n&gt; [1] \"1983-11-06\"\n\n\n\n\n\n\nThe international standard for writing dates.Note that no matter how you specify the date format, it’s always displayed the same way once you get it into R: %Y-%m-%dIf you’re using either %b or %B and working with non-English dates, you’ll also need to provide a locale(). See these functions for more information.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#extracting-time-components",
    "href": "Lectures/CSSS508_Lecture5.html#extracting-time-components",
    "title": "CSSS 508",
    "section": "Extracting Time Components",
    "text": "Extracting Time Components\nWe’ve discussed how to make a date/time object from individual components using make_date() and make_datetime() but what if you need to extract an element from a date/time?\nThere are a number of accessor functions that allow you to do just that.\n\ndatetime &lt;- ymd_hms(\"2020-01-30 12:30:45\")\n\nyear(datetime)\n1month(datetime)\n2mday(datetime)\n3yday(datetime)\n4wday(datetime)\nhour(datetime)\nminute(datetime)\nsecond(datetime)\n\n\n1\n\nYou can set label = TRUE to return the abbreviated name and abbr = FALSE to return the full name (i.e. month(datetime, label = TRUE) returns Jan and month(datetime, label = TRUE, abbr = FALSE) returns January)\n\n2\n\nDay of the month.\n\n3\n\nDay of the year.\n\n4\n\nDay of the week. You can set label = TRUE to return the abbreviated name and abbr = FALSE to return the full name (i.e. wday(datetime, label = TRUE) returns Thu and wday(datetime, label = TRUE, abbr = FALSE) returns Thursday)\n\n\n\n\n&gt; [1] 2020\n&gt; [1] 1\n&gt; [1] 30\n&gt; [1] 30\n&gt; [1] 5\n&gt; [1] 12\n&gt; [1] 30\n&gt; [1] 45",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-datetimes",
    "href": "Lectures/CSSS508_Lecture5.html#changing-datetimes",
    "title": "CSSS 508",
    "section": "Changing Date/Times",
    "text": "Changing Date/Times\nWhile less common, you may need to recode a date/time variable which you can also do with these accessor functions.\n\ndatetime &lt;- ymd_hms(\"2020-01-30 08:05:35\")\n\nyear(datetime) &lt;- 2030\nhour(datetime) &lt;- hour(datetime) + 1\n\ndatetime\n\n&gt; [1] \"2030-01-30 09:05:35 UTC\"\n\n\nAn alternative1 way to do this is by using update():\n\nupdate(datetime, year = 2030, month = 2, mday = 2, hour = 2)\n\n&gt; [1] \"2030-02-02 02:05:35 UTC\"\n\n\nA nice feature of this function is that if values are too big for the unit in question, they will automatically roll over:\n\nupdate(ymd(\"2023-02-01\"), mday = 30)\n\n&gt; [1] \"2023-03-02\"\n\n\nAnd more efficient when needing to specify multiple aspects of a date/time variable.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#rounding-dates",
    "href": "Lectures/CSSS508_Lecture5.html#rounding-dates",
    "title": "CSSS 508",
    "section": "Rounding Dates",
    "text": "Rounding Dates\nAlternatively, you can round your date/time objects to a nearby unit with these three functions: floor_date(), round_date(), and ceiling_date().\n\ndatetime &lt;- ymd_hms(\"2020-01-30 08:05:35\")\n\n5floor_date(datetime, unit = \"week\")\nround_date(datetime, unit = \"week\", week_start = 1)\nceiling_date(datetime, unit = \"hour\")\n\n\n5\n\nThese functions take 3 arguments: a date/time vector, a unit of time to round by (valid base units include second, minute, hour, day, week, month, bimonth, quarter, season, halfyear and year), and the day of the week that the week starts (default is 7, or Sunday).\n\n\n\n\n&gt; [1] \"2020-01-26 UTC\"\n&gt; [1] \"2020-01-27 UTC\"\n&gt; [1] \"2020-01-30 09:00:00 UTC\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#spans-of-time",
    "href": "Lectures/CSSS508_Lecture5.html#spans-of-time",
    "title": "CSSS 508",
    "section": "Spans of time",
    "text": "Spans of time\nThere are three different timespan classes in lubridate, which reflect the complexity of date/time data.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#durations",
    "href": "Lectures/CSSS508_Lecture5.html#durations",
    "title": "CSSS 508",
    "section": "Durations",
    "text": "Durations\nDurations represent precise physical time. When you subtract two dates, you’ll get a difftime object.\n\ns_age &lt;- today() - ymd(\"2023-05-28\")\n6s_age\n7as.duration(s_age)\n\n\n6\n\ndifftime objects record time spans in seconds, minutes, hours, days, or weeks. This is fairly ambiguous so lubridate provides a more consistent alternative: the duration, which always uses seconds.\n\n7\n\nLarger units are created by converting minutes, hours, days, weeks, and years to seconds.\n\n\n\n\n&gt; Time difference of 716 days\n&gt; [1] \"61862400s (~1.96 years)\"\n\n\nThere are a variety of constructors to create durations:\n\ndseconds(15)\ndminutes(10)\ndhours(c(12, 24))\nddays(0:5)\ndweeks(3)\n8dyears(1)\n\n\n8\n\nAggregating to larger time units is more problematic. A year uses the “average” number of days in a year, i.e. 365.25. There’s no way to convert a month to a duration, because there’s just too much variation.\n\n\n\n\n&gt; [1] \"15s\"\n&gt; [1] \"600s (~10 minutes)\"\n&gt; [1] \"43200s (~12 hours)\" \"86400s (~1 days)\"  \n&gt; [1] \"0s\"                \"86400s (~1 days)\"  \"172800s (~2 days)\"\n&gt; [4] \"259200s (~3 days)\" \"345600s (~4 days)\" \"432000s (~5 days)\"\n&gt; [1] \"1814400s (~3 weeks)\"\n&gt; [1] \"31557600s (~1 years)\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#math-with-durations",
    "href": "Lectures/CSSS508_Lecture5.html#math-with-durations",
    "title": "CSSS 508",
    "section": "Math with Durations",
    "text": "Math with Durations\nYou can add and multiply durations:\n\n2 * dyears(1)\n\n&gt; [1] \"63115200s (~2 years)\"\n\ndyears(1) + dweeks(12) + dhours(15)\n\n&gt; [1] \"38869200s (~1.23 years)\"\n\n\nSometimes you’ll get an unexpected results though:\n\none_am &lt;- ymd_hms(\"2026-03-08 01:00:00\", tz = \"America/New_York\")\none_am\n9one_am + ddays(1)\n\n\n9\n\nDaylight Savings Time is a human construction so March 8th only has 23 hours because it’s when DST starts. If we add a full days worth of seconds we end up with a different time and a different time zone.\n\n\n\n\n&gt; [1] \"2026-03-08 01:00:00 EST\"\n&gt; [1] \"2026-03-09 02:00:00 EDT\"\n\n\nFor this reason, lubridate also has periods.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#periods",
    "href": "Lectures/CSSS508_Lecture5.html#periods",
    "title": "CSSS 508",
    "section": "Periods",
    "text": "Periods\nPeriods represent “human” times like days and months and therefore do not have a fixed length in seconds.\n\none_am\n\n&gt; [1] \"2026-03-08 01:00:00 EST\"\n\none_am + days(1)\n\n&gt; [1] \"2026-03-09 01:00:00 EDT\"\n\n\n\nPeriods also have their own constructor functions:\n\nhours(c(12, 24))\n\n&gt; [1] \"12H 0M 0S\" \"24H 0M 0S\"\n\ndays(7)\n\n&gt; [1] \"7d 0H 0M 0S\"\n\nmonths(1:6)\n\n&gt; [1] \"1m 0d 0H 0M 0S\" \"2m 0d 0H 0M 0S\" \"3m 0d 0H 0M 0S\" \"4m 0d 0H 0M 0S\"\n&gt; [5] \"5m 0d 0H 0M 0S\" \"6m 0d 0H 0M 0S\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#math-with-periods",
    "href": "Lectures/CSSS508_Lecture5.html#math-with-periods",
    "title": "CSSS 508",
    "section": "Math with Periods",
    "text": "Math with Periods\nWe can add and multiply periods:\n\n10 * (months(6) + days(1))\n\n&gt; [1] \"60m 10d 0H 0M 0S\"\n\ndays(50) + hours(25) + minutes(2)\n\n&gt; [1] \"50d 25H 2M 0S\"\n\n\n\nAnd also add them to dates.\n\n# A leap year\nymd(\"2024-01-01\") + dyears(1)\nymd(\"2024-01-01\") + years(1)\n\n# Daylight saving time\none_am + ddays(1)\n10one_am + days(1)\n\n\n10\n\nPeriods are more likely than durations to do what you expect.\n\n\n\n\n&gt; [1] \"2024-12-31 06:00:00 UTC\"\n&gt; [1] \"2025-01-01\"\n&gt; [1] \"2026-03-09 02:00:00 EDT\"\n&gt; [1] \"2026-03-09 01:00:00 EDT\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#intervals",
    "href": "Lectures/CSSS508_Lecture5.html#intervals",
    "title": "CSSS 508",
    "section": "Intervals",
    "text": "Intervals\nIntervals represent the length of a time span in human units. You can think of it as a duration with a starting point.\nImagine we wanted to know how many days are in a year?\n\n11years(1) / days(1)\n12dyears(1) / ddays(365)\n\n\n11\n\nSince this value changed depending on the year in question, lubridate gives an estimate (or the average) for the number of days in any given year.\n\n12\n\nA similar thing happens for durations.\n\n\n\n\n&gt; [1] 365.25\n&gt; [1] 1.000685\n\n\nTo be more accurate we need to give the specific range of time in questions.\n\n13y2023 &lt;- ymd(\"2023-01-01\") %--% ymd(\"2024-01-01\")\ny2024 &lt;- ymd(\"2024-01-01\") %--% ymd(\"2025-01-01\")\ny2023\ny2024\n14y2023 / days(1)\ny2024 / days(1)\n\n\n13\n\nYou can create an interval by writing start %--% end.\n\n14\n\nNow when we do this math we get the exact number of “human” days within the span of dates we specified.\n\n\n\n\n&gt; [1] 2023-01-01 UTC--2024-01-01 UTC\n&gt; [1] 2024-01-01 UTC--2025-01-01 UTC\n&gt; [1] 365\n&gt; [1] 366",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#time-zones",
    "href": "Lectures/CSSS508_Lecture5.html#time-zones",
    "title": "CSSS 508",
    "section": "Time zones",
    "text": "Time zones\nTime zones are a very complicated topic because different places have different rules which can, or already have, change(d) over time! To really clarify things R uses the international standard IANA time zones which use a consistent naming scheme: {area}/{location}.\n\n15Sys.timezone()\n16OlsonNames()\n\n\n15\n\nUse Sys.timezone() to find out which timezone R thinks you’re in.\n\n16\n\nSee the complete list of all time zone names with OlsonNames()\n\n\n\n\n&gt; [1] \"America/Los_Angeles\"\n&gt;   [1] \"Africa/Abidjan\"                   \"Africa/Accra\"                    \n&gt;   [3] \"Africa/Addis_Ababa\"               \"Africa/Algiers\"                  \n&gt;   [5] \"Africa/Asmara\"                    \"Africa/Asmera\"                   \n&gt;   [7] \"Africa/Bamako\"                    \"Africa/Bangui\"                   \n&gt;   [9] \"Africa/Banjul\"                    \"Africa/Bissau\"                   \n&gt;  [11] \"Africa/Blantyre\"                  \"Africa/Brazzaville\"              \n&gt;  [13] \"Africa/Bujumbura\"                 \"Africa/Cairo\"                    \n&gt;  [15] \"Africa/Casablanca\"                \"Africa/Ceuta\"                    \n&gt;  [17] \"Africa/Conakry\"                   \"Africa/Dakar\"                    \n&gt;  [19] \"Africa/Dar_es_Salaam\"             \"Africa/Djibouti\"                 \n&gt;  [21] \"Africa/Douala\"                    \"Africa/El_Aaiun\"                 \n&gt;  [23] \"Africa/Freetown\"                  \"Africa/Gaborone\"                 \n&gt;  [25] \"Africa/Harare\"                    \"Africa/Johannesburg\"             \n&gt;  [27] \"Africa/Juba\"                      \"Africa/Kampala\"                  \n&gt;  [29] \"Africa/Khartoum\"                  \"Africa/Kigali\"                   \n&gt;  [31] \"Africa/Kinshasa\"                  \"Africa/Lagos\"                    \n&gt;  [33] \"Africa/Libreville\"                \"Africa/Lome\"                     \n&gt;  [35] \"Africa/Luanda\"                    \"Africa/Lubumbashi\"               \n&gt;  [37] \"Africa/Lusaka\"                    \"Africa/Malabo\"                   \n&gt;  [39] \"Africa/Maputo\"                    \"Africa/Maseru\"                   \n&gt;  [41] \"Africa/Mbabane\"                   \"Africa/Mogadishu\"                \n&gt;  [43] \"Africa/Monrovia\"                  \"Africa/Nairobi\"                  \n&gt;  [45] \"Africa/Ndjamena\"                  \"Africa/Niamey\"                   \n&gt;  [47] \"Africa/Nouakchott\"                \"Africa/Ouagadougou\"              \n&gt;  [49] \"Africa/Porto-Novo\"                \"Africa/Sao_Tome\"                 \n&gt;  [51] \"Africa/Timbuktu\"                  \"Africa/Tripoli\"                  \n&gt;  [53] \"Africa/Tunis\"                     \"Africa/Windhoek\"                 \n&gt;  [55] \"America/Adak\"                     \"America/Anchorage\"               \n&gt;  [57] \"America/Anguilla\"                 \"America/Antigua\"                 \n&gt;  [59] \"America/Araguaina\"                \"America/Argentina/Buenos_Aires\"  \n&gt;  [61] \"America/Argentina/Catamarca\"      \"America/Argentina/ComodRivadavia\"\n&gt;  [63] \"America/Argentina/Cordoba\"        \"America/Argentina/Jujuy\"         \n&gt;  [65] \"America/Argentina/La_Rioja\"       \"America/Argentina/Mendoza\"       \n&gt;  [67] \"America/Argentina/Rio_Gallegos\"   \"America/Argentina/Salta\"         \n&gt;  [69] \"America/Argentina/San_Juan\"       \"America/Argentina/San_Luis\"      \n&gt;  [71] \"America/Argentina/Tucuman\"        \"America/Argentina/Ushuaia\"       \n&gt;  [73] \"America/Aruba\"                    \"America/Asuncion\"                \n&gt;  [75] \"America/Atikokan\"                 \"America/Atka\"                    \n&gt;  [77] \"America/Bahia\"                    \"America/Bahia_Banderas\"          \n&gt;  [79] \"America/Barbados\"                 \"America/Belem\"                   \n&gt;  [81] \"America/Belize\"                   \"America/Blanc-Sablon\"            \n&gt;  [83] \"America/Boa_Vista\"                \"America/Bogota\"                  \n&gt;  [85] \"America/Boise\"                    \"America/Buenos_Aires\"            \n&gt;  [87] \"America/Cambridge_Bay\"            \"America/Campo_Grande\"            \n&gt;  [89] \"America/Cancun\"                   \"America/Caracas\"                 \n&gt;  [91] \"America/Catamarca\"                \"America/Cayenne\"                 \n&gt;  [93] \"America/Cayman\"                   \"America/Chicago\"                 \n&gt;  [95] \"America/Chihuahua\"                \"America/Ciudad_Juarez\"           \n&gt;  [97] \"America/Coral_Harbour\"            \"America/Cordoba\"                 \n&gt;  [99] \"America/Costa_Rica\"               \"America/Coyhaique\"               \n&gt; [101] \"America/Creston\"                  \"America/Cuiaba\"                  \n&gt; [103] \"America/Curacao\"                  \"America/Danmarkshavn\"            \n&gt; [105] \"America/Dawson\"                   \"America/Dawson_Creek\"            \n&gt; [107] \"America/Denver\"                   \"America/Detroit\"                 \n&gt; [109] \"America/Dominica\"                 \"America/Edmonton\"                \n&gt; [111] \"America/Eirunepe\"                 \"America/El_Salvador\"             \n&gt; [113] \"America/Ensenada\"                 \"America/Fort_Nelson\"             \n&gt; [115] \"America/Fort_Wayne\"               \"America/Fortaleza\"               \n&gt; [117] \"America/Glace_Bay\"                \"America/Godthab\"                 \n&gt; [119] \"America/Goose_Bay\"                \"America/Grand_Turk\"              \n&gt; [121] \"America/Grenada\"                  \"America/Guadeloupe\"              \n&gt; [123] \"America/Guatemala\"                \"America/Guayaquil\"               \n&gt; [125] \"America/Guyana\"                   \"America/Halifax\"                 \n&gt; [127] \"America/Havana\"                   \"America/Hermosillo\"              \n&gt; [129] \"America/Indiana/Indianapolis\"     \"America/Indiana/Knox\"            \n&gt; [131] \"America/Indiana/Marengo\"          \"America/Indiana/Petersburg\"      \n&gt; [133] \"America/Indiana/Tell_City\"        \"America/Indiana/Vevay\"           \n&gt; [135] \"America/Indiana/Vincennes\"        \"America/Indiana/Winamac\"         \n&gt; [137] \"America/Indianapolis\"             \"America/Inuvik\"                  \n&gt; [139] \"America/Iqaluit\"                  \"America/Jamaica\"                 \n&gt; [141] \"America/Jujuy\"                    \"America/Juneau\"                  \n&gt; [143] \"America/Kentucky/Louisville\"      \"America/Kentucky/Monticello\"     \n&gt; [145] \"America/Knox_IN\"                  \"America/Kralendijk\"              \n&gt; [147] \"America/La_Paz\"                   \"America/Lima\"                    \n&gt; [149] \"America/Los_Angeles\"              \"America/Louisville\"              \n&gt; [151] \"America/Lower_Princes\"            \"America/Maceio\"                  \n&gt; [153] \"America/Managua\"                  \"America/Manaus\"                  \n&gt; [155] \"America/Marigot\"                  \"America/Martinique\"              \n&gt; [157] \"America/Matamoros\"                \"America/Mazatlan\"                \n&gt; [159] \"America/Mendoza\"                  \"America/Menominee\"               \n&gt; [161] \"America/Merida\"                   \"America/Metlakatla\"              \n&gt; [163] \"America/Mexico_City\"              \"America/Miquelon\"                \n&gt; [165] \"America/Moncton\"                  \"America/Monterrey\"               \n&gt; [167] \"America/Montevideo\"               \"America/Montreal\"                \n&gt; [169] \"America/Montserrat\"               \"America/Nassau\"                  \n&gt; [171] \"America/New_York\"                 \"America/Nipigon\"                 \n&gt; [173] \"America/Nome\"                     \"America/Noronha\"                 \n&gt; [175] \"America/North_Dakota/Beulah\"      \"America/North_Dakota/Center\"     \n&gt; [177] \"America/North_Dakota/New_Salem\"   \"America/Nuuk\"                    \n&gt; [179] \"America/Ojinaga\"                  \"America/Panama\"                  \n&gt; [181] \"America/Pangnirtung\"              \"America/Paramaribo\"              \n&gt; [183] \"America/Phoenix\"                  \"America/Port_of_Spain\"           \n&gt; [185] \"America/Port-au-Prince\"           \"America/Porto_Acre\"              \n&gt; [187] \"America/Porto_Velho\"              \"America/Puerto_Rico\"             \n&gt; [189] \"America/Punta_Arenas\"             \"America/Rainy_River\"             \n&gt; [191] \"America/Rankin_Inlet\"             \"America/Recife\"                  \n&gt; [193] \"America/Regina\"                   \"America/Resolute\"                \n&gt; [195] \"America/Rio_Branco\"               \"America/Rosario\"                 \n&gt; [197] \"America/Santa_Isabel\"             \"America/Santarem\"                \n&gt; [199] \"America/Santiago\"                 \"America/Santo_Domingo\"           \n&gt; [201] \"America/Sao_Paulo\"                \"America/Scoresbysund\"            \n&gt; [203] \"America/Shiprock\"                 \"America/Sitka\"                   \n&gt; [205] \"America/St_Barthelemy\"            \"America/St_Johns\"                \n&gt; [207] \"America/St_Kitts\"                 \"America/St_Lucia\"                \n&gt; [209] \"America/St_Thomas\"                \"America/St_Vincent\"              \n&gt; [211] \"America/Swift_Current\"            \"America/Tegucigalpa\"             \n&gt; [213] \"America/Thule\"                    \"America/Thunder_Bay\"             \n&gt; [215] \"America/Tijuana\"                  \"America/Toronto\"                 \n&gt; [217] \"America/Tortola\"                  \"America/Vancouver\"               \n&gt; [219] \"America/Virgin\"                   \"America/Whitehorse\"              \n&gt; [221] \"America/Winnipeg\"                 \"America/Yakutat\"                 \n&gt; [223] \"America/Yellowknife\"              \"Antarctica/Casey\"                \n&gt; [225] \"Antarctica/Davis\"                 \"Antarctica/DumontDUrville\"       \n&gt; [227] \"Antarctica/Macquarie\"             \"Antarctica/Mawson\"               \n&gt; [229] \"Antarctica/McMurdo\"               \"Antarctica/Palmer\"               \n&gt; [231] \"Antarctica/Rothera\"               \"Antarctica/South_Pole\"           \n&gt; [233] \"Antarctica/Syowa\"                 \"Antarctica/Troll\"                \n&gt; [235] \"Antarctica/Vostok\"                \"Arctic/Longyearbyen\"             \n&gt; [237] \"Asia/Aden\"                        \"Asia/Almaty\"                     \n&gt; [239] \"Asia/Amman\"                       \"Asia/Anadyr\"                     \n&gt; [241] \"Asia/Aqtau\"                       \"Asia/Aqtobe\"                     \n&gt; [243] \"Asia/Ashgabat\"                    \"Asia/Ashkhabad\"                  \n&gt; [245] \"Asia/Atyrau\"                      \"Asia/Baghdad\"                    \n&gt; [247] \"Asia/Bahrain\"                     \"Asia/Baku\"                       \n&gt; [249] \"Asia/Bangkok\"                     \"Asia/Barnaul\"                    \n&gt; [251] \"Asia/Beirut\"                      \"Asia/Bishkek\"                    \n&gt; [253] \"Asia/Brunei\"                      \"Asia/Calcutta\"                   \n&gt; [255] \"Asia/Chita\"                       \"Asia/Choibalsan\"                 \n&gt; [257] \"Asia/Chongqing\"                   \"Asia/Chungking\"                  \n&gt; [259] \"Asia/Colombo\"                     \"Asia/Dacca\"                      \n&gt; [261] \"Asia/Damascus\"                    \"Asia/Dhaka\"                      \n&gt; [263] \"Asia/Dili\"                        \"Asia/Dubai\"                      \n&gt; [265] \"Asia/Dushanbe\"                    \"Asia/Famagusta\"                  \n&gt; [267] \"Asia/Gaza\"                        \"Asia/Harbin\"                     \n&gt; [269] \"Asia/Hebron\"                      \"Asia/Ho_Chi_Minh\"                \n&gt; [271] \"Asia/Hong_Kong\"                   \"Asia/Hovd\"                       \n&gt; [273] \"Asia/Irkutsk\"                     \"Asia/Istanbul\"                   \n&gt; [275] \"Asia/Jakarta\"                     \"Asia/Jayapura\"                   \n&gt; [277] \"Asia/Jerusalem\"                   \"Asia/Kabul\"                      \n&gt; [279] \"Asia/Kamchatka\"                   \"Asia/Karachi\"                    \n&gt; [281] \"Asia/Kashgar\"                     \"Asia/Kathmandu\"                  \n&gt; [283] \"Asia/Katmandu\"                    \"Asia/Khandyga\"                   \n&gt; [285] \"Asia/Kolkata\"                     \"Asia/Krasnoyarsk\"                \n&gt; [287] \"Asia/Kuala_Lumpur\"                \"Asia/Kuching\"                    \n&gt; [289] \"Asia/Kuwait\"                      \"Asia/Macao\"                      \n&gt; [291] \"Asia/Macau\"                       \"Asia/Magadan\"                    \n&gt; [293] \"Asia/Makassar\"                    \"Asia/Manila\"                     \n&gt; [295] \"Asia/Muscat\"                      \"Asia/Nicosia\"                    \n&gt; [297] \"Asia/Novokuznetsk\"                \"Asia/Novosibirsk\"                \n&gt; [299] \"Asia/Omsk\"                        \"Asia/Oral\"                       \n&gt; [301] \"Asia/Phnom_Penh\"                  \"Asia/Pontianak\"                  \n&gt; [303] \"Asia/Pyongyang\"                   \"Asia/Qatar\"                      \n&gt; [305] \"Asia/Qostanay\"                    \"Asia/Qyzylorda\"                  \n&gt; [307] \"Asia/Rangoon\"                     \"Asia/Riyadh\"                     \n&gt; [309] \"Asia/Saigon\"                      \"Asia/Sakhalin\"                   \n&gt; [311] \"Asia/Samarkand\"                   \"Asia/Seoul\"                      \n&gt; [313] \"Asia/Shanghai\"                    \"Asia/Singapore\"                  \n&gt; [315] \"Asia/Srednekolymsk\"               \"Asia/Taipei\"                     \n&gt; [317] \"Asia/Tashkent\"                    \"Asia/Tbilisi\"                    \n&gt; [319] \"Asia/Tehran\"                      \"Asia/Tel_Aviv\"                   \n&gt; [321] \"Asia/Thimbu\"                      \"Asia/Thimphu\"                    \n&gt; [323] \"Asia/Tokyo\"                       \"Asia/Tomsk\"                      \n&gt; [325] \"Asia/Ujung_Pandang\"               \"Asia/Ulaanbaatar\"                \n&gt; [327] \"Asia/Ulan_Bator\"                  \"Asia/Urumqi\"                     \n&gt; [329] \"Asia/Ust-Nera\"                    \"Asia/Vientiane\"                  \n&gt; [331] \"Asia/Vladivostok\"                 \"Asia/Yakutsk\"                    \n&gt; [333] \"Asia/Yangon\"                      \"Asia/Yekaterinburg\"              \n&gt; [335] \"Asia/Yerevan\"                     \"Atlantic/Azores\"                 \n&gt; [337] \"Atlantic/Bermuda\"                 \"Atlantic/Canary\"                 \n&gt; [339] \"Atlantic/Cape_Verde\"              \"Atlantic/Faeroe\"                 \n&gt; [341] \"Atlantic/Faroe\"                   \"Atlantic/Jan_Mayen\"              \n&gt; [343] \"Atlantic/Madeira\"                 \"Atlantic/Reykjavik\"              \n&gt; [345] \"Atlantic/South_Georgia\"           \"Atlantic/St_Helena\"              \n&gt; [347] \"Atlantic/Stanley\"                 \"Australia/ACT\"                   \n&gt; [349] \"Australia/Adelaide\"               \"Australia/Brisbane\"              \n&gt; [351] \"Australia/Broken_Hill\"            \"Australia/Canberra\"              \n&gt; [353] \"Australia/Currie\"                 \"Australia/Darwin\"                \n&gt; [355] \"Australia/Eucla\"                  \"Australia/Hobart\"                \n&gt; [357] \"Australia/LHI\"                    \"Australia/Lindeman\"              \n&gt; [359] \"Australia/Lord_Howe\"              \"Australia/Melbourne\"             \n&gt; [361] \"Australia/North\"                  \"Australia/NSW\"                   \n&gt; [363] \"Australia/Perth\"                  \"Australia/Queensland\"            \n&gt; [365] \"Australia/South\"                  \"Australia/Sydney\"                \n&gt; [367] \"Australia/Tasmania\"               \"Australia/Victoria\"              \n&gt; [369] \"Australia/West\"                   \"Australia/Yancowinna\"            \n&gt; [371] \"Brazil/Acre\"                      \"Brazil/DeNoronha\"                \n&gt; [373] \"Brazil/East\"                      \"Brazil/West\"                     \n&gt; [375] \"Canada/Atlantic\"                  \"Canada/Central\"                  \n&gt; [377] \"Canada/Eastern\"                   \"Canada/Mountain\"                 \n&gt; [379] \"Canada/Newfoundland\"              \"Canada/Pacific\"                  \n&gt; [381] \"Canada/Saskatchewan\"              \"Canada/Yukon\"                    \n&gt; [383] \"CET\"                              \"Chile/Continental\"               \n&gt; [385] \"Chile/EasterIsland\"               \"CST6CDT\"                         \n&gt; [387] \"Cuba\"                             \"EET\"                             \n&gt; [389] \"Egypt\"                            \"Eire\"                            \n&gt; [391] \"EST\"                              \"EST5EDT\"                         \n&gt; [393] \"Etc/GMT\"                          \"Etc/GMT-0\"                       \n&gt; [395] \"Etc/GMT-1\"                        \"Etc/GMT-10\"                      \n&gt; [397] \"Etc/GMT-11\"                       \"Etc/GMT-12\"                      \n&gt; [399] \"Etc/GMT-13\"                       \"Etc/GMT-14\"                      \n&gt; [401] \"Etc/GMT-2\"                        \"Etc/GMT-3\"                       \n&gt; [403] \"Etc/GMT-4\"                        \"Etc/GMT-5\"                       \n&gt; [405] \"Etc/GMT-6\"                        \"Etc/GMT-7\"                       \n&gt; [407] \"Etc/GMT-8\"                        \"Etc/GMT-9\"                       \n&gt; [409] \"Etc/GMT+0\"                        \"Etc/GMT+1\"                       \n&gt; [411] \"Etc/GMT+10\"                       \"Etc/GMT+11\"                      \n&gt; [413] \"Etc/GMT+12\"                       \"Etc/GMT+2\"                       \n&gt; [415] \"Etc/GMT+3\"                        \"Etc/GMT+4\"                       \n&gt; [417] \"Etc/GMT+5\"                        \"Etc/GMT+6\"                       \n&gt; [419] \"Etc/GMT+7\"                        \"Etc/GMT+8\"                       \n&gt; [421] \"Etc/GMT+9\"                        \"Etc/GMT0\"                        \n&gt; [423] \"Etc/Greenwich\"                    \"Etc/UCT\"                         \n&gt; [425] \"Etc/Universal\"                    \"Etc/UTC\"                         \n&gt; [427] \"Etc/Zulu\"                         \"Europe/Amsterdam\"                \n&gt; [429] \"Europe/Andorra\"                   \"Europe/Astrakhan\"                \n&gt; [431] \"Europe/Athens\"                    \"Europe/Belfast\"                  \n&gt; [433] \"Europe/Belgrade\"                  \"Europe/Berlin\"                   \n&gt; [435] \"Europe/Bratislava\"                \"Europe/Brussels\"                 \n&gt; [437] \"Europe/Bucharest\"                 \"Europe/Budapest\"                 \n&gt; [439] \"Europe/Busingen\"                  \"Europe/Chisinau\"                 \n&gt; [441] \"Europe/Copenhagen\"                \"Europe/Dublin\"                   \n&gt; [443] \"Europe/Gibraltar\"                 \"Europe/Guernsey\"                 \n&gt; [445] \"Europe/Helsinki\"                  \"Europe/Isle_of_Man\"              \n&gt; [447] \"Europe/Istanbul\"                  \"Europe/Jersey\"                   \n&gt; [449] \"Europe/Kaliningrad\"               \"Europe/Kiev\"                     \n&gt; [451] \"Europe/Kirov\"                     \"Europe/Kyiv\"                     \n&gt; [453] \"Europe/Lisbon\"                    \"Europe/Ljubljana\"                \n&gt; [455] \"Europe/London\"                    \"Europe/Luxembourg\"               \n&gt; [457] \"Europe/Madrid\"                    \"Europe/Malta\"                    \n&gt; [459] \"Europe/Mariehamn\"                 \"Europe/Minsk\"                    \n&gt; [461] \"Europe/Monaco\"                    \"Europe/Moscow\"                   \n&gt; [463] \"Europe/Nicosia\"                   \"Europe/Oslo\"                     \n&gt; [465] \"Europe/Paris\"                     \"Europe/Podgorica\"                \n&gt; [467] \"Europe/Prague\"                    \"Europe/Riga\"                     \n&gt; [469] \"Europe/Rome\"                      \"Europe/Samara\"                   \n&gt; [471] \"Europe/San_Marino\"                \"Europe/Sarajevo\"                 \n&gt; [473] \"Europe/Saratov\"                   \"Europe/Simferopol\"               \n&gt; [475] \"Europe/Skopje\"                    \"Europe/Sofia\"                    \n&gt; [477] \"Europe/Stockholm\"                 \"Europe/Tallinn\"                  \n&gt; [479] \"Europe/Tirane\"                    \"Europe/Tiraspol\"                 \n&gt; [481] \"Europe/Ulyanovsk\"                 \"Europe/Uzhgorod\"                 \n&gt; [483] \"Europe/Vaduz\"                     \"Europe/Vatican\"                  \n&gt; [485] \"Europe/Vienna\"                    \"Europe/Vilnius\"                  \n&gt; [487] \"Europe/Volgograd\"                 \"Europe/Warsaw\"                   \n&gt; [489] \"Europe/Zagreb\"                    \"Europe/Zaporozhye\"               \n&gt; [491] \"Europe/Zurich\"                    \"Factory\"                         \n&gt; [493] \"GB\"                               \"GB-Eire\"                         \n&gt; [495] \"GMT\"                              \"GMT-0\"                           \n&gt; [497] \"GMT+0\"                            \"GMT0\"                            \n&gt; [499] \"Greenwich\"                        \"Hongkong\"                        \n&gt; [501] \"HST\"                              \"Iceland\"                         \n&gt; [503] \"Indian/Antananarivo\"              \"Indian/Chagos\"                   \n&gt; [505] \"Indian/Christmas\"                 \"Indian/Cocos\"                    \n&gt; [507] \"Indian/Comoro\"                    \"Indian/Kerguelen\"                \n&gt; [509] \"Indian/Mahe\"                      \"Indian/Maldives\"                 \n&gt; [511] \"Indian/Mauritius\"                 \"Indian/Mayotte\"                  \n&gt; [513] \"Indian/Reunion\"                   \"Iran\"                            \n&gt; [515] \"Israel\"                           \"Jamaica\"                         \n&gt; [517] \"Japan\"                            \"Kwajalein\"                       \n&gt; [519] \"Libya\"                            \"MET\"                             \n&gt; [521] \"Mexico/BajaNorte\"                 \"Mexico/BajaSur\"                  \n&gt; [523] \"Mexico/General\"                   \"MST\"                             \n&gt; [525] \"MST7MDT\"                          \"Navajo\"                          \n&gt; [527] \"NZ\"                               \"NZ-CHAT\"                         \n&gt; [529] \"Pacific/Apia\"                     \"Pacific/Auckland\"                \n&gt; [531] \"Pacific/Bougainville\"             \"Pacific/Chatham\"                 \n&gt; [533] \"Pacific/Chuuk\"                    \"Pacific/Easter\"                  \n&gt; [535] \"Pacific/Efate\"                    \"Pacific/Enderbury\"               \n&gt; [537] \"Pacific/Fakaofo\"                  \"Pacific/Fiji\"                    \n&gt; [539] \"Pacific/Funafuti\"                 \"Pacific/Galapagos\"               \n&gt; [541] \"Pacific/Gambier\"                  \"Pacific/Guadalcanal\"             \n&gt; [543] \"Pacific/Guam\"                     \"Pacific/Honolulu\"                \n&gt; [545] \"Pacific/Johnston\"                 \"Pacific/Kanton\"                  \n&gt; [547] \"Pacific/Kiritimati\"               \"Pacific/Kosrae\"                  \n&gt; [549] \"Pacific/Kwajalein\"                \"Pacific/Majuro\"                  \n&gt; [551] \"Pacific/Marquesas\"                \"Pacific/Midway\"                  \n&gt; [553] \"Pacific/Nauru\"                    \"Pacific/Niue\"                    \n&gt; [555] \"Pacific/Norfolk\"                  \"Pacific/Noumea\"                  \n&gt; [557] \"Pacific/Pago_Pago\"                \"Pacific/Palau\"                   \n&gt; [559] \"Pacific/Pitcairn\"                 \"Pacific/Pohnpei\"                 \n&gt; [561] \"Pacific/Ponape\"                   \"Pacific/Port_Moresby\"            \n&gt; [563] \"Pacific/Rarotonga\"                \"Pacific/Saipan\"                  \n&gt; [565] \"Pacific/Samoa\"                    \"Pacific/Tahiti\"                  \n&gt; [567] \"Pacific/Tarawa\"                   \"Pacific/Tongatapu\"               \n&gt; [569] \"Pacific/Truk\"                     \"Pacific/Wake\"                    \n&gt; [571] \"Pacific/Wallis\"                   \"Pacific/Yap\"                     \n&gt; [573] \"Poland\"                           \"Portugal\"                        \n&gt; [575] \"PRC\"                              \"PST8PDT\"                         \n&gt; [577] \"ROC\"                              \"ROK\"                             \n&gt; [579] \"Singapore\"                        \"Turkey\"                          \n&gt; [581] \"UCT\"                              \"Universal\"                       \n&gt; [583] \"US/Alaska\"                        \"US/Aleutian\"                     \n&gt; [585] \"US/Arizona\"                       \"US/Central\"                      \n&gt; [587] \"US/East-Indiana\"                  \"US/Eastern\"                      \n&gt; [589] \"US/Hawaii\"                        \"US/Indiana-Starke\"               \n&gt; [591] \"US/Michigan\"                      \"US/Mountain\"                     \n&gt; [593] \"US/Pacific\"                       \"US/Samoa\"                        \n&gt; [595] \"UTC\"                              \"W-SU\"                            \n&gt; [597] \"WET\"                              \"Zulu\"                            \n&gt; attr(,\"Version\")\n&gt; [1] \"2025b\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#changing-time-zones",
    "href": "Lectures/CSSS508_Lecture5.html#changing-time-zones",
    "title": "CSSS 508",
    "section": "Changing Time Zones",
    "text": "Changing Time Zones\nThere are two ways you may want to change the time zone:\nKeep instant in time, change display\n\nx &lt;- ymd_hms(\"2024-06-01 12:00:00\", tz = \"America/New_York\")\nx\n\n17with_tz(x, tzone = \"Australia/Lord_Howe\")\n\n\n17\n\nThe +1030 offset is the difference relative to UTC (functionally similar to Greenwich Mean Time) which is 2024-06-01 16:00:00 UTC in this example.\n\n\n\n\n&gt; [1] \"2024-06-01 12:00:00 EDT\"\n&gt; [1] \"2024-06-02 02:30:00 +1030\"\n\n\n\nChange underlying instant in time\n\ny &lt;- ymd_hms(\"2024-06-01 9:00:00\", tz = \"America/Los_Angeles\")\ny\n\n18force_tz(y, tzone = \"Australia/Lord_Howe\")\n\n\n18\n\nIn this case the time zone was labelled incorrectly so by forcing the correct time zone we changed the underlying instant in time.\n\n\n\n\n&gt; [1] \"2024-06-01 09:00:00 PDT\"\n&gt; [1] \"2024-06-01 09:00:00 +1030\"",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#default-time-zones",
    "href": "Lectures/CSSS508_Lecture5.html#default-time-zones",
    "title": "CSSS 508",
    "section": "Default Time Zones",
    "text": "Default Time Zones\nTime zones in R only control printing of date/time objects. Unless otherwise specified, lubridate always uses UTC1.\nOperations that combine date-times, like c(), will often drop the time zone. In that case, the date-times will display in the time zone of the first element:\n\na &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Asia/Gaza\") \nb &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Cuba\") \nc &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Africa/Kinshasa\") \n19a\n20b\n21c\nc(a, b, c)\n\n\n19\n\nEEST = Eastern European Summer Time\n\n20\n\nCDT = Central Daylight Time\n\n21\n\nWAT = West Africa Time\n\n\n\n\n&gt; [1] \"2024-06-01 14:00:00 EEST\"\n&gt; [1] \"2024-06-01 14:00:00 CDT\"\n&gt; [1] \"2024-06-01 14:00:00 WAT\"\n&gt; [1] \"2024-06-01 14:00:00 EEST\" \"2024-06-01 21:00:00 EEST\"\n&gt; [3] \"2024-06-01 16:00:00 EEST\"\n\n\nUTC (Coordinated Universal Time) is the standard time zone used by the scientific community and is roughly equivalent to GMT (Greenwich Mean Time). It does not have DST, which makes a convenient representation for computation.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#answers-1",
    "href": "Lectures/CSSS508_Lecture5.html#answers-1",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nPivot your data to make it tidy1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\")\nreligion_income_tidy\n\n&gt; # A tibble: 180 × 3\n&gt;    religion income             frequency\n&gt;    &lt;fct&gt;    &lt;chr&gt;                  &lt;dbl&gt;\n&gt;  1 Agnostic &lt;$10k                     27\n&gt;  2 Agnostic $10-20k                   34\n&gt;  3 Agnostic $20-30k                   60\n&gt;  4 Agnostic $30-40k                   81\n&gt;  5 Agnostic $40-50k                   76\n&gt;  6 Agnostic $50-75k                  137\n&gt;  7 Agnostic $75-100k                 122\n&gt;  8 Agnostic $100-150k                109\n&gt;  9 Agnostic &gt;150k                     84\n&gt; 10 Agnostic Don't know/refused        96\n&gt; # ℹ 170 more rows\n\n\nThere should be 3 columns in your final dataset",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#answers-2",
    "href": "Lectures/CSSS508_Lecture5.html#answers-2",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")))\n\nHint: Which two variables are categorical?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#answers-3",
    "href": "Lectures/CSSS508_Lecture5.html#answers-3",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")), \n2         religion = fct(religion))\n\n\n2\n\nIf we hadn’t initially read in religion as a factor, we’d need to recode it as one during this step.\n\n\n\n\nHint: Which two variables are categorical?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  },
  {
    "objectID": "Lectures/CSSS508_Lecture5.html#answers-4",
    "href": "Lectures/CSSS508_Lecture5.html#answers-4",
    "title": "CSSS 508",
    "section": "Answers",
    "text": "Answers\n\nreligion_income_tidy\n\n&gt; # A tibble: 180 × 3\n&gt;    religion income             frequency\n&gt;    &lt;fct&gt;    &lt;fct&gt;                  &lt;dbl&gt;\n&gt;  1 Agnostic &lt;$10k                     27\n&gt;  2 Agnostic $10-20k                   34\n&gt;  3 Agnostic $20-30k                   60\n&gt;  4 Agnostic $30-40k                   81\n&gt;  5 Agnostic $40-50k                   76\n&gt;  6 Agnostic $50-75k                  137\n&gt;  7 Agnostic $75-100k                 122\n&gt;  8 Agnostic $100-150k                109\n&gt;  9 Agnostic &gt;150k                     84\n&gt; 10 Agnostic Don't know/refused        96\n&gt; # ℹ 170 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 5: Import, tidy, export"
    ]
  }
]